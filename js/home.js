/**
 * Kantpoll Project
 * https://github.com/kantpoll
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/******************** jQuery, Materialize ********************/
$(document).ready(function () {
    //Initializing the materialize tabs
    $('ul.tabs').tabs();
    //initialize all modals
    $('.modal').modal();
    //Placing an empty sidenav on the right side of the screen
    $("#right").sideNav({edge: 'right'});
    $("#menu_mobile").sideNav({
            menuWidth: 150,
            edge: 'right',
            closeOnClick: true
        }
    );
    //To render selects inside modals
    sleep(500).then(function () {
        $('select').material_select()
    });

    //Creating custom touch events for mobile
    (function(d) {
        var
            ce = function(e, n) {
                var a = document.createEvent("CustomEvent");
                a.initCustomEvent(n, true, true, e.target);
                e.target.dispatchEvent(a);
                a = null;
                return false
            },
            nm = true,
            sp = {
                x: 0,
                y: 0
            },
            ep = {
                x: 0,
                y: 0
            },
            touch = {
                touchstart: function(e) {
                    sp = {
                        x: e.touches[0].pageX,
                        y: e.touches[0].pageY
                    }
                },
                touchmove: function(e) {
                    nm = false;
                    ep = {
                        x: e.touches[0].pageX,
                        y: e.touches[0].pageY
                    }
                },
                touchend: function(e) {
                    if (nm) {
                        ce(e, 'fc')
                    } else {
                        var x = ep.x - sp.x,
                            xr = Math.abs(x),
                            y = ep.y - sp.y,
                            yr = Math.abs(y);
                        if (Math.max(xr, yr) > 20) {
                            ce(e, (xr > yr ? (x < 0 ? 'swl' : 'swr') : (y < 0 ? 'swu' : 'swd')))
                        }
                    }
                    nm = true
                },
                touchcancel: function(e) {
                    nm = false
                }
            };
        for (var a in touch) {
            d.addEventListener(a, touch[a], false);
        }
    })(document);
});

/**
 * To activate menu items when clicked
 */
$("#slide_out1 li").on("click", function () {
    $("#slide_out1 li").removeClass("active");
    $(this).addClass("active")
});

/******************** Constants ********************/
//Special string
const THE_AND = "--and--";

//Message topics
const REGISTER_VOTER = "RGVT";
const PREVOTE = "PREV";
const ENTER_GROUP = "ENGR";

//Other messages
const DELETE_SUFFIX = "-delete";

//Refresh rates
const UPDATE_JSON_GROUPS_RATE = 30000;
const STORE_CAMPAIGN_INFO_RATE = 60000;
const MINUTES_TO_UPDATE_CAMPAIGN = 5;
const MINUTES_TO_UPDATE_MYGROUP = 5;
const MINUTES_TO_UPDATE_IPFS_INFO = 10;

//Other rates
const WAIT_TO_CREATE_GROUPS = 45000;
const TIME_TRYING_TO_CONNECT_WEB3 = 25000;
const TIME_TO_SET_VAULT = 5000;
const MINUTES_TO_REGISTER_VOTER = 20;
const TIME_TO_NEXT_REQUEST = 10000;
const SECONDS_TO_UPDATE_INFO = 15;
const TIME_TO_CREATE_CONTRACT = 5000;

//My group indexes
const MINC = "-3"; //My group index - not connected
const MIRE = "-2"; //My group index - registered
const MINR = "-1"; //My group index - not registered

//This contract was created at https://remix.ethereum.org/
const CAMPAIGN_CONTRACT_MGZ3_STR = '[{"constant":true,"inputs":[],"name":"howManyGroupCategories","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"hashcode","type":"bytes32"}],"name":"checkHashcode","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"}],"name":"howManyCandidatesInBallot","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"candidate","type":"uint256"}],"name":"incrementCancellations","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"cPerson","type":"address"},{"name":"category","type":"uint256"}],"name":"addGroup","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"person","type":"address"},{"name":"pos","type":"uint256"}],"name":"getTor","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"group","type":"uint256"},{"name":"fnumber","type":"bytes32"}],"name":"getPreVote","outputs":[{"name":"voter","type":"bytes20"},{"name":"candidate","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"chairperson","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"pos","type":"uint256"}],"name":"getCampaignIpfsInfo","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"candidate","type":"uint256"}],"name":"getCancellations","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"howManyGroups","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"candidate","type":"uint256"}],"name":"getCandidate","outputs":[{"name":"website","type":"bytes32"},{"name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"stoppingAccessionToGroups","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"}],"name":"iterateCandidatesCounter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"disableCandidateLink","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"ballots","outputs":[{"name":"id","type":"bytes32"},{"name":"closed","type":"bool"},{"name":"stopped","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"}],"name":"unstopBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"howManyBallots","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"toVoter","type":"address"}],"name":"removeRightToVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"voter","type":"address"},{"name":"grp","type":"uint256"},{"name":"position","type":"uint256"}],"name":"addVoterToGroup","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"},{"name":"position","type":"uint256"}],"name":"commitVotationPerPosition","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"person","type":"address"},{"name":"pos","type":"uint256"},{"name":"value","type":"bytes32"}],"name":"defineTor","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"toVoter","type":"address"},{"name":"prefix","type":"uint256"},{"name":"pubkey","type":"bytes32"},{"name":"hashcode","type":"bytes32"}],"name":"giveRightToVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"},{"name":"position","type":"uint256"}],"name":"committed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"group","type":"uint256"},{"name":"fnumber","type":"bytes32"},{"name":"voter","type":"bytes20"},{"name":"candidate","type":"uint256"}],"name":"addPreVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"},{"name":"position","type":"uint256"},{"name":"first_number","type":"bytes32"},{"name":"the_candidate","type":"uint256"}],"name":"vote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"}],"name":"getVotes","outputs":[{"name":"","type":"bytes32[3]"},{"name":"","type":"uint256[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"group","type":"uint256"}],"name":"getGroupVoters","outputs":[{"name":"","type":"address[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"groups","outputs":[{"name":"cPerson","type":"address"},{"name":"category","type":"uint256"},{"name":"size","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"group","type":"uint256"}],"name":"getGroupPubkeys","outputs":[{"name":"","type":"uint256[3]"},{"name":"","type":"bytes32[3]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"rounds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"remainingRounds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"position","type":"uint256"},{"name":"website","type":"bytes32"}],"name":"addCandidateIntoBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"b","type":"bool"}],"name":"defineCanCancel","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"}],"name":"stopBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"candidate","type":"uint256"},{"name":"category","type":"uint256"}],"name":"getVotesPerBallotCandidateCategory","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"id","type":"bytes32"}],"name":"addBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"groupCategories","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"message","type":"bytes32"}],"name":"defineCurrentMessage","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"mgz","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"b","type":"bool"}],"name":"defineDisableCandidateLink","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"}],"name":"closeBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"canCancel","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"voter","type":"address"}],"name":"getVoter","outputs":[{"name":"pubkey","type":"bytes32"},{"name":"prefix","type":"uint256"},{"name":"group","type":"uint256"},{"name":"hasGroup","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"}],"name":"defineCurrentBallot","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"currentMessage","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"},{"name":"position","type":"uint256"}],"name":"committedStatistics","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"str","type":"bytes32"}],"name":"defineStoppingAccessionToGroups","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"category","type":"bytes32"}],"name":"addGroupCategory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"pos","type":"uint256"},{"name":"value","type":"bytes32"}],"name":"defineCampaignIpfsInfo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"ballot","type":"uint256"},{"name":"grp","type":"uint256"},{"name":"position","type":"uint256"}],"name":"commitVotationStatisticsPerPosition","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"currentBallot","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"r","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]';

const CAMPAIGN_CONTRACT_MGZ3 = JSON.parse(CAMPAIGN_CONTRACT_MGZ3_STR);

const CAMPAIGN_CONTRACT_MGZ27 = JSON.parse(CAMPAIGN_CONTRACT_MGZ3_STR.replace(new RegExp("\\[3\\]", 'g'), "[27]"));

const CAMPAIGN_CONTRACT_MGZ81 = JSON.parse(CAMPAIGN_CONTRACT_MGZ3_STR.replace(new RegExp("\\[3\\]", 'g'), "[81]"));

const CONTRACT_DATA_MGZ3 = '0x608060405234801561001057600080fd5b506040516020806200341a83398101806040528101908080519060200190929190505050600081118015610045575060058111155b151561005057600080fd5b33600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600681905550806007819055505061336a80620000b06000396000f300608060405260043610610272576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a7c172b146102775780630fcf6143146102a2578063103eb2f7146102eb57806319f1e8161461032c5780631a409c24146103635780631dcd1e17146103b05780632b9127d4146104195780632e4176cf146104975780632e8112fd146104ee578063419cc25f14610537578063422f675b146105825780634bd46448146105ad5780634f2dc68d146106075780635182d3f11461063a5780635715a6e0146106675780635c632b38146106965780635e59d00a146106f5578063656e2a3714610722578063685a9dd81461074d5780636e85f432146107905780636f3cb6d6146107e7578063755bd7a5146108285780637db6a02914610883578063812d9dd4146108ec57806381779e38146109455780638fbd82ef146109ad57806391f3663314610a06578063939cf16d14610aa857806396324bd414610b115780639973383814610b8c578063a2e800ad14610c24578063a7e22a3e14610c4f578063a88a74af14610c7a578063adedcf7914610cbf578063b1bb8fdc14610cee578063b7b066c414610d1b578063b8d9747314610d70578063bfc3f2d514610da1578063c447149414610dea578063c4c1ce4514610e1b578063c6483da014610e46578063d045f1e414610e75578063d0f3725f14610ea2578063d4f50f9814610ed1578063d508d79914610f49578063d9203db614610f76578063e197525814610fa9578063e4ed866514611002578063e4f97e5d14611033578063e906803314611064578063ee9315811461109f578063f80723a8146110e0575b600080fd5b34801561028357600080fd5b5061028c61110b565b6040518082815260200191505060405180910390f35b3480156102ae57600080fd5b506102d16004803603810190808035600019169060200190929190505050611118565b604051808215151515815260200191505060405180910390f35b3480156102f757600080fd5b506103166004803603810190808035906020019092919050505061114a565b6040518082815260200191505060405180910390f35b34801561033857600080fd5b506103616004803603810190808035906020019092919080359060200190929190505050611164565b005b34801561036f57600080fd5b506103ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611231565b005b3480156103bc57600080fd5b506103fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611362565b60405180826000191660001916815260200191505060405180910390f35b34801561042557600080fd5b5061045c600480360381019080803590602001909291908035906020019092919080356000191690602001909291905050506113bd565b60405180836bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020018281526020019250505060405180910390f35b3480156104a357600080fd5b506104ac611469565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104fa57600080fd5b506105196004803603810190808035906020019092919050505061148f565b60405180826000191660001916815260200191505060405180910390f35b34801561054357600080fd5b5061056c60048036038101908080359060200190929190803590602001909291905050506114ac565b6040518082815260200191505060405180910390f35b34801561058e57600080fd5b506105976114dc565b6040518082815260200191505060405180910390f35b3480156105b957600080fd5b506105e260048036038101908080359060200190929190803590602001909291905050506114e9565b6040518083600019166000191681526020018281526020019250505060405180910390f35b34801561061357600080fd5b5061061c611547565b60405180826000191660001916815260200191505060405180910390f35b34801561064657600080fd5b506106656004803603810190808035906020019092919050505061154d565b005b34801561067357600080fd5b5061067c61156f565b604051808215151515815260200191505060405180910390f35b3480156106a257600080fd5b506106c160048036038101908080359060200190929190505050611582565b6040518084600019166000191681526020018315151515815260200182151515158152602001935050505060405180910390f35b34801561070157600080fd5b50610720600480360381019080803590602001909291905050506115d5565b005b34801561072e57600080fd5b506107376116b7565b6040518082815260200191505060405180910390f35b34801561075957600080fd5b5061078e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116c4565b005b34801561079c57600080fd5b506107e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061176b565b005b3480156107f357600080fd5b50610826600480360381019080803590602001909291908035906020019092919080359060200190929190505050611a69565b005b34801561083457600080fd5b50610881600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600019169060200190929190505050611c84565b005b34801561088f57600080fd5b506108ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080356000191690602001909291908035600019169060200190929190505050611d1c565b005b3480156108f857600080fd5b5061092b600480360381019080803590602001909291908035906020019092919080359060200190929190505050611e44565b604051808215151515815260200191505060405180910390f35b34801561095157600080fd5b506109ab6004803603810190808035906020019092919080359060200190929190803560001916906020019092919080356bffffffffffffffffffffffff1916906020019092919080359060200190929190505050611e93565b005b3480156109b957600080fd5b50610a04600480360381019080803590602001909291908035906020019092919080359060200190929190803560001916906020019092919080359060200190929190505050611ff0565b005b348015610a1257600080fd5b50610a3b600480360381019080803590602001909291908035906020019092919050505061232a565b6040518083600360200280838360005b83811015610a66578082015181840152602081019050610a4b565b5050505090500182600360200280838360005b83811015610a94578082015181840152602081019050610a79565b505050509050019250505060405180910390f35b348015610ab457600080fd5b50610ad360048036038101908080359060200190929190505050612422565b6040518082600360200280838360005b83811015610afe578082015181840152602081019050610ae3565b5050505090500191505060405180910390f35b348015610b1d57600080fd5b50610b3c600480360381019080803590602001909291905050506124e2565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b348015610b9857600080fd5b50610bb76004803603810190808035906020019092919050505061253b565b6040518083600360200280838360005b83811015610be2578082015181840152602081019050610bc7565b5050505090500182600360200280838360005b83811015610c10578082015181840152602081019050610bf5565b505050509050019250505060405180910390f35b348015610c3057600080fd5b50610c396126cb565b6040518082815260200191505060405180910390f35b348015610c5b57600080fd5b50610c646126d1565b6040518082815260200191505060405180910390f35b348015610c8657600080fd5b50610cbd600480360381019080803590602001909291908035906020019092919080356000191690602001909291905050506126d7565b005b348015610ccb57600080fd5b50610cec6004803603810190808035151590602001909291905050506127a9565b005b348015610cfa57600080fd5b50610d1960048036038101908080359060200190929190505050612821565b005b348015610d2757600080fd5b50610d5a600480360381019080803590602001909291908035906020019092919080359060200190929190505050612903565b6040518082815260200191505060405180910390f35b348015610d7c57600080fd5b50610d9f6004803603810190808035600019169060200190929190505050612945565b005b348015610dad57600080fd5b50610dcc60048036038101908080359060200190929190505050612a6c565b60405180826000191660001916815260200191505060405180910390f35b348015610df657600080fd5b50610e196004803603810190808035600019169060200190929190505050612a8f565b005b348015610e2757600080fd5b50610e30612af9565b6040518082815260200191505060405180910390f35b348015610e5257600080fd5b50610e73600480360381019080803515159060200190929190505050612afe565b005b348015610e8157600080fd5b50610ea060048036038101908080359060200190929190505050612b77565b005b348015610eae57600080fd5b50610eb7612c59565b604051808215151515815260200191505060405180910390f35b348015610edd57600080fd5b50610f12600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c6b565b6040518085600019166000191681526020018481526020018381526020018215151515815260200194505050505060405180910390f35b348015610f5557600080fd5b50610f7460048036038101908080359060200190929190505050612d99565b005b348015610f8257600080fd5b50610f8b612e49565b60405180826000191660001916815260200191505060405180910390f35b348015610fb557600080fd5b50610fe8600480360381019080803590602001909291908035906020019092919080359060200190929190505050612e4f565b604051808215151515815260200191505060405180910390f35b34801561100e57600080fd5b506110316004803603810190808035600019169060200190929190505050612e9e565b005b34801561103f57600080fd5b506110626004803603810190808035600019169060200190929190505050612f08565b005b34801561107057600080fd5b5061109d600480360381019080803590602001909291908035600019169060200190929190505050613004565b005b3480156110ab57600080fd5b506110de600480360381019080803590602001909291908035906020019092919080359060200190929190505050613080565b005b3480156110ec57600080fd5b506110f56132cf565b6040518082815260200191505060405180910390f35b6000600280549050905090565b600060056000836000191660001916815260200190815260200160002060009054906101000a900460ff169050919050565b6000600f8260ff8110151561115b57fe5b01549050919050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c057600080fd5b6003828154811015156111cf57fe5b906000526020600020906002020160010160009054906101000a900460ff1615156111f957600080fd5b600161010e60008481526020019081526020016000206000838152602001908152602001600020600082825401925050819055505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128d57600080fd5b600280549050811015156112a057600080fd5b60016060604051908101604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050505050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008061010f600086815260200190815260200160002060008581526020019081526020016000206000846000191660001916815260200190815260200160002060000160009054906101000a90046c0100000000000000000000000002915061010f6000868152602001908152602001600020600085815260200190815260200160002060008460001916600019168152602001908152602001600020600101549050935093915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600b6000838152602001908152602001600020549050919050565b600061010e6000848152602001908152602001600020600083815260200190815260200160002054905092915050565b6000600180549050905090565b600080600e60008581526020019081526020016000206000848152602001908152602001600020600001549150600e600085815260200190815260200160002060008481526020019081526020016000206001015490509250929050565b600a5481565b6001600f8260ff8110151561155e57fe5b016000828254019250508190555050565b600060019054906101000a900460ff1681565b60038181548110151561159157fe5b90600052602060002090600202016000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16905083565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561163157600080fd5b6006548110151561164157600080fd5b60038181548110151561165057fe5b906000526020600020906002020160010160009054906101000a900460ff1615151561167b57600080fd5b600060038281548110151561168c57fe5b906000526020600020906002020160010160016101000a81548160ff02191690831515021790555050565b6000600380549050905090565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172057600080fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117c757600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615151561182357600080fd5b600360018381548110151561183457fe5b90600052602060002090600302016002015410151561185257600080fd5b60038110151561186157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600d6000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156118e057600080fd5b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411151561193157600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff021916908315150217905550600180838154811015156119e357fe5b90600052602060002090600302016002016000828254019250508190555082600d6000848152602001908152602001600020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600384815481101515611a7a57fe5b906000526020600020906002020160010160009054906101000a900460ff161515611aa457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600184815481101515611aca57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611b1e57600080fd5b61011260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151515611b6e57600080fd5b6000600102600019166101116000868152602001908152602001600020600085815260200190815260200160002060008481526020019081526020016000206000015460001916141515611c7e576101116000858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000206001015490506001600e6000868152602001908152602001600020600083815260200190815260200160002060010160008282540192505081905550600161011260008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50505050565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cbe57600080fd5b80600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208160001916905550505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d7857600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001816000191690555082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600160056000836000191660001916815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b600061011260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b60006c01000000000000000000000000026bffffffffffffffffffffffff191661010f600087815260200190815260200160002060008681526020019081526020016000206000856000191660001916815260200190815260200160002060000160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff1916141515611f2957600080fd5b8161010f600087815260200190815260200160002060008681526020019081526020016000206000856000191660001916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055508061010f6000878152602001908152602001600020600086815260200190815260200160002060008560001916600019168152602001908152602001600020600101819055505050505050565b600060018581548110151561200157fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561206c57600080fd5b60038681548110151561207b57fe5b906000526020600020906002020160010160009054906101000a900460ff161515156120a657600080fd5b6003868154811015156120b557fe5b906000526020600020906002020160010160019054906101000a900460ff161515156120e057600080fd5b600654861015156120f057600080fd5b6003841015156120ff57600080fd5b600060010260001916610111600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600001546000191614151561215257600080fd5b8161010f6000888152602001908152602001600020600087815260200190815260200160002060008560001916600019168152602001908152602001600020600101541415156121a157600080fd5b60006c01000000000000000000000000026bffffffffffffffffffffffff191661010f600088815260200190815260200160002060008781526020019081526020016000206000856000191660001916815260200190815260200160002060000160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19161415151561223857600080fd5b600090505b60038110156122a15782600019166101116000888152602001908152602001600020600087815260200190815260200160002060008381526020019081526020016000206000015460001916141561229457612322565b808060010191505061223d565b82610111600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600001816000191690555081610111600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600101819055505b505050505050565b6123326132d5565b61233a6132f8565b6123426132d5565b61234a6132f8565b60008090505b6003811015612412576101116000888152602001908152602001600020600087815260200190815260200160002060008281526020019081526020016000206000015483826003811015156123a157fe5b602002019060001916908160001916815250506101116000888152602001908152602001600020600087815260200190815260200160002060008281526020019081526020016000206001015482826003811015156123fc57fe5b6020020181815250508080600101915050612350565b8282945094505050509250929050565b61242a61331b565b61243261331b565b60008090505b60038110156124d857600d6000858152602001908152602001600020600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828260038110151561249457fe5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050612438565b8192505050919050565b6001818154811015156124f157fe5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b6125436132f8565b61254b6132d5565b6125536132d5565b61255b6132f8565b60008090505b60038110156126bd5760046000600d6000898152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015483826003811015156125ff57fe5b6020020190600019169081600019168152505060046000600d6000898152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015482826003811015156126a757fe5b6020020181815250508080600101915050612561565b818394509450505050915091565b60065481565b60075481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561273357600080fd5b600060010260001916600e60008581526020019081526020016000206000848152602001908152602001600020600001546000191614151561277457600080fd5b80600e600085815260200190815260200160002060008481526020019081526020016000206000018160001916905550505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561280557600080fd5b806000806101000a81548160ff02191690831515021790555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561287d57600080fd5b6006548110151561288d57600080fd5b60038181548110151561289c57fe5b906000526020600020906002020160010160009054906101000a900460ff161515156128c757600080fd5b60016003828154811015156128d857fe5b906000526020600020906002020160010160016101000a81548160ff02191690831515021790555050565b60006101106000858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000205490509392505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129a157600080fd5b60006007541115156129b257600080fd5b600160076000828254039250508190555060036060604051908101604052808360001916815260200160001515815260200160001515815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000019060001916905560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555050505050565b600281815481101515612a7b57fe5b906000526020600020016000915090505481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612aeb57600080fd5b806009816000191690555050565b600381565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b5a57600080fd5b80600060016101000a81548160ff02191690831515021790555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bd357600080fd5b60065481101515612be357600080fd5b600381815481101515612bf257fe5b906000526020600020906002020160010160009054906101000a900460ff16151515612c1d57600080fd5b6001600382815481101515612c2e57fe5b906000526020600020906002020160010160006101000a81548160ff02191690831515021790555050565b6000809054906101000a900460ff1681565b600080600080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549350600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549150600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1690509193509193565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612df557600080fd5b60065481101515612e0557600080fd5b600381815481101515612e1457fe5b906000526020600020906002020160010160009054906101000a900460ff16151515612e3f57600080fd5b8060088190555050565b60095481565b600061011360008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612efa57600080fd5b80600a816000191690555050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f6557600080fd5b600060010260001916826000191614151515612f8057600080fd5b600090505b600280549050811015612fcd578160001916600282815481101515612fa657fe5b9060005260206000200154600019161415612fc057613000565b8080600101915050612f85565b60028290806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055505b5050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561306057600080fd5b80600b600084815260200190815260200160002081600019169055505050565b60008060038581548110151561309257fe5b906000526020600020906002020160010160009054906101000a900460ff1615156130bc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166001858154811015156130e257fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561313657600080fd5b61011360008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff1615151561318657600080fd5b60006001026000191661011160008781526020019081526020016000206000868152602001908152602001600020600085815260200190815260200160002060000154600019161415156132c85761011160008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060010154915060018481548110151561321f57fe5b9060005260206000209060030201600101549050600161011060008781526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060008282540192505081905550600161011360008781526020019081526020016000206000868152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505050565b60085481565b606060405190810160405280600390602082028038833980820191505090505090565b606060405190810160405280600390602082028038833980820191505090505090565b6060604051908101604052806003906020820280388339808201915050905050905600a165627a7a7230582085f50a73fc9ca500e9168bd7f7b6f55c198708b6cef31c4db15edc07e53600a90029';

const CONTRACT_DATA_MGZ27 = '0x608060405234801561001057600080fd5b506040516020806200341d83398101806040528101908080519060200190929190505050600081118015610045575060058111155b151561005057600080fd5b33600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600681905550806007819055505061336d80620000b06000396000f300608060405260043610610272576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a7c172b146102775780630fcf6143146102a2578063103eb2f7146102eb57806319f1e8161461032c5780631a409c24146103635780631dcd1e17146103b05780632b9127d4146104195780632e4176cf146104975780632e8112fd146104ee578063419cc25f14610537578063422f675b146105825780634bd46448146105ad5780634f2dc68d146106075780635182d3f11461063a5780635715a6e0146106675780635c632b38146106965780635e59d00a146106f5578063656e2a3714610722578063685a9dd81461074d5780636e85f432146107905780636f3cb6d6146107e7578063755bd7a5146108285780637db6a02914610883578063812d9dd4146108ec57806381779e38146109455780638fbd82ef146109ad57806391f3663314610a06578063939cf16d14610aa857806396324bd414610b115780639973383814610b8c578063a2e800ad14610c24578063a7e22a3e14610c4f578063a88a74af14610c7a578063adedcf7914610cbf578063b1bb8fdc14610cee578063b7b066c414610d1b578063b8d9747314610d70578063bfc3f2d514610da1578063c447149414610dea578063c4c1ce4514610e1b578063c6483da014610e46578063d045f1e414610e75578063d0f3725f14610ea2578063d4f50f9814610ed1578063d508d79914610f49578063d9203db614610f76578063e197525814610fa9578063e4ed866514611002578063e4f97e5d14611033578063e906803314611064578063ee9315811461109f578063f80723a8146110e0575b600080fd5b34801561028357600080fd5b5061028c61110b565b6040518082815260200191505060405180910390f35b3480156102ae57600080fd5b506102d16004803603810190808035600019169060200190929190505050611118565b604051808215151515815260200191505060405180910390f35b3480156102f757600080fd5b506103166004803603810190808035906020019092919050505061114a565b6040518082815260200191505060405180910390f35b34801561033857600080fd5b506103616004803603810190808035906020019092919080359060200190929190505050611164565b005b34801561036f57600080fd5b506103ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611231565b005b3480156103bc57600080fd5b506103fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611362565b60405180826000191660001916815260200191505060405180910390f35b34801561042557600080fd5b5061045c600480360381019080803590602001909291908035906020019092919080356000191690602001909291905050506113bd565b60405180836bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020018281526020019250505060405180910390f35b3480156104a357600080fd5b506104ac611469565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104fa57600080fd5b506105196004803603810190808035906020019092919050505061148f565b60405180826000191660001916815260200191505060405180910390f35b34801561054357600080fd5b5061056c60048036038101908080359060200190929190803590602001909291905050506114ac565b6040518082815260200191505060405180910390f35b34801561058e57600080fd5b506105976114dc565b6040518082815260200191505060405180910390f35b3480156105b957600080fd5b506105e260048036038101908080359060200190929190803590602001909291905050506114e9565b6040518083600019166000191681526020018281526020019250505060405180910390f35b34801561061357600080fd5b5061061c611547565b60405180826000191660001916815260200191505060405180910390f35b34801561064657600080fd5b506106656004803603810190808035906020019092919050505061154d565b005b34801561067357600080fd5b5061067c61156f565b604051808215151515815260200191505060405180910390f35b3480156106a257600080fd5b506106c160048036038101908080359060200190929190505050611582565b6040518084600019166000191681526020018315151515815260200182151515158152602001935050505060405180910390f35b34801561070157600080fd5b50610720600480360381019080803590602001909291905050506115d5565b005b34801561072e57600080fd5b506107376116b7565b6040518082815260200191505060405180910390f35b34801561075957600080fd5b5061078e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116c4565b005b34801561079c57600080fd5b506107e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061176b565b005b3480156107f357600080fd5b50610826600480360381019080803590602001909291908035906020019092919080359060200190929190505050611a69565b005b34801561083457600080fd5b50610881600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600019169060200190929190505050611c84565b005b34801561088f57600080fd5b506108ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080356000191690602001909291908035600019169060200190929190505050611d1c565b005b3480156108f857600080fd5b5061092b600480360381019080803590602001909291908035906020019092919080359060200190929190505050611e44565b604051808215151515815260200191505060405180910390f35b34801561095157600080fd5b506109ab6004803603810190808035906020019092919080359060200190929190803560001916906020019092919080356bffffffffffffffffffffffff1916906020019092919080359060200190929190505050611e93565b005b3480156109b957600080fd5b50610a04600480360381019080803590602001909291908035906020019092919080359060200190929190803560001916906020019092919080359060200190929190505050611ff0565b005b348015610a1257600080fd5b50610a3b600480360381019080803590602001909291908035906020019092919050505061232a565b6040518083601b60200280838360005b83811015610a66578082015181840152602081019050610a4b565b5050505090500182601b60200280838360005b83811015610a94578082015181840152602081019050610a79565b505050509050019250505060405180910390f35b348015610ab457600080fd5b50610ad360048036038101908080359060200190929190505050612422565b6040518082601b60200280838360005b83811015610afe578082015181840152602081019050610ae3565b5050505090500191505060405180910390f35b348015610b1d57600080fd5b50610b3c600480360381019080803590602001909291905050506124e2565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b348015610b9857600080fd5b50610bb76004803603810190808035906020019092919050505061253b565b6040518083601b60200280838360005b83811015610be2578082015181840152602081019050610bc7565b5050505090500182601b60200280838360005b83811015610c10578082015181840152602081019050610bf5565b505050509050019250505060405180910390f35b348015610c3057600080fd5b50610c396126cb565b6040518082815260200191505060405180910390f35b348015610c5b57600080fd5b50610c646126d1565b6040518082815260200191505060405180910390f35b348015610c8657600080fd5b50610cbd600480360381019080803590602001909291908035906020019092919080356000191690602001909291905050506126d7565b005b348015610ccb57600080fd5b50610cec6004803603810190808035151590602001909291905050506127a9565b005b348015610cfa57600080fd5b50610d1960048036038101908080359060200190929190505050612821565b005b348015610d2757600080fd5b50610d5a600480360381019080803590602001909291908035906020019092919080359060200190929190505050612903565b6040518082815260200191505060405180910390f35b348015610d7c57600080fd5b50610d9f6004803603810190808035600019169060200190929190505050612945565b005b348015610dad57600080fd5b50610dcc60048036038101908080359060200190929190505050612a6c565b60405180826000191660001916815260200191505060405180910390f35b348015610df657600080fd5b50610e196004803603810190808035600019169060200190929190505050612a8f565b005b348015610e2757600080fd5b50610e30612af9565b6040518082815260200191505060405180910390f35b348015610e5257600080fd5b50610e73600480360381019080803515159060200190929190505050612afe565b005b348015610e8157600080fd5b50610ea060048036038101908080359060200190929190505050612b77565b005b348015610eae57600080fd5b50610eb7612c59565b604051808215151515815260200191505060405180910390f35b348015610edd57600080fd5b50610f12600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c6b565b6040518085600019166000191681526020018481526020018381526020018215151515815260200194505050505060405180910390f35b348015610f5557600080fd5b50610f7460048036038101908080359060200190929190505050612d99565b005b348015610f8257600080fd5b50610f8b612e49565b60405180826000191660001916815260200191505060405180910390f35b348015610fb557600080fd5b50610fe8600480360381019080803590602001909291908035906020019092919080359060200190929190505050612e4f565b604051808215151515815260200191505060405180910390f35b34801561100e57600080fd5b506110316004803603810190808035600019169060200190929190505050612e9e565b005b34801561103f57600080fd5b506110626004803603810190808035600019169060200190929190505050612f08565b005b34801561107057600080fd5b5061109d600480360381019080803590602001909291908035600019169060200190929190505050613004565b005b3480156110ab57600080fd5b506110de600480360381019080803590602001909291908035906020019092919080359060200190929190505050613080565b005b3480156110ec57600080fd5b506110f56132cf565b6040518082815260200191505060405180910390f35b6000600280549050905090565b600060056000836000191660001916815260200190815260200160002060009054906101000a900460ff169050919050565b6000600f8260ff8110151561115b57fe5b01549050919050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c057600080fd5b6003828154811015156111cf57fe5b906000526020600020906002020160010160009054906101000a900460ff1615156111f957600080fd5b600161010e60008481526020019081526020016000206000838152602001908152602001600020600082825401925050819055505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128d57600080fd5b600280549050811015156112a057600080fd5b60016060604051908101604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050505050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008061010f600086815260200190815260200160002060008581526020019081526020016000206000846000191660001916815260200190815260200160002060000160009054906101000a90046c0100000000000000000000000002915061010f6000868152602001908152602001600020600085815260200190815260200160002060008460001916600019168152602001908152602001600020600101549050935093915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600b6000838152602001908152602001600020549050919050565b600061010e6000848152602001908152602001600020600083815260200190815260200160002054905092915050565b6000600180549050905090565b600080600e60008581526020019081526020016000206000848152602001908152602001600020600001549150600e600085815260200190815260200160002060008481526020019081526020016000206001015490509250929050565b600a5481565b6001600f8260ff8110151561155e57fe5b016000828254019250508190555050565b600060019054906101000a900460ff1681565b60038181548110151561159157fe5b90600052602060002090600202016000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16905083565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561163157600080fd5b6006548110151561164157600080fd5b60038181548110151561165057fe5b906000526020600020906002020160010160009054906101000a900460ff1615151561167b57600080fd5b600060038281548110151561168c57fe5b906000526020600020906002020160010160016101000a81548160ff02191690831515021790555050565b6000600380549050905090565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172057600080fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117c757600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615151561182357600080fd5b601b60018381548110151561183457fe5b90600052602060002090600302016002015410151561185257600080fd5b601b8110151561186157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600d6000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156118e057600080fd5b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411151561193157600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff021916908315150217905550600180838154811015156119e357fe5b90600052602060002090600302016002016000828254019250508190555082600d6000848152602001908152602001600020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600384815481101515611a7a57fe5b906000526020600020906002020160010160009054906101000a900460ff161515611aa457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600184815481101515611aca57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611b1e57600080fd5b61011260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151515611b6e57600080fd5b6000600102600019166101116000868152602001908152602001600020600085815260200190815260200160002060008481526020019081526020016000206000015460001916141515611c7e576101116000858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000206001015490506001600e6000868152602001908152602001600020600083815260200190815260200160002060010160008282540192505081905550600161011260008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50505050565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cbe57600080fd5b80600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208160001916905550505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d7857600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001816000191690555082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600160056000836000191660001916815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b600061011260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b60006c01000000000000000000000000026bffffffffffffffffffffffff191661010f600087815260200190815260200160002060008681526020019081526020016000206000856000191660001916815260200190815260200160002060000160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff1916141515611f2957600080fd5b8161010f600087815260200190815260200160002060008681526020019081526020016000206000856000191660001916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055508061010f6000878152602001908152602001600020600086815260200190815260200160002060008560001916600019168152602001908152602001600020600101819055505050505050565b600060018581548110151561200157fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561206c57600080fd5b60038681548110151561207b57fe5b906000526020600020906002020160010160009054906101000a900460ff161515156120a657600080fd5b6003868154811015156120b557fe5b906000526020600020906002020160010160019054906101000a900460ff161515156120e057600080fd5b600654861015156120f057600080fd5b601b841015156120ff57600080fd5b600060010260001916610111600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600001546000191614151561215257600080fd5b8161010f6000888152602001908152602001600020600087815260200190815260200160002060008560001916600019168152602001908152602001600020600101541415156121a157600080fd5b60006c01000000000000000000000000026bffffffffffffffffffffffff191661010f600088815260200190815260200160002060008781526020019081526020016000206000856000191660001916815260200190815260200160002060000160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19161415151561223857600080fd5b600090505b601b8110156122a15782600019166101116000888152602001908152602001600020600087815260200190815260200160002060008381526020019081526020016000206000015460001916141561229457612322565b808060010191505061223d565b82610111600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600001816000191690555081610111600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600101819055505b505050505050565b6123326132d5565b61233a6132f9565b6123426132d5565b61234a6132f9565b60008090505b601b81101561241257610111600088815260200190815260200160002060008781526020019081526020016000206000828152602001908152602001600020600001548382601b811015156123a157fe5b60200201906000191690816000191681525050610111600088815260200190815260200160002060008781526020019081526020016000206000828152602001908152602001600020600101548282601b811015156123fc57fe5b6020020181815250508080600101915050612350565b8282945094505050509250929050565b61242a61331d565b61243261331d565b60008090505b601b8110156124d857600d6000858152602001908152602001600020600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168282601b8110151561249457fe5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050612438565b8192505050919050565b6001818154811015156124f157fe5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b6125436132f9565b61254b6132d5565b6125536132d5565b61255b6132f9565b60008090505b601b8110156126bd5760046000600d6000898152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548382601b811015156125ff57fe5b6020020190600019169081600019168152505060046000600d6000898152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548282601b811015156126a757fe5b6020020181815250508080600101915050612561565b818394509450505050915091565b60065481565b60075481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561273357600080fd5b600060010260001916600e60008581526020019081526020016000206000848152602001908152602001600020600001546000191614151561277457600080fd5b80600e600085815260200190815260200160002060008481526020019081526020016000206000018160001916905550505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561280557600080fd5b806000806101000a81548160ff02191690831515021790555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561287d57600080fd5b6006548110151561288d57600080fd5b60038181548110151561289c57fe5b906000526020600020906002020160010160009054906101000a900460ff161515156128c757600080fd5b60016003828154811015156128d857fe5b906000526020600020906002020160010160016101000a81548160ff02191690831515021790555050565b60006101106000858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000205490509392505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129a157600080fd5b60006007541115156129b257600080fd5b600160076000828254039250508190555060036060604051908101604052808360001916815260200160001515815260200160001515815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000019060001916905560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555050505050565b600281815481101515612a7b57fe5b906000526020600020016000915090505481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612aeb57600080fd5b806009816000191690555050565b601b81565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b5a57600080fd5b80600060016101000a81548160ff02191690831515021790555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bd357600080fd5b60065481101515612be357600080fd5b600381815481101515612bf257fe5b906000526020600020906002020160010160009054906101000a900460ff16151515612c1d57600080fd5b6001600382815481101515612c2e57fe5b906000526020600020906002020160010160006101000a81548160ff02191690831515021790555050565b6000809054906101000a900460ff1681565b600080600080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549350600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549150600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1690509193509193565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612df557600080fd5b60065481101515612e0557600080fd5b600381815481101515612e1457fe5b906000526020600020906002020160010160009054906101000a900460ff16151515612e3f57600080fd5b8060088190555050565b60095481565b600061011360008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612efa57600080fd5b80600a816000191690555050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f6557600080fd5b600060010260001916826000191614151515612f8057600080fd5b600090505b600280549050811015612fcd578160001916600282815481101515612fa657fe5b9060005260206000200154600019161415612fc057613000565b8080600101915050612f85565b60028290806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055505b5050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561306057600080fd5b80600b600084815260200190815260200160002081600019169055505050565b60008060038581548110151561309257fe5b906000526020600020906002020160010160009054906101000a900460ff1615156130bc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166001858154811015156130e257fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561313657600080fd5b61011360008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff1615151561318657600080fd5b60006001026000191661011160008781526020019081526020016000206000868152602001908152602001600020600085815260200190815260200160002060000154600019161415156132c85761011160008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060010154915060018481548110151561321f57fe5b9060005260206000209060030201600101549050600161011060008781526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060008282540192505081905550600161011360008781526020019081526020016000206000868152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505050565b60085481565b61036060405190810160405280601b90602082028038833980820191505090505090565b61036060405190810160405280601b90602082028038833980820191505090505090565b61036060405190810160405280601b906020820280388339808201915050905050905600a165627a7a72305820d756201c3f74d0434908633a7fe7c4146e3776e4b7302c1ac7d87fd38f4166c30029';

const CONTRACT_DATA_MGZ81 = '0x608060405234801561001057600080fd5b506040516020806200341d83398101806040528101908080519060200190929190505050600081118015610045575060058111155b151561005057600080fd5b33600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600681905550806007819055505061336d80620000b06000396000f300608060405260043610610272576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a7c172b146102775780630fcf6143146102a2578063103eb2f7146102eb57806319f1e8161461032c5780631a409c24146103635780631dcd1e17146103b05780632b9127d4146104195780632e4176cf146104975780632e8112fd146104ee578063419cc25f14610537578063422f675b146105825780634bd46448146105ad5780634f2dc68d146106075780635182d3f11461063a5780635715a6e0146106675780635c632b38146106965780635e59d00a146106f5578063656e2a3714610722578063685a9dd81461074d5780636e85f432146107905780636f3cb6d6146107e7578063755bd7a5146108285780637db6a02914610883578063812d9dd4146108ec57806381779e38146109455780638fbd82ef146109ad57806391f3663314610a06578063939cf16d14610aa857806396324bd414610b115780639973383814610b8c578063a2e800ad14610c24578063a7e22a3e14610c4f578063a88a74af14610c7a578063adedcf7914610cbf578063b1bb8fdc14610cee578063b7b066c414610d1b578063b8d9747314610d70578063bfc3f2d514610da1578063c447149414610dea578063c4c1ce4514610e1b578063c6483da014610e46578063d045f1e414610e75578063d0f3725f14610ea2578063d4f50f9814610ed1578063d508d79914610f49578063d9203db614610f76578063e197525814610fa9578063e4ed866514611002578063e4f97e5d14611033578063e906803314611064578063ee9315811461109f578063f80723a8146110e0575b600080fd5b34801561028357600080fd5b5061028c61110b565b6040518082815260200191505060405180910390f35b3480156102ae57600080fd5b506102d16004803603810190808035600019169060200190929190505050611118565b604051808215151515815260200191505060405180910390f35b3480156102f757600080fd5b506103166004803603810190808035906020019092919050505061114a565b6040518082815260200191505060405180910390f35b34801561033857600080fd5b506103616004803603810190808035906020019092919080359060200190929190505050611164565b005b34801561036f57600080fd5b506103ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611231565b005b3480156103bc57600080fd5b506103fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611362565b60405180826000191660001916815260200191505060405180910390f35b34801561042557600080fd5b5061045c600480360381019080803590602001909291908035906020019092919080356000191690602001909291905050506113bd565b60405180836bffffffffffffffffffffffff19166bffffffffffffffffffffffff191681526020018281526020019250505060405180910390f35b3480156104a357600080fd5b506104ac611469565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104fa57600080fd5b506105196004803603810190808035906020019092919050505061148f565b60405180826000191660001916815260200191505060405180910390f35b34801561054357600080fd5b5061056c60048036038101908080359060200190929190803590602001909291905050506114ac565b6040518082815260200191505060405180910390f35b34801561058e57600080fd5b506105976114dc565b6040518082815260200191505060405180910390f35b3480156105b957600080fd5b506105e260048036038101908080359060200190929190803590602001909291905050506114e9565b6040518083600019166000191681526020018281526020019250505060405180910390f35b34801561061357600080fd5b5061061c611547565b60405180826000191660001916815260200191505060405180910390f35b34801561064657600080fd5b506106656004803603810190808035906020019092919050505061154d565b005b34801561067357600080fd5b5061067c61156f565b604051808215151515815260200191505060405180910390f35b3480156106a257600080fd5b506106c160048036038101908080359060200190929190505050611582565b6040518084600019166000191681526020018315151515815260200182151515158152602001935050505060405180910390f35b34801561070157600080fd5b50610720600480360381019080803590602001909291905050506115d5565b005b34801561072e57600080fd5b506107376116b7565b6040518082815260200191505060405180910390f35b34801561075957600080fd5b5061078e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116c4565b005b34801561079c57600080fd5b506107e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061176b565b005b3480156107f357600080fd5b50610826600480360381019080803590602001909291908035906020019092919080359060200190929190505050611a69565b005b34801561083457600080fd5b50610881600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600019169060200190929190505050611c84565b005b34801561088f57600080fd5b506108ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080356000191690602001909291908035600019169060200190929190505050611d1c565b005b3480156108f857600080fd5b5061092b600480360381019080803590602001909291908035906020019092919080359060200190929190505050611e44565b604051808215151515815260200191505060405180910390f35b34801561095157600080fd5b506109ab6004803603810190808035906020019092919080359060200190929190803560001916906020019092919080356bffffffffffffffffffffffff1916906020019092919080359060200190929190505050611e93565b005b3480156109b957600080fd5b50610a04600480360381019080803590602001909291908035906020019092919080359060200190929190803560001916906020019092919080359060200190929190505050611ff0565b005b348015610a1257600080fd5b50610a3b600480360381019080803590602001909291908035906020019092919050505061232a565b6040518083605160200280838360005b83811015610a66578082015181840152602081019050610a4b565b5050505090500182605160200280838360005b83811015610a94578082015181840152602081019050610a79565b505050509050019250505060405180910390f35b348015610ab457600080fd5b50610ad360048036038101908080359060200190929190505050612422565b6040518082605160200280838360005b83811015610afe578082015181840152602081019050610ae3565b5050505090500191505060405180910390f35b348015610b1d57600080fd5b50610b3c600480360381019080803590602001909291905050506124e2565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b348015610b9857600080fd5b50610bb76004803603810190808035906020019092919050505061253b565b6040518083605160200280838360005b83811015610be2578082015181840152602081019050610bc7565b5050505090500182605160200280838360005b83811015610c10578082015181840152602081019050610bf5565b505050509050019250505060405180910390f35b348015610c3057600080fd5b50610c396126cb565b6040518082815260200191505060405180910390f35b348015610c5b57600080fd5b50610c646126d1565b6040518082815260200191505060405180910390f35b348015610c8657600080fd5b50610cbd600480360381019080803590602001909291908035906020019092919080356000191690602001909291905050506126d7565b005b348015610ccb57600080fd5b50610cec6004803603810190808035151590602001909291905050506127a9565b005b348015610cfa57600080fd5b50610d1960048036038101908080359060200190929190505050612821565b005b348015610d2757600080fd5b50610d5a600480360381019080803590602001909291908035906020019092919080359060200190929190505050612903565b6040518082815260200191505060405180910390f35b348015610d7c57600080fd5b50610d9f6004803603810190808035600019169060200190929190505050612945565b005b348015610dad57600080fd5b50610dcc60048036038101908080359060200190929190505050612a6c565b60405180826000191660001916815260200191505060405180910390f35b348015610df657600080fd5b50610e196004803603810190808035600019169060200190929190505050612a8f565b005b348015610e2757600080fd5b50610e30612af9565b6040518082815260200191505060405180910390f35b348015610e5257600080fd5b50610e73600480360381019080803515159060200190929190505050612afe565b005b348015610e8157600080fd5b50610ea060048036038101908080359060200190929190505050612b77565b005b348015610eae57600080fd5b50610eb7612c59565b604051808215151515815260200191505060405180910390f35b348015610edd57600080fd5b50610f12600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c6b565b6040518085600019166000191681526020018481526020018381526020018215151515815260200194505050505060405180910390f35b348015610f5557600080fd5b50610f7460048036038101908080359060200190929190505050612d99565b005b348015610f8257600080fd5b50610f8b612e49565b60405180826000191660001916815260200191505060405180910390f35b348015610fb557600080fd5b50610fe8600480360381019080803590602001909291908035906020019092919080359060200190929190505050612e4f565b604051808215151515815260200191505060405180910390f35b34801561100e57600080fd5b506110316004803603810190808035600019169060200190929190505050612e9e565b005b34801561103f57600080fd5b506110626004803603810190808035600019169060200190929190505050612f08565b005b34801561107057600080fd5b5061109d600480360381019080803590602001909291908035600019169060200190929190505050613004565b005b3480156110ab57600080fd5b506110de600480360381019080803590602001909291908035906020019092919080359060200190929190505050613080565b005b3480156110ec57600080fd5b506110f56132cf565b6040518082815260200191505060405180910390f35b6000600280549050905090565b600060056000836000191660001916815260200190815260200160002060009054906101000a900460ff169050919050565b6000600f8260ff8110151561115b57fe5b01549050919050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c057600080fd5b6003828154811015156111cf57fe5b906000526020600020906002020160010160009054906101000a900460ff1615156111f957600080fd5b600161010e60008481526020019081526020016000206000838152602001908152602001600020600082825401925050819055505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128d57600080fd5b600280549050811015156112a057600080fd5b60016060604051908101604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160008152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050505050565b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60008061010f600086815260200190815260200160002060008581526020019081526020016000206000846000191660001916815260200190815260200160002060000160009054906101000a90046c0100000000000000000000000002915061010f6000868152602001908152602001600020600085815260200190815260200160002060008460001916600019168152602001908152602001600020600101549050935093915050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600b6000838152602001908152602001600020549050919050565b600061010e6000848152602001908152602001600020600083815260200190815260200160002054905092915050565b6000600180549050905090565b600080600e60008581526020019081526020016000206000848152602001908152602001600020600001549150600e600085815260200190815260200160002060008481526020019081526020016000206001015490509250929050565b600a5481565b6001600f8260ff8110151561155e57fe5b016000828254019250508190555050565b600060019054906101000a900460ff1681565b60038181548110151561159157fe5b90600052602060002090600202016000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16905083565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561163157600080fd5b6006548110151561164157600080fd5b60038181548110151561165057fe5b906000526020600020906002020160010160009054906101000a900460ff1615151561167b57600080fd5b600060038281548110151561168c57fe5b906000526020600020906002020160010160016101000a81548160ff02191690831515021790555050565b6000600380549050905090565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172057600080fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117c757600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615151561182357600080fd5b605160018381548110151561183457fe5b90600052602060002090600302016002015410151561185257600080fd5b60518110151561186157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600d6000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156118e057600080fd5b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411151561193157600080fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff021916908315150217905550600180838154811015156119e357fe5b90600052602060002090600302016002016000828254019250508190555082600d6000848152602001908152602001600020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600384815481101515611a7a57fe5b906000526020600020906002020160010160009054906101000a900460ff161515611aa457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16600184815481101515611aca57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611b1e57600080fd5b61011260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff16151515611b6e57600080fd5b6000600102600019166101116000868152602001908152602001600020600085815260200190815260200160002060008481526020019081526020016000206000015460001916141515611c7e576101116000858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000206001015490506001600e6000868152602001908152602001600020600083815260200190815260200160002060010160008282540192505081905550600161011260008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50505050565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cbe57600080fd5b80600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208160001916905550505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d7857600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001816000191690555082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600160056000836000191660001916815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b600061011260008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b60006c01000000000000000000000000026bffffffffffffffffffffffff191661010f600087815260200190815260200160002060008681526020019081526020016000206000856000191660001916815260200190815260200160002060000160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff1916141515611f2957600080fd5b8161010f600087815260200190815260200160002060008681526020019081526020016000206000856000191660001916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690836c01000000000000000000000000900402179055508061010f6000878152602001908152602001600020600086815260200190815260200160002060008560001916600019168152602001908152602001600020600101819055505050505050565b600060018581548110151561200157fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561206c57600080fd5b60038681548110151561207b57fe5b906000526020600020906002020160010160009054906101000a900460ff161515156120a657600080fd5b6003868154811015156120b557fe5b906000526020600020906002020160010160019054906101000a900460ff161515156120e057600080fd5b600654861015156120f057600080fd5b6051841015156120ff57600080fd5b600060010260001916610111600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600001546000191614151561215257600080fd5b8161010f6000888152602001908152602001600020600087815260200190815260200160002060008560001916600019168152602001908152602001600020600101541415156121a157600080fd5b60006c01000000000000000000000000026bffffffffffffffffffffffff191661010f600088815260200190815260200160002060008781526020019081526020016000206000856000191660001916815260200190815260200160002060000160009054906101000a90046c01000000000000000000000000026bffffffffffffffffffffffff19161415151561223857600080fd5b600090505b60518110156122a15782600019166101116000888152602001908152602001600020600087815260200190815260200160002060008381526020019081526020016000206000015460001916141561229457612322565b808060010191505061223d565b82610111600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600001816000191690555081610111600088815260200190815260200160002060008781526020019081526020016000206000868152602001908152602001600020600101819055505b505050505050565b6123326132d5565b61233a6132f9565b6123426132d5565b61234a6132f9565b60008090505b6051811015612412576101116000888152602001908152602001600020600087815260200190815260200160002060008281526020019081526020016000206000015483826051811015156123a157fe5b602002019060001916908160001916815250506101116000888152602001908152602001600020600087815260200190815260200160002060008281526020019081526020016000206001015482826051811015156123fc57fe5b6020020181815250508080600101915050612350565b8282945094505050509250929050565b61242a61331d565b61243261331d565b60008090505b60518110156124d857600d6000858152602001908152602001600020600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828260518110151561249457fe5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050612438565b8192505050919050565b6001818154811015156124f157fe5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b6125436132f9565b61254b6132d5565b6125536132d5565b61255b6132f9565b60008090505b60518110156126bd5760046000600d6000898152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015483826051811015156125ff57fe5b6020020190600019169081600019168152505060046000600d6000898152602001908152602001600020600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015482826051811015156126a757fe5b6020020181815250508080600101915050612561565b818394509450505050915091565b60065481565b60075481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561273357600080fd5b600060010260001916600e60008581526020019081526020016000206000848152602001908152602001600020600001546000191614151561277457600080fd5b80600e600085815260200190815260200160002060008481526020019081526020016000206000018160001916905550505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561280557600080fd5b806000806101000a81548160ff02191690831515021790555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561287d57600080fd5b6006548110151561288d57600080fd5b60038181548110151561289c57fe5b906000526020600020906002020160010160009054906101000a900460ff161515156128c757600080fd5b60016003828154811015156128d857fe5b906000526020600020906002020160010160016101000a81548160ff02191690831515021790555050565b60006101106000858152602001908152602001600020600084815260200190815260200160002060008381526020019081526020016000205490509392505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129a157600080fd5b60006007541115156129b257600080fd5b600160076000828254039250508190555060036060604051908101604052808360001916815260200160001515815260200160001515815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000019060001916905560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555050505050565b600281815481101515612a7b57fe5b906000526020600020016000915090505481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612aeb57600080fd5b806009816000191690555050565b605181565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b5a57600080fd5b80600060016101000a81548160ff02191690831515021790555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bd357600080fd5b60065481101515612be357600080fd5b600381815481101515612bf257fe5b906000526020600020906002020160010160009054906101000a900460ff16151515612c1d57600080fd5b6001600382815481101515612c2e57fe5b906000526020600020906002020160010160006101000a81548160ff02191690831515021790555050565b6000809054906101000a900460ff1681565b600080600080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549350600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549150600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1690509193509193565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612df557600080fd5b60065481101515612e0557600080fd5b600381815481101515612e1457fe5b906000526020600020906002020160010160009054906101000a900460ff16151515612e3f57600080fd5b8060088190555050565b60095481565b600061011360008581526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612efa57600080fd5b80600a816000191690555050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f6557600080fd5b600060010260001916826000191614151515612f8057600080fd5b600090505b600280549050811015612fcd578160001916600282815481101515612fa657fe5b9060005260206000200154600019161415612fc057613000565b8080600101915050612f85565b60028290806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055505b5050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561306057600080fd5b80600b600084815260200190815260200160002081600019169055505050565b60008060038581548110151561309257fe5b906000526020600020906002020160010160009054906101000a900460ff1615156130bc57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166001858154811015156130e257fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561313657600080fd5b61011360008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060009054906101000a900460ff1615151561318657600080fd5b60006001026000191661011160008781526020019081526020016000206000868152602001908152602001600020600085815260200190815260200160002060000154600019161415156132c85761011160008681526020019081526020016000206000858152602001908152602001600020600084815260200190815260200160002060010154915060018481548110151561321f57fe5b9060005260206000209060030201600101549050600161011060008781526020019081526020016000206000848152602001908152602001600020600083815260200190815260200160002060008282540192505081905550600161011360008781526020019081526020016000206000868152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5050505050565b60085481565b610a2060405190810160405280605190602082028038833980820191505090505090565b610a2060405190810160405280605190602082028038833980820191505090505090565b610a20604051908101604052806051906020820280388339808201915050905050905600a165627a7a72305820f6190039790dbe51abbb76184a670c3a79b72c3145e2fe97e041e8944123e1cd0029';

const BS58_ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

//Standard responses from the server
const ERROR_STRING = "error";
const COMPLETE_STRING = "complete";
const TRUE_STRING = "true";
const FALSE_STRING = "false";

//Algorithm used to encrypt tor requests
const ENCRYPT_ALGORITHM_RSA = {
    name: "RSA-OAEP",
    modulusLength: 1024,
    publicExponent: new Uint8Array([1, 0, 1]),
    extractable: false,
    hash: {
        name: "SHA-256"
    }
};

/******************** Global variables ********************/

//localhost:1985
let using_local_server = isUsingLocalServer();

//Localhost or 127.0.0.1 ? (or neither)
let localhost127 = (window.location.href.startsWith("http://localhost") ? "localhost" : "127.0.0.1");

//It is used to call the methods fromAscii and toAscii
let web3_aux = new Web3();

//To be used in place of the localStorage
let secureStorage = {
    get: function () {
        return ""
    }, set: function () {
    }, remove: function () {
    }, getAllKeys: function () {
        return []
    }
};
setSecureStorage().then(function () {
    if (using_local_server && sessionStorage.getItem("key")){
        setSessionCode()
    }
});

let Buffer = requireBuffer('buffer').Buffer;

//To call the bs58 decodeUnsafe
let BS58_ALPHABET_MAP = {};
let BS58_BASE = 0;
let BS58_LEADER = '';
prepareAlphabetMap();

//Words and name obtained from the file
let file_data = {kantpoll_com_words: "", kantpoll_com_data: ""};

//For internationalization
let locale = "";

//The current campaign with all its data
let current_campaign = {
    id: "",
    ipns: "",
    name: "",
    description: "",
    country: "",
    period: "",
    link: "",
    image: "",
    address: "",
    contract: "",
    regexp: "",
    certificate_authority: "",
    rounds: "",
    onion: "",
    mgz: "",
    no_campaign: true
};

//Retrieving the last campaign
if (secureStorage.get("current_campaign")) {
    current_campaign = JSON.parse(secureStorage.get("current_campaign"))
}

//Wallet to interact with Geth
let wallet = {};
if (sessionStorage.getItem("wallet")) {
    wallet = JSON.parse(sessionStorage.getItem("wallet"));
}

//Wallet to send the pre-vote
let prevoter_wallet = {};
if (sessionStorage.getItem("prevoter_wallet")) {
    prevoter_wallet = JSON.parse(sessionStorage.getItem("prevoter_wallet"));
}

//It is used to connect to the blockchain
let web3 = {};

//A map of maps. ballot_number => candidates_map
let candidates_per_ballot_map = new Map();

//Group categories and parties are independent of ballots
let parties_map = new Map();
let group_categories_map = new Map();

//Categories with their vacant groups
let vacant_groups = {};
//To receive blockchain info
let update_json_groups_handler = 0;

//These variables contain info from the blockchain
let campaign_info_json = (secureStorage.get("campaign_info_json") ?
    JSON.parse(secureStorage.get("campaign_info_json")) : {no_campaign: true});
let mygroup_info_json = (secureStorage.get("mygroup_info_json_" + current_campaign.id) ?
    JSON.parse(secureStorage.get("mygroup_info_json_" + current_campaign.id)) : {no_group: true});

//To which group do the voter belongs?
let mygroup_index = (secureStorage.get("mygroup_index_" + current_campaign.id) ?
    secureStorage.get("mygroup_index_" + current_campaign.id) : MINC);

//To prevent the user from overloading the web worker
let myvote_last_update = 0;

//A function to be called after the "complete" response appears
let call_after_captcha = null;

//With the Orbot
let using_android_app = (typeof Android === 'object');

//Should the voter use a tor2web proxy?
let using_tor_browser = probablyTor();

//It is used to send a request after the voter fills the captcha
let tor_request = "";

//Send requests when some interaction occurs
let last_user_interaction = Date.now();

//After some minutes, update these info
let last_update_campaign = Date.now();
let last_update_mygroup = Date.now();
let last_update_ipfs_info = Date.now();

//The ethereum contract
let the_contract;

//Enode to connect with other peers
let enode_without_ip = "";

//In order to be able to call clearInterval() and then stop providing campaign info
let provide_campaign_info_handler = 0;

//The hidden service that interacts with the Tor network
let my_onion_address = "";

//It processes the vote in the background
let signer;

//Wait until the last created groups are in the blockchain
let last_created_groups_time = 0;

//To avoid storing repeated data in the blockchain
let last_campaign_ipfs_info = "";

//Before insert candidates, check the current ballot in the blockchain
let inserted_ballot = 0;

//Observers with their RSA public keys
let observers_pubkey_map = new Map();

//Campaign, Vote, Results...
let current_page = "";

/******************** Event listeners ********************/

send_captcha_button.addEventListener("click", function () {
    sendTorMessage(captcha_input.value);
});

/**
 * Setting some variables
 */
window.addEventListener("load", loadPage);

/**
 * Check for updates after user interaction
 */
window.addEventListener("click", userInteraction);
window.addEventListener("mousemove", userInteraction);
window.addEventListener("touchmove", userInteraction);

/**
 * It reads the vault file (which contains the mnemonics, ekhash and login provider)
 */
words_file_button.addEventListener("change", loadFile);

/**
 * Vault related listeners */
close_vault_link.addEventListener("click", closeVault);

close_vault_link_mobile.addEventListener("click", closeVault);

modal1_open.addEventListener("click", function () {
    //It is necessary to generate the keys
    let password = kantpoll_com_password1.value;
    kantpoll_com_password1.value = "";
    //For the ekhash
    let user = kantpoll_com_user1.value;

    //Checking if the user login, password and the words were given
    if (!file_data.kantpoll_com_words || !password || !user) {
        toast(klang.no_vault_opened, 3000);
        return
    }

    kantpoll_com_user1.value = "";

    openVault(password, user)
});

modal3_ok.addEventListener("click", function () {
    let password = kantpoll_com_password2.value;
    kantpoll_com_password2.value = "";
    let user = kantpoll_com_user2.value;

    loadPassword(password, user)
});

/**
 * Obtain new chainid from login/campaign provider then insert the campaign into the blockchain
 */
create_campaign_button.addEventListener("click", function () {
    createCampaign(campaign_name_input.value, campaign_description_input.value, image_input.value,
        campaign_external_page_input.value, country_select.value, initial_date_input.value, final_date_input.value,
        maximum_group_size.value, prefix_voters_input.value, suffix_voters_input.value, rounds_select.value)
});

/**
 * It displays the delete vote message
 */
delete_vote_link.addEventListener("click", deleteVotePage);
delete_vote_link_mobile.addEventListener("click", deleteVotePage);

/**
 * It opens the settings page
 */
settings_link_mobile.addEventListener("click", settingsClick);

/**
 * It deletes the last vote sent
 */
delete_vote_button.addEventListener("click", deleteVote);

/**
 * Left menu items
 */
campaign_info_menu_item.addEventListener("click", campaignInfoClick);

candidates_menu_item.addEventListener("click", candidatesClick);

parties_menu_item.addEventListener("click", partiesClick);

groups_menu_item.addEventListener("click", groupsClick);

results_menu_item.addEventListener("click", resultsClick);

statistics_menu_item.addEventListener("click", statisticsClick);

/**
 * The logo listener
 */
logo_container.addEventListener("click", logoClick);

/**
 * The settings icon listener
 */
settings_link.addEventListener("click", settingsClick);

/**
 * Mobile icons listeners
 */
home_mobile_icon.addEventListener("click", logoClick);

campaign_info_mobile_icon.addEventListener("click", campaignInfoClick);

candidates_mobile_icon.addEventListener("click", candidatesClick);

results_mobile_icon.addEventListener("click", resultsClick);

groups_mobile_icon.addEventListener("click", groupsClick);

ads_mobile_icon.addEventListener("click", promoClick);

/**
 * Submiting modal forms in case of enter pressed
 */
kantpoll_com_password1.addEventListener("keypress", function (event) {
    let keyCode = event.keyCode;
    if (keyCode == 13) {
        modal1_open.click();
    }
});

kantpoll_com_password2.addEventListener("keypress", function (event) {
    let keyCode = event.keyCode;
    if (keyCode == 13) {
        modal3_ok.click();
    }
});

/**
 * Adding listeners to the searchbar icon
 */
search_icon.addEventListener("click", function () {
    let s = search.value.trim();
    searchFor(s);
});
search.addEventListener("keypress", function (event) {
    let keyCode = event.keyCode;
    if (keyCode == 13) {
        let s = search.value.trim();
        searchFor(s);
    }
});

/**
 * Cancel_create_campaign_button listener. It cleans the fields
 */
cancel_create_campaign_button.addEventListener("click", clearCreateCampaignFields);

/**
 * Listener to close admin campaign page
 */
close_campaign_admin_button.addEventListener("click", clearAdminCampaign);

/**
 * Adding listener to the insert_candidates_button. It inserts the candidates into blockchain
 */
insert_candidates_button.addEventListener("click", function () {
    insertCandidates(insert_candidates_textarea.value)
});

/**
 * They are stored on IPFS
 */
insert_parties_button.addEventListener("click", function () {
    insertParties(insert_parties_textarea.value)
});

/**
 * They are stored on IPFS
 */
insert_group_categories_button.addEventListener("click", function () {
    insertGroupCategories(insert_group_categories_textarea.value)
});

/**
 * They are stored in the blockchain
 */
insert_voters_button.addEventListener("click", function () {
    populateCampaign(insert_voters_textarea.value)
});

/**
 * Choose groups on behalf of voters
 */
add_voters_to_groups_button.addEventListener("click", function () {
    addVotersToGroups(add_voters_to_groups_textarea.value)
});

/**
 * Adding listener to creating round button. It creates a new votation ballot
 */
create_round_button.addEventListener("click", function () {
    createRound(create_round_id.value)
    updateInfoAfterAWhile()
});

/**
 * It creates a table, with data from the CancellationsStoreN, to be exported to a sheet
 */
show_cancellations_button.addEventListener("click", showCancellations);

/**
 * This listener create a determined number of groups
 */
create_groups_button.addEventListener("click", function () {
    createGroups(how_many_groups.value, groups_chairperson.value, group_categories_select.value);
    clearAdminCampaign()
});

/**
 * This listener is intended to give group administrators the resources needed to send voter's votes
 */
transfer_finney_button.addEventListener("click", function () {
    transferFinney(transfer_finney_amount_value.value, transfer_finney_account_value.value);
    clearAdminCampaign()
});

/**
 * To (dis)allow links on candidates' images
 */
disable_candidate_link_checkbox.addEventListener("change", function () {
    let status = $(this).prop('checked');
    if (status) {
        the_contract.defineDisableCandidateLink(true)
    } else {
        the_contract.defineDisableCandidateLink(false)
    }
});

/**
 * To (dis)allow cancellations
 */
can_cancel_checkbox.addEventListener("change", function () {
    let status = $(this).prop('checked');
    if (status) {
        the_contract.defineCanCancel(true)
    } else {
        the_contract.defineCanCancel(false)
    }
});

/**
 * Listener to close the current ballot
 */
close_round_button.addEventListener("click", function () {
    let current_ballot = the_contract.currentBallot().toNumber();
    the_contract.closeBallot(current_ballot);
    current_ballot_status.innerHTML = klang.round_closed;
    updateInfoAfterAWhile()
});

/**
 * To insert a Tor (.onion) address into the blockchain
 */
add_tor_button.addEventListener("click", addTorAddressIntoBlockchain);

/**
 * To publish, on the IPFS, info about the campaign, candidates, parties, group categories, and results
 */
publish_campaign_button.addEventListener("click", publishCampaign);

/**
 * Only group chairpersons should call these methods
 */
commit_button.addEventListener("click", function(){
    let commited = commitVotes();
    if (commited){
        updateInfoAfterAWhile()
    }
});

send_votes_button.addEventListener("click", function(){
    sendVotes();
    updateInfoAfterAWhile()
});

/**
 * Stop voters from choosing a group
 */
force_stop_button.addEventListener("click", function(){
    stopAccessionToGroups();
    updateInfoAfterAWhile()
});

/**
 * Sending the link to the campaign to the clipboard
 */
copy_link_button.addEventListener("click", function () {
    sleep(400).then(function () {
        share_link_input.select();
        document.execCommand("copy")
    });
    sleep(1200).then(function () {
        $("#modal8").modal("close")
    })
});

/**
 * Show the status of the vault
 */
vault_icon_container.addEventListener("click", function(){
    toast(tooltip_span.innerHTML, 2000)
});

/******************** Functions ********************/

/**
 * It generates the main key, the aux public key and the wallet.
 * It returns the wallet address in order to obtain the certificate
 * @param {string} words
 * @param {string} password
 * @param {string} user
 * @returns {String}
 */
function generateKeys(words, password, user) {
    //Using bitcoinjs-lib to generate a privatekey from the mnemonics and the password
    //This key is used to sign and verify ring signatures
    let seed = ethers.HDNode.mnemonicToSeed(words + ' ' + user + ' ' + password);
    let hdMaster = ethers.HDNode.fromSeed(seed);
    let seed2 = ethers.HDNode.mnemonicToSeed(words + ' ' + keccak224(user) + ' ' + keccak224(password));
    let hdMaster2 = ethers.HDNode.fromSeed(seed2);

    let keys = {};
    keys[0] = hdMaster.derivePath('m/0/0');
    keys[1] = hdMaster.derivePath('m/0/1');
    keys[2] = hdMaster2.derivePath('m/0/0');
    keys[3] = hdMaster2.derivePath('m/0/1');
    keys[4] = hdMaster2.derivePath('m/0/2');
    keys[5] = hdMaster2.derivePath('m/0/3');

    let aux_signingkey = new ethers.SigningKey(keys[0].privateKey);
    let pubkey = aux_signingkey.publicKey.substring(2);
    let address = aux_signingkey.address.substring(2);

    let keyjson = "{\"address\":\"" + address + "\",\"privkey\":\"" + keys[0].privateKey.substring(2) +
        "\",\"pubkey\":\"" + pubkey + "\"}";
    sessionStorage.setItem("key", keyjson);

    //Wallet to interact with Geth
    wallet = new ethers.Wallet(keys[1].privateKey);
    sessionStorage.setItem("wallet", JSON.stringify(wallet));

    //To send pre-votes
    prevoter_wallet = new ethers.Wallet(keys[2].privateKey);
    sessionStorage.setItem("prevoter_wallet", JSON.stringify(prevoter_wallet));

    sessionStorage.setItem("directory_seed", keccak224(keys[3].privateKey));
    sessionStorage.setItem("pwd_seed", keccak224(keys[4].privateKey));
    sessionStorage.setItem("usershash_seed", keccak224(keys[5].privateKey));

    return wallet.address.replace("0x", "")
}

/**
 * Check for updates
 */
function userInteraction() {
    if (last_user_interaction + TIME_TO_NEXT_REQUEST < Date.now()){
        last_user_interaction = Date.now();

        if (current_campaign.ipns && current_campaign.onion){
            if (campaign_info_json.stored || campaign_info_json.no_campaign ||
                (mygroup_info_json.ballots && campaign_info_json.how_many_ballots < mygroup_info_json.ballots.length) ||
                (last_update_campaign + (MINUTES_TO_UPDATE_CAMPAIGN * 60000) < Date.now())){
                updateCampaignInfo();
                last_update_campaign = Date.now()
            }

            if (mygroup_info_json.stored || mygroup_info_json.no_group || !mygroup_info_json.category ||
                (mygroup_info_json.ballots && mygroup_info_json.ballots.length < campaign_info_json.how_many_ballots) ||
                (last_update_mygroup + (MINUTES_TO_UPDATE_MYGROUP * 60000) < Date.now())){
                //MINC == disconnected, MIRE == registered but without group, MINR == not registered
                if (mygroup_index == MINR || mygroup_index == MIRE || mygroup_index == MINC || isNaN(mygroup_index)) {
                    whatIsMyGroupIndex().then(updateMyGroupInfo)
                } else{
                    updateMyGroupInfo()
                }
                last_update_mygroup = Date.now()
            }

            if(!using_local_server && (current_campaign.stored || current_campaign.no_campaign ||
                    (last_update_ipfs_info + (MINUTES_TO_UPDATE_IPFS_INFO * 60000) < Date.now()))){
                updateCurrentCampaignWithOnion(current_campaign.ipns, getOnionAddress(), current_campaign.address, false)
                    .then(function () {
                        loadCandidatesFromLocalStorage();
                        loadGroupCategoriesFromLocalStorage();
                        loadPartiesFromLocalStorage();
                    });
                last_update_ipfs_info = Date.now()
            }

            if (secureStorage.get("waitPreVote")) {
                checkPreVote()
            }
        }
    }
}

/**
 * Starting up the page
 */
function loadPage() {
    let ipns_part = getParameterByName("ipns", null);
    let onion_part = getParameterByName("onion", null);
    let address_part = getParameterByName("address", null);
    let observers_part = getParameterByName("observers", null)
    let mode = getParameterByName("mode", null);

    if (getParameterByName("observers", null)) {
        secureStorage.set("observers_onions", observers_part)
    }

    languageRelatedSettings();

    //Hide some HTML elements if the voter is using the Android app
    if (using_android_app) {
        let user = getParameterByName("user", null);
        let password = getParameterByName("password", null);
        let words = getParameterByName("words", null);
        let data = getParameterByName("data", null);

        if (user && password && words && data && mode && mode.startsWith("openVaultAndroid")) {
            openVaultAndroid(user, password, words, data);
            return
        }

        if (user && password && mode && mode.startsWith("createVaultAndroid")) {
            createVaultAndroid(user, password);
            return
        }
    }

    if (ipns_part && onion_part && address_part) {
        searchFor(window.location.href)
    }

    if (using_local_server) {
        sleep(1000).then(initServer) //Time to receive the adminSessionCode
    }

    showOrHideElements();

    if (mode.startsWith("campaignInfo")){
        campaignInfoClick()
    } else{
        //It opens the initial page
        logoClick()
    }

    //Showing the stored username for the voter to enter the password
    kantpoll_com_user2.value =
        (localStorage.getItem("user") ? localStorage.getItem("user") : "");

    //Cleaning the address bar
    if (window.location.href.indexOf("?") != -1 &&
            window.location.href.split("?")[0].split("/")[3] && !using_android_app) {
        window.history.pushState("", "", "/" + window.location.href.split("?")[0].split("/")[3])
    }

    if (wallet.address && current_campaign.id){
        signer = new Worker('js/signer.js');
        signer.onmessage = function (event) {
            if (current_campaign.id) {
                secureStorage.set("last_signature_" + current_campaign.id + "_" +
                    campaign_info_json.current_ballot, event.data)
            }
        }
    }

    if ('serviceWorker' in navigator && !using_android_app && !using_local_server) {
        navigator.serviceWorker.register('/service-worker.js', {scope: '/'});
    }

    if (window.innerWidth <= 992) {
        document.body.addEventListener('swl', slidePageToLeft, false);
        document.body.addEventListener('swr', slidePageToRight, false);
    }
}

/**
 * If using a mobile device, change pages with a finger swap
 */
function slidePageToRight(){
    switch (current_page) {
        case "start":
            break;
        case klang.campaign_info:
            logoClick();
            break;
        case klang.candidates:
            campaignInfoClick();
            break;
        case klang.results:
            candidatesClick();
            break;
        case klang.groups:
            resultsClick();
            break;
        case klang.promo:
            groupsClick();
            break;
        default:
            logoClick()
    }
}

/**
 * If using a mobile device, change pages with a finger swap
 */
function slidePageToLeft(){
    switch (current_page) {
        case "start":
            campaignInfoClick();
            break;
        case klang.campaign_info:
            candidatesClick();
            break;
        case klang.candidates:
            resultsClick();
            break;
        case klang.results:
            groupsClick();
            break;
        case klang.groups:
            promoClick();
            break;
        case klang.promo:
            break;
        default:
            logoClick()
    }
}

/**
 * Depending on if the user is using a local server, android app, etc
 */
function showOrHideElements(){
    if (!using_local_server){
        local_li1.style.display = "none";
        local_li2.style.display = "none";
        create_campaign_li.style.display = "none";
    }

    if (using_android_app){
        menu_vault_li_mobile.style.display = "none";
        open_vault_li_mobile.style.display = "none";
        close_vault_li_mobile.style.display = "none";
        last_divider_mobile.style.display = "none";
    }

    let mode = getParameterByName("mode", null);
    if (!mode || (!mode.startsWith("openVaultAndroid") && !mode.startsWith("createVaultAndroid") &&
        !mode.startsWith("start"))){
        
        mobile_div.style.visibility = "visible";
        slide_out1.style.visibility = "visible";
        slide_out2.style.visibility = "visible";
        nav_bar.style.visibility = "visible";
        page_footer.style.visibility = "visible";
    }

    //Placing the adequate tooltips
    checkKey();
    //On the top-left of the page
    displayUserChip();
}

/**
 * It informs the user that he or she should use the Tor browser
 */
function checkTorBrowser() {
    if (!using_android_app && !using_local_server && !using_tor_browser && !sessionStorage.getItem("user_alerted")){
        $("#modal11").modal("open");
        sessionStorage.setItem("user_alerted", "true")
    }
}

/**
 * Displaying user's id and type of identification (phone, e-mail or document)
 */
function displayUserChip() {
    if (localStorage.getItem("user")) {
        let user = (localStorage.getItem("user") ? localStorage.getItem("user") : "");
        kantpoll_com_side_nav_user.innerHTML = (user.length < 20 ? user : user.substring(0, 17) + "..");

        if (user.indexOf('@') > 0 && user.indexOf('.') > 0) {
            user_icon.innerHTML = "email"
        } else if ((user.match(/-/g) || []).length == 1 && /^\d+$/.test(user.replace(/-/g, ""))) {
            user_icon.innerHTML = "phone_android"
        } else {
            user_icon.innerHTML = "credit_card"
        }
        user_chip.style = "";
        let user_view_background = user_view_background_url.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
        document.body.style.setProperty("--background-user-img", user_view_background);

        let aElementP1 = $('#user_chip');
        aElementP1.attr('data-tooltip', user);
        aElementP1.tooltip()
    } else {
        kantpoll_com_side_nav_user.innerHTML = "";
        user_chip.style = "display:none;";
        document.body.style.setProperty("--background-user-img", "none")
    }
}

/**
 * It should be called when the page loads
 */
function initServer() {
    //The onion address is necessary for users to communicate with the group chairpersons
    whatIsMyOnionAddress();
    //This information is necessary to connect to other nodes (manually)
    whatIsMyEnode();

    //Initializing the blockchain
    if (current_campaign.id) {
        if (isOwner()) {
            updateCurrentCampaign(current_campaign.ipns).then(function () {
                loadCandidates();
                loadGroupCategories();
                loadParties()
            })
        }

        //Informing the server about the current mgz
        setCampaignContract();
        startCampaignOnServer();
        initBlockchain(function () {
            //Connecting to localhost:8545
            instantiateWeb3();
            waitUntilWeb3IsListening().then(function () {
                //Setting the contract to interact with the blockchain
                openCampaignContract();
                //It initialize the variable mgz, which is used to interact with the Ethereum contract
                initMgzOnServer();

                if (the_contract && !notNullChars(the_contract.getTor(wallet.address.toLowerCase(), 0))) {
                    addTorAddressIntoBlockchain()
                }
                //Start listening Tor messages if the user's Tor address is in the blockchain
                waitUntilTorIsInserted().then(function () {
                    storeCampaignIPFSInfoIntoBlockchain();
                    provide_campaign_info_handler = setInterval(storeCampaignIPFSInfoIntoBlockchain,
                        STORE_CAMPAIGN_INFO_RATE)
                });

                updateVacantGroups();
                update_json_groups_handler = setInterval(updateVacantGroups, UPDATE_JSON_GROUPS_RATE);
            }, false)
        })
    }
}

/**
 * Wait before calling the_contract.getTor()
 * @returns {Promise}
 */
function waitUntilTorIsInserted() {
    return new Promise(resolve => {
        let resolved = false;

        for (let i = 0; i < 60; i++) {
            sleep(i * 1000).then(function () {
                if (!resolved && the_contract && notNullChars(the_contract.getTor(wallet.address.toLowerCase(), 0))) {
                    resolved = true;
                    resolve()
                }
            })
        }
    })
}

/**
 * To replace the old web3.eth.net.isListening(), besides that it unlocks the user's account
 * @returns {Promise}
 */
function waitUntilWeb3IsListening() {
    return new Promise(resolve => {
        let resolved = false;

        for (let i = 2; i < 24; i++) {
            sleep(i * 1000).then(function () {
                if (!resolved && web3 && web3.net && web3.personal && web3.net.listening) {
                    resolved = true;
                    //First, unlock the account (in the case it was not unlocked by runGeth)
                    sleep(1500).then(function () {
                        web3.personal.unlockAccount(wallet.address.toLowerCase(), getPwd(), 10000000) // > 3 months
                    });
                    //Wait a few more seconds
                    sleep(3000).then(resolve)
                }
            })
        }

        sleep(TIME_TRYING_TO_CONNECT_WEB3).then(function () {
            if (!resolved) {
                log("Can't connect to the web3 provider")
            }
        })
    })
}

/**
 * It checks the user's browser language or the chosen language in the system tray
 */
function languageRelatedSettings() {
    if (navigator.language) {
        locale = navigator.language.substring(0, 2).toLowerCase()
    }

    if (locale == 'pt') {
        klang = klang.portuguese;
        kcountries = kcountries.pt;
        document.lang = 'pt'
    } else if (locale == 'es') {
        klang = klang.spanish;
        kcountries = kcountries.es;
    } else if (locale == 'fr') {
        klang = klang.french;
        kcountries = kcountries.fr;
    } else {
        klang = klang.english;
        kcountries = kcountries.en;
    }

    menu_vault_li.innerHTML = klang.vault;
    menu_vault_li_mobile.innerHTML = klang.vault;
    open_vault_link.text = klang.open_vault;
    open_vault_link_mobile.text = klang.open_vault;
    close_vault_link.text = klang.close_vault;
    close_vault_link_mobile.text = klang.close_vault;
    menu_campaign_li.innerHTML = klang.campaign;
    menu_vote_li.innerHTML = klang.menu_vote_li;
    menu_vote_li_mobile.innerHTML = klang.menu_vote_li;
    delete_vote_link.text = klang.delete_vote_link;
    delete_vote_link_mobile.text = klang.delete_vote_link;
    settings_link_mobile.text = klang.settings;
    create_campaign_link.text = klang.create_campaign;
    modal1_title.innerHTML = klang.modal1_title;
    modal1_file.innerHTML = klang.modal1_file;
    modal1_password.innerHTML = klang.password;
    modal1_user.innerHTML = klang.modal1_user;
    modal1_open.text = klang.modal1_open;
    modal3_title.innerHTML = klang.insert_password;
    modal3_user.innerHTML = klang.modal1_user;
    modal3_password.innerHTML = klang.password;
    modal3_ok.text = klang.ok;
    campaign_name_label.innerHTML = klang.campaign_name_label;
    campaign_description_label.innerHTML = klang.campaign_description_label;
    create_campaign_title.innerHTML = klang.create_campaign_title;
    country_label.innerHTML = klang.country_label;
    prefix_voters_label.innerHTML = klang.prefix_voters_label;
    suffix_voters_label.innerHTML = klang.suffix_voters_label;
    rounds_selected_option.innerHTML = klang.votation_rounds_selected_option;
    maximum_group_size_label.innerHTML = klang.maximum_group_size;
    create_campaign_button.innerHTML = klang.create_campaign_button;
    cancel_create_campaign_button.innerHTML = klang.cancel_button;
    image_label.innerHTML = klang.image_label;
    campaign_external_page_label.innerHTML = klang.campaign_external_page_label;
    initial_date_label.innerHTML = klang.initial_date_label;
    final_date_label.innerHTML = klang.final_date_label;
    create_campaign_basic_info.innerHTML = klang.create_campaign_basic_info;
    create_campaign_votation_info.innerHTML = klang.create_campaign_votation_info;
    campaign_admin_title.innerHTML = klang.campaign_admin_title;
    campaign_admin_candidates.innerHTML = klang.campaign_admin_candidates;
    campaign_admin_parties.innerHTML = klang.campaign_admin_parties;
    campaign_admin_ballots.innerHTML = klang.campaign_admin_ballots;
    campaign_admin_groups.innerHTML = klang.campaign_admin_groups;
    campaign_admin_chairpersons.innerHTML = klang.campaign_admin_chairpersons;
    close_campaign_admin_button.innerHTML = klang.close_campaign_admin_button;
    insert_candidates_title.innerHTML = klang.insert_candidates_title;
    insert_candidates_label.innerHTML = klang.insert_candidates_label;
    insert_candidates_button.innerHTML = klang.insert_candidates_button;
    insert_parties_title.innerHTML = klang.insert_parties_title;
    insert_parties_label.innerHTML = klang.insert_parties_label;
    insert_parties_button.innerHTML = klang.insert_parties_button;
    insert_group_categories_title.innerHTML = klang.insert_group_categories_title;
    insert_voters_title.innerHTML = klang.insert_voters_title;
    add_voters_to_groups_title.innerHTML = klang.add_voters_to_groups_title;
    insert_group_categories_label.innerHTML = klang.insert_group_categories_label;
    insert_voters_label.innerHTML = klang.insert_voters_label;
    add_voters_to_groups_label.innerHTML = klang.add_voters_to_groups_label;
    insert_group_categories_button.innerHTML = klang.insert_group_categories_button;
    insert_voters_button.innerHTML = klang.insert_voters_button;
    add_voters_to_groups_button.innerHTML = klang.add_voters_to_groups_button;
    create_round_title.innerHTML = klang.create_round_title;
    create_round_id_label.innerHTML = klang.create_round_id_label;
    create_round_button.innerHTML = klang.create_round_button;
    current_ballot_label.innerHTML = klang.current_ballot_label;
    cancellations_label.innerHTML = klang.canceled_votes;
    show_cancellations_button.innerHTML = klang.show_cancellations_button;
    close_round_button.innerHTML = klang.close_round_button;
    group_categories_select_label.innerHTML = klang.group_categories_select_label;
    create_groups_label.innerHTML = klang.create_groups_label;
    how_many_groups_label.innerHTML = klang.how_many_groups_label;
    create_groups_button.innerHTML = klang.create_groups_button;
    groups_chairperson_label.innerHTML = klang.groups_chairperson_label;
    inform_address_label.innerHTML = klang.inform_address_label;
    your_tor_title.innerHTML = klang.your_tor_title;
    your_enode_title.innerHTML = klang.your_enode;
    add_tor_label.innerHTML = klang.add_tor_label;
    add_tor_button.innerHTML = klang.add_tor_button;
    publish_campaign_label.innerHTML = klang.publish_campaign;
    publish_campaign_button.innerHTML = klang.publish_button;
    commit_label.innerHTML = klang.commit_label;
    commit_button.innerHTML = klang.commit_button;
    send_votes_label.innerHTML = klang.send_votes_label;
    send_votes_button.innerHTML = klang.send_votes_button;
    tranfer_finney_label.innerHTML = klang.tranfer_finney_label;
    transfer_finney_account_label.innerHTML = klang.transfer_finney_account_label;
    transfer_finney_amount_label.innerHTML = klang.transfer_finney_amount_label;
    transfer_finney_button.innerHTML = klang.transfer_finney_button;
    vote_deletion_title.innerHTML = klang.vote_deletion_title;
    close_delete_vote_button.innerHTML = klang.close_delete_vote_button;
    delete_vote_button.innerHTML = klang.delete_vote_button;
    stop_group_membership_label.innerHTML = klang.stop_group_membership;
    force_stop_button.innerHTML = klang.force_stop_button;
    disable_candidate_link_label.innerHTML = klang.disable_candidate_link_label;
    send_captcha_button.innerHTML = klang.modal10_send;
    copy_link_button.innerHTML = klang.copy;
    can_cancel_label.innerHTML = klang.can_cancel;
    send_captcha_title.innerHTML = klang.captcha_title;
    modal11_title.innerHTML = klang.modal11_title;
    modal11_text1.innerHTML = klang.modal11_text1;
    modal11_text2.innerHTML = klang.modal11_text2;
    modal11_text3.innerHTML = "";// klang.modal11_text3;

    //Countries names
    if (using_local_server){
        AF_option.innerHTML = kcountries.AF;
        AX_option.innerHTML = kcountries.AX;
        AL_option.innerHTML = kcountries.AL;
        DZ_option.innerHTML = kcountries.DZ;
        AS_option.innerHTML = kcountries.AS;
        AD_option.innerHTML = kcountries.AD;
        AO_option.innerHTML = kcountries.AO;
        AI_option.innerHTML = kcountries.AI;
        AQ_option.innerHTML = kcountries.AQ;
        AG_option.innerHTML = kcountries.AG;
        AR_option.innerHTML = kcountries.AR;
        AM_option.innerHTML = kcountries.AM;
        AW_option.innerHTML = kcountries.AW;
        AU_option.innerHTML = kcountries.AU;
        AT_option.innerHTML = kcountries.AT;
        AZ_option.innerHTML = kcountries.AZ;
        BS_option.innerHTML = kcountries.BS;
        BH_option.innerHTML = kcountries.BH;
        BD_option.innerHTML = kcountries.BD;
        BB_option.innerHTML = kcountries.BB;
        BY_option.innerHTML = kcountries.BY;
        BE_option.innerHTML = kcountries.BE;
        BZ_option.innerHTML = kcountries.BZ;
        BJ_option.innerHTML = kcountries.BJ;
        BM_option.innerHTML = kcountries.BM;
        BT_option.innerHTML = kcountries.BT;
        BO_option.innerHTML = kcountries.BO;
        BQ_option.innerHTML = kcountries.BQ;
        BA_option.innerHTML = kcountries.BA;
        BW_option.innerHTML = kcountries.BW;
        BV_option.innerHTML = kcountries.BV;
        BR_option.innerHTML = kcountries.BR;
        IO_option.innerHTML = kcountries.IO;
        BN_option.innerHTML = kcountries.BN;
        BG_option.innerHTML = kcountries.BG;
        BF_option.innerHTML = kcountries.BF;
        BI_option.innerHTML = kcountries.BI;
        KH_option.innerHTML = kcountries.KH;
        CM_option.innerHTML = kcountries.CM;
        CA_option.innerHTML = kcountries.CA;
        CV_option.innerHTML = kcountries.CV;
        KY_option.innerHTML = kcountries.KY;
        CF_option.innerHTML = kcountries.CF;
        TD_option.innerHTML = kcountries.TD;
        CL_option.innerHTML = kcountries.CL;
        CN_option.innerHTML = kcountries.CN;
        CX_option.innerHTML = kcountries.CX;
        CC_option.innerHTML = kcountries.CC;
        CO_option.innerHTML = kcountries.CO;
        KM_option.innerHTML = kcountries.KM;
        CG_option.innerHTML = kcountries.CG;
        CD_option.innerHTML = kcountries.CD;
        CK_option.innerHTML = kcountries.CK;
        CR_option.innerHTML = kcountries.CR;
        CI_option.innerHTML = kcountries.CI;
        HR_option.innerHTML = kcountries.HR;
        CU_option.innerHTML = kcountries.CU;
        CW_option.innerHTML = kcountries.CW;
        CY_option.innerHTML = kcountries.CY;
        CZ_option.innerHTML = kcountries.CZ;
        DK_option.innerHTML = kcountries.DK;
        DJ_option.innerHTML = kcountries.DJ;
        DM_option.innerHTML = kcountries.DM;
        DO_option.innerHTML = kcountries.DO;
        EC_option.innerHTML = kcountries.EC;
        EG_option.innerHTML = kcountries.EG;
        SV_option.innerHTML = kcountries.SV;
        GQ_option.innerHTML = kcountries.GQ;
        ER_option.innerHTML = kcountries.ER;
        EE_option.innerHTML = kcountries.EE;
        ET_option.innerHTML = kcountries.ET;
        FK_option.innerHTML = kcountries.FK;
        FO_option.innerHTML = kcountries.FO;
        FJ_option.innerHTML = kcountries.FJ;
        FI_option.innerHTML = kcountries.FI;
        FR_option.innerHTML = kcountries.FR;
        GF_option.innerHTML = kcountries.GF;
        PF_option.innerHTML = kcountries.PF;
        TF_option.innerHTML = kcountries.TF;
        GA_option.innerHTML = kcountries.GA;
        GM_option.innerHTML = kcountries.GM;
        GE_option.innerHTML = kcountries.GE;
        DE_option.innerHTML = kcountries.DE;
        GH_option.innerHTML = kcountries.GH;
        GI_option.innerHTML = kcountries.GI;
        GR_option.innerHTML = kcountries.GR;
        GL_option.innerHTML = kcountries.GL;
        GD_option.innerHTML = kcountries.GD;
        GP_option.innerHTML = kcountries.GP;
        GU_option.innerHTML = kcountries.GU;
        GT_option.innerHTML = kcountries.GT;
        GG_option.innerHTML = kcountries.GG;
        GN_option.innerHTML = kcountries.GN;
        GW_option.innerHTML = kcountries.GW;
        GY_option.innerHTML = kcountries.GY;
        HT_option.innerHTML = kcountries.HT;
        HM_option.innerHTML = kcountries.HM;
        VA_option.innerHTML = kcountries.VA;
        HN_option.innerHTML = kcountries.HN;
        HK_option.innerHTML = kcountries.HK;
        HU_option.innerHTML = kcountries.HU;
        IS_option.innerHTML = kcountries.IS;
        IN_option.innerHTML = kcountries.IN;
        ID_option.innerHTML = kcountries.ID;
        IR_option.innerHTML = kcountries.IR;
        IQ_option.innerHTML = kcountries.IQ;
        IE_option.innerHTML = kcountries.IE;
        IM_option.innerHTML = kcountries.IM;
        IL_option.innerHTML = kcountries.IL;
        IT_option.innerHTML = kcountries.IT;
        JM_option.innerHTML = kcountries.JM;
        JP_option.innerHTML = kcountries.JP;
        JE_option.innerHTML = kcountries.JE;
        JO_option.innerHTML = kcountries.JO;
        KZ_option.innerHTML = kcountries.KZ;
        KE_option.innerHTML = kcountries.KE;
        KI_option.innerHTML = kcountries.KI;
        KP_option.innerHTML = kcountries.KP;
        KR_option.innerHTML = kcountries.KR;
        KW_option.innerHTML = kcountries.KW;
        KG_option.innerHTML = kcountries.KG;
        LA_option.innerHTML = kcountries.LA;
        LV_option.innerHTML = kcountries.LV;
        LB_option.innerHTML = kcountries.LB;
        LS_option.innerHTML = kcountries.LS;
        LR_option.innerHTML = kcountries.LR;
        LY_option.innerHTML = kcountries.LY;
        LI_option.innerHTML = kcountries.LI;
        LT_option.innerHTML = kcountries.LT;
        LU_option.innerHTML = kcountries.LU;
        MO_option.innerHTML = kcountries.MO;
        MK_option.innerHTML = kcountries.MK;
        MG_option.innerHTML = kcountries.MG;
        MW_option.innerHTML = kcountries.MW;
        MY_option.innerHTML = kcountries.MY;
        MV_option.innerHTML = kcountries.MV;
        ML_option.innerHTML = kcountries.ML;
        MT_option.innerHTML = kcountries.MT;
        MH_option.innerHTML = kcountries.MH;
        MQ_option.innerHTML = kcountries.MQ;
        MR_option.innerHTML = kcountries.MR;
        MU_option.innerHTML = kcountries.MU;
        YT_option.innerHTML = kcountries.YT;
        MX_option.innerHTML = kcountries.MX;
        FM_option.innerHTML = kcountries.FM;
        MD_option.innerHTML = kcountries.MD;
        MC_option.innerHTML = kcountries.MC;
        MN_option.innerHTML = kcountries.MN;
        ME_option.innerHTML = kcountries.ME;
        MS_option.innerHTML = kcountries.MS;
        MA_option.innerHTML = kcountries.MA;
        MZ_option.innerHTML = kcountries.MZ;
        MM_option.innerHTML = kcountries.MM;
        NA_option.innerHTML = kcountries.NA;
        NR_option.innerHTML = kcountries.NR;
        NP_option.innerHTML = kcountries.NP;
        NL_option.innerHTML = kcountries.NL;
        NC_option.innerHTML = kcountries.NC;
        NZ_option.innerHTML = kcountries.NZ;
        NI_option.innerHTML = kcountries.NI;
        NE_option.innerHTML = kcountries.NE;
        NG_option.innerHTML = kcountries.NG;
        NU_option.innerHTML = kcountries.NU;
        NF_option.innerHTML = kcountries.NF;
        MP_option.innerHTML = kcountries.MP;
        NO_option.innerHTML = kcountries.NO;
        OM_option.innerHTML = kcountries.OM;
        PK_option.innerHTML = kcountries.PK;
        PW_option.innerHTML = kcountries.PW;
        PS_option.innerHTML = kcountries.PS;
        PA_option.innerHTML = kcountries.PA;
        PG_option.innerHTML = kcountries.PG;
        PY_option.innerHTML = kcountries.PY;
        PE_option.innerHTML = kcountries.PE;
        PH_option.innerHTML = kcountries.PH;
        PN_option.innerHTML = kcountries.PN;
        PL_option.innerHTML = kcountries.PL;
        PT_option.innerHTML = kcountries.PT;
        PR_option.innerHTML = kcountries.PR;
        QA_option.innerHTML = kcountries.QA;
        RE_option.innerHTML = kcountries.RE;
        RO_option.innerHTML = kcountries.RO;
        RU_option.innerHTML = kcountries.RU;
        RW_option.innerHTML = kcountries.RW;
        BL_option.innerHTML = kcountries.BL;
        SH_option.innerHTML = kcountries.SH;
        KN_option.innerHTML = kcountries.KN;
        LC_option.innerHTML = kcountries.LC;
        MF_option.innerHTML = kcountries.MF;
        PM_option.innerHTML = kcountries.PM;
        VC_option.innerHTML = kcountries.VC;
        WS_option.innerHTML = kcountries.WS;
        SM_option.innerHTML = kcountries.SM;
        ST_option.innerHTML = kcountries.ST;
        SA_option.innerHTML = kcountries.SA;
        SN_option.innerHTML = kcountries.SN;
        RS_option.innerHTML = kcountries.RS;
        SC_option.innerHTML = kcountries.SC;
        SL_option.innerHTML = kcountries.SL;
        SG_option.innerHTML = kcountries.SG;
        SX_option.innerHTML = kcountries.SX;
        SK_option.innerHTML = kcountries.SK;
        SI_option.innerHTML = kcountries.SI;
        SB_option.innerHTML = kcountries.SB;
        SO_option.innerHTML = kcountries.SO;
        ZA_option.innerHTML = kcountries.ZA;
        GS_option.innerHTML = kcountries.GS;
        SS_option.innerHTML = kcountries.SS;
        ES_option.innerHTML = kcountries.ES;
        LK_option.innerHTML = kcountries.LK;
        SD_option.innerHTML = kcountries.SD;
        SR_option.innerHTML = kcountries.SR;
        SJ_option.innerHTML = kcountries.SJ;
        SZ_option.innerHTML = kcountries.SZ;
        SE_option.innerHTML = kcountries.SE;
        CH_option.innerHTML = kcountries.CH;
        SY_option.innerHTML = kcountries.SY;
        TW_option.innerHTML = kcountries.TW;
        TJ_option.innerHTML = kcountries.TJ;
        TZ_option.innerHTML = kcountries.TZ;
        TH_option.innerHTML = kcountries.TH;
        TL_option.innerHTML = kcountries.TL;
        TG_option.innerHTML = kcountries.TG;
        TK_option.innerHTML = kcountries.TK;
        TO_option.innerHTML = kcountries.TO;
        TT_option.innerHTML = kcountries.TT;
        TN_option.innerHTML = kcountries.TN;
        TR_option.innerHTML = kcountries.TR;
        TM_option.innerHTML = kcountries.TM;
        TC_option.innerHTML = kcountries.TC;
        TV_option.innerHTML = kcountries.TV;
        UG_option.innerHTML = kcountries.UG;
        UA_option.innerHTML = kcountries.UA;
        AE_option.innerHTML = kcountries.AE;
        GB_option.innerHTML = kcountries.GB;
        US_option.innerHTML = kcountries.US;
        UM_option.innerHTML = kcountries.UM;
        UY_option.innerHTML = kcountries.UY;
        UZ_option.innerHTML = kcountries.UZ;
        VU_option.innerHTML = kcountries.VU;
        VE_option.innerHTML = kcountries.VE;
        VN_option.innerHTML = kcountries.VN;
        VG_option.innerHTML = kcountries.VG;
        VI_option.innerHTML = kcountries.VI;
        WF_option.innerHTML = kcountries.WF;
        EH_option.innerHTML = kcountries.EH;
        YE_option.innerHTML = kcountries.YE;
        ZM_option.innerHTML = kcountries.ZM;
        ZW_option.innerHTML = kcountries.ZW;
    }

    //Datepicker translations
    $('.datepicker').pickadate({
        selectMonths: true,
        //Displaying only 3 years
        selectYears: 3,
        today: klang.today,
        clear: klang.clear,
        close: klang.ok,
        format: "dd/mm/yyyy",
        closeOnSelect: false
    });

    let aElementP0 = $('#search_icon');
    if (!using_android_app) {
        aElementP0.attr('data-tooltip', klang.search_campaign);
        aElementP0.tooltip()
    }

    //Setting the data-tooltip of the password input
    let aElementP1 = $('#password_div1');
    aElementP1.attr('data-tooltip', klang.min_chars);
    aElementP1.tooltip();

    //Setting the data-tooltip of the user input
    let aElementP2 = $('#user_div1');
    aElementP2.attr('data-tooltip', klang.hyphen);
    aElementP2.tooltip();

    //Setting the data-tooltip of the close round button
    let aElementP4 = $('#close_round_button');
    aElementP4.attr('data-tooltip', klang.close_round_button_tooltip);
    aElementP4.tooltip();

    //Sidenav menu
    campaign_info_menu_item.innerHTML = klang.campaign_info;
    candidates_menu_item.innerHTML = klang.candidates;
    parties_menu_item.innerHTML = klang.parties;
    groups_menu_item.innerHTML = klang.groups;
    results_menu_item.innerHTML = klang.results;
    statistics_menu_item.innerHTML = klang.statistics;

    let aElement = $('#search_icon');
    if (!using_android_app) {
        //Setting the data-tooltip initial value
        aElement.attr('data-tooltip', klang.search_campaign);
        aElement.tooltip()
    } else {
        aElement.removeClass("tooltipped")
    }

    if (!current_campaign.id){
        search.placeholder = klang.paste_link_here
    }
}

/**
 * The RSA keys are used to decrypt messages received via tor
 * @param {function} callback
 */
function setRSAKeys(callback) {
    generateRSAKeys().then(function (keys) {
        exportRSAPemKeys(keys).then(function (result) {
            secureStorage.set("rsa_pubkey", result.publicKey.replace(/\r\n/g, THE_AND));
            secureStorage.set("rsa_privkey", result.privateKey.replace(/\r\n/g, THE_AND));

            if (callback) {
                callback()
            }
        })
    })
}

/**
 * Functions called by menu item and mobile icon listeners
 */
function campaignInfoClick() {
    printIconGreen("#campaign_info_mobile_icon");
    changeTitle(klang.campaign_info);
    openCampaignInfoPage()
}

function candidatesClick() {
    printIconGreen("#candidates_mobile_icon");
    changeTitle(klang.candidates);
    newCandidatesPage()
}

function resultsClick() {
    printIconGreen("#results_mobile_icon");
    changeTitle(klang.results);
    newResultsPage()
}

function groupsClick() {
    printIconGreen("#groups_mobile_icon");
    changeTitle(klang.groups);
    newGroupCategoriesPage()
}

function promoClick() {
    printIconGreen("#ads_mobile_icon");
    changeTitle(klang.promo);
    newPromoPage()
}

function partiesClick() {
    changeTitle(klang.parties);
    newPartiesPage()
}

function statisticsClick() {
    changeTitle(klang.statistics);
    newStatisticsPage()
}

function settingsClick() {
    printIconGreen("");
    changeTitle(klang.settings);
    newSettingsPage()
}

function changeTitle(title) {
    if (window.innerWidth > 992) {
        header_title.innerHTML = ""
    } else {
        header_title.innerHTML = title;
    }
    current_page = title;
    content_page.innerHTML = "";
    header_info.innerHTML = "";
    document.title = klang.title
}

/**
 * Opens the start page when using the local server
 */
function logoClick() {
    current_page = "start";
    printIconGreen("#home_mobile_icon");
    newStartPage()
}

/**
 * Access filestorage to get candidates' name, photo, and party
 */
function loadCandidates() {
    if (!isEmpty(campaign_info_json)) {
        let number_ballots = campaign_info_json.how_many_ballots;
        for (let j = 0; j < number_ballots; j++) {
            let request = new XMLHttpRequest();
            request.addEventListener("load", function () {
                if (this.responseText.startsWith("{")) {
                    let aux_json_candidates = JSON.parse(this.responseText);
                    let json_candidates = aux_json_candidates.data;
                    let ballot_number = aux_json_candidates.ballot;

                    if (isOwner() && secureStorage.get("candidates_ipfs_page_" + ballot_number)) {
                        let stored_json_candidates = JSON.parse(secureStorage.get("candidates_ipfs_page_" + ballot_number));
                        if (Object.keys(stored_json_candidates).length > Object.keys(json_candidates).length) {
                            return
                        }
                    }

                    secureStorage.set("candidates_ipfs_page_" + ballot_number, this.responseText);

                    let candidatesMap = new Map();
                    let keys = Object.keys(json_candidates);
                    let values = Object.values(json_candidates);
                    if (campaign_info_json.ballots[ballot_number] && campaign_info_json.ballots[ballot_number].candidates) {
                        for (let i = 0; i < keys.length; i++) {
                            if (!campaign_info_json.ballots[ballot_number].candidates[i]) {
                                continue
                            }
                            values[i].votes = campaign_info_json.ballots[ballot_number].candidates[i].count;
                            candidatesMap.set(keys[i], values[i])
                        }
                    }
                    candidates_per_ballot_map.set(ballot_number, candidatesMap)
                }
            });

            sendRequest(request, "http://" + localhost127 + ":1985/queryGetProfile?file=" + current_campaign.id + "/candidates_ballot" + j)
        }
    }
}

/**
 * Access the localStorage to get candidates' name, photo, and party
 */
function loadCandidatesFromLocalStorage() {
    if (campaign_info_json.no_campaign || !secureStorage.get("candidates_ipfs_page_" + campaign_info_json.current_ballot)) {
        return
    }

    let number_ballots = campaign_info_json.how_many_ballots;
    for (let j = 0; j < number_ballots; j++) {
        if (!secureStorage.get("candidates_ipfs_page_" + j)) {
            continue
        }
        let aux_json_candidates = JSON.parse(secureStorage.get("candidates_ipfs_page_" + j));
        let json_candidates = aux_json_candidates.data;
        let ballot_number = '' + j;
        let candidatesMap = new Map();
        let keys = Object.keys(json_candidates);
        let values = Object.values(json_candidates);
        if (campaign_info_json.ballots[ballot_number] && campaign_info_json.ballots[ballot_number].candidates) {
            for (let i = 0; i < keys.length; i++) {
                if (!campaign_info_json.ballots[ballot_number].candidates[i]) {
                    continue
                }
                values[i].votes = campaign_info_json.ballots[ballot_number].candidates[i].count;
                candidatesMap.set(keys[i], values[i])
            }
        }
        candidates_per_ballot_map.set(ballot_number, candidatesMap)
    }
}

/**
 * Access filestorage to get group categories and descriptions
 */
function loadGroupCategories() {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText.startsWith("{")) {
            let json_group_categories = JSON.parse(this.responseText);

            if (isOwner() && secureStorage.get("group_categories_ipfs_page")) {
                let stored_json_group_categories = JSON.parse(secureStorage.get("group_categories_ipfs_page"));
                if (Object.keys(stored_json_group_categories).length > Object.keys(json_group_categories).length) {
                    return
                }
            }

            secureStorage.set("group_categories_ipfs_page", this.responseText);

            let aux_group_categoriesMap = new Map();
            let keys = Object.keys(json_group_categories);
            let values = Object.values(json_group_categories);
            for (let i = 0; i < keys.length; i++) {
                aux_group_categoriesMap.set(keys[i], values[i])
            }
            group_categories_map = aux_group_categoriesMap
        }
    });

    sendRequest(request, "http://" + localhost127 + ":1985/queryGetProfile?file=" + current_campaign.id + "/group_categories")
}

/**
 * Access the localStorage to get group categories and descriptions
 */
function loadGroupCategoriesFromLocalStorage() {
    if (!secureStorage.get("group_categories_ipfs_page")) {
        return
    }
    let json_group_categories = JSON.parse(secureStorage.get("group_categories_ipfs_page"));
    let aux_group_categoriesMap = new Map();
    let keys = Object.keys(json_group_categories);
    let values = Object.values(json_group_categories);
    for (let i = 0; i < keys.length; i++) {
        aux_group_categoriesMap.set(keys[i], values[i])
    }
    group_categories_map = aux_group_categoriesMap
}

/**
 * Access filestorage to get parties' names, links and photos
 */
function loadParties() {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText.startsWith("{")) {
            let json_parties = JSON.parse(this.responseText);

            if (isOwner() && secureStorage.get("parties_ipfs_page")) {
                let stored_json_parties = JSON.parse(secureStorage.get("parties_ipfs_page"));
                if (Object.keys(stored_json_parties).length > Object.keys(json_parties).length) {
                    return
                }
            }

            secureStorage.set("parties_ipfs_page", this.responseText);

            let aux_partiesMap = new Map();
            let keys = Object.keys(json_parties);
            let values = Object.values(json_parties);
            for (let i = 0; i < keys.length; i++) {
                aux_partiesMap.set(keys[i], values[i])
            }
            parties_map = aux_partiesMap
        }
    });

    sendRequest(request, "http://" + localhost127 + ":1985/queryGetProfile?file=" + current_campaign.id + "/parties")
}

/**
 * Access the localStorage to get parties' names, links and photos
 */
function loadPartiesFromLocalStorage() {
    if (!secureStorage.get("parties_ipfs_page")) {
        return
    }
    let json_parties = JSON.parse(secureStorage.get("parties_ipfs_page"));
    let aux_partiesMap = new Map();
    let keys = Object.keys(json_parties);
    let values = Object.values(json_parties);
    for (let i = 0; i < keys.length; i++) {
        aux_partiesMap.set(keys[i], values[i])
    }
    parties_map = aux_partiesMap
}

/**
 * Loading voting data related to candidates and group categories and providing a way to download it
 */
function newStatisticsPage() {
    if (!sessionStorage.getItem("key")) {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page3);
        return
    }

    if (current_campaign.id) {
        if (!campaign_info_json.no_campaign) {
            if (campaign_info_json.how_many_ballots == 0) {
                content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                    .replace("-->", "").replace("[[text]]", klang.no_candidates_to_show);
                return
            }

            //This statistics page shows data regarding all ballots
            let current_ballot = campaign_info_json.current_ballot;

            if (group_categories_map.size == 0) {
                content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                    .replace("-->", "").replace("[[text]]", klang.no_statistics_to_show);
                return
            }

            let tables = "";
            for (let t = 0; t <= current_ballot; t++) {
                let candidatesMap = candidates_per_ballot_map.get('' + t);
                let ballot = campaign_info_json.ballots[t];
                let number_candidates = ballot.how_many_candidates;

                let table = "<table id='data_table" + t + "'>";

                //Header
                table += "<tr>";
                table += "<td>" + klang.name_groups + "</td>";
                let keys = group_categories_map.keys();
                let key = {};
                do {
                    key = keys.next();

                    if (!key.done) {
                        table += "<td>" + key.value + "</td>"
                    }
                }
                while (!key.done);
                table += "</tr>";

                //Content
                let i = 0;
                while (i < number_candidates) {
                    let candidate = ballot.candidates[i];
                    let website = notNullChars(candidate.website);
                    let cvJSON = JSON.parse(campaign_info_json.votes_per_ballot_candidate_category[t][i]);

                    if (website && candidatesMap && candidatesMap.get(website)) {
                        table += "<tr>";
                        table += "<td>" + candidatesMap.get(website).name + "</td>";
                        let keys2 = group_categories_map.keys();
                        let key2 = {};
                        do {
                            key2 = keys2.next();

                            if (!key2.done) {
                                table += "<td>" + cvJSON[key2.value] + "</td>"
                            }
                        }
                        while (!key2.done);
                        table += "</tr>"
                    }

                    i++
                }

                table += "</table>";

                tables += table
            }

            statistics_div.innerHTML = tables;
            content_page.innerHTML = statistics_page_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "")
                .replace("[[export_to_xlsx]]", klang.export_to_xlsx).replace("[[export_to_ods]]", klang.export_to_ods)
                .replace("[[text]]", klang.download_data);

            export_xlsx_button.addEventListener("click", exportStatisticsToXLSX);
            export_ods_button.addEventListener("click", exportStatisticsToODS)
        } else {
            content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page1)
        }
    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "")
            .replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

/**
 * It opens a new page with the cancellations sent to the server.
 */
function showCancellations() {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        $('#modal7').modal('close');

        header_title.innerHTML = klang.canceled_votes;
        header_info.innerHTML = "";
        content_page.innerHTML = "<pre>" + this.responseText + "</pre>"
    });
    sendUnescapedRequest(request, "http://" + localhost127 + ":1985/queryShowCancellations")
}

/**
 * For the mobile app
 * @param {string} icon
 */
function printIconGreen(icon){
    $("#home_mobile_icon").removeClass("green-text");
    $("#home_mobile_icon").addClass("grey-text");
    $("#campaign_info_mobile_icon").removeClass("green-text");
    $("#campaign_info_mobile_icon").addClass("grey-text");
    $("#candidates_mobile_icon").removeClass("green-text");
    $("#candidates_mobile_icon").addClass("grey-text");
    $("#ads_mobile_icon").removeClass("green-text");
    $("#ads_mobile_icon").addClass("grey-text");
    $("#groups_mobile_icon").removeClass("green-text");
    $("#groups_mobile_icon").addClass("grey-text");
    $("#results_mobile_icon").removeClass("green-text");
    $("#results_mobile_icon").addClass("grey-text");

    if (icon){
        $(icon).removeClass("grey-text");
        $(icon).addClass("green-text")
    }
}

/**
 * It allows users to change the login, ipfs and tor providers
 */
function newSettingsPage() {
    content_page.innerHTML = settings_page_html.innerHTML
        .replace("<!--[CDATA[", "").replace("-->", "")
        .replace("[[observers_onions]]", secureStorage.get("observers_onions"))
        .replace("[[enode_port]]", secureStorage.get("enode_port"))
        .replace("[[enode_port_tip]]", klang.enode_port_settings_tip)
        .replace("[[tor2web]]", secureStorage.get("tor2web"));

    if (using_local_server) {
        enode_port_settings_div.removeAttribute("hidden");
        $('#enode_port_div').tooltip();
    }

    if (!using_android_app){
        tor2web_div.removeAttribute("hidden");
    }

    observers_onions_settings_label.innerHTML = klang.observers_onions_settings_label;
    tor2web_settings_label.innerHTML = klang.tor2web;
    enode_port_settings_label.innerHTML = klang.enode_port_settings_label;
    update_settings_button.innerHTML = klang.update_settings_button;

    Materialize.updateTextFields();
    update_settings_button.addEventListener("click", updateSettings);
}

/**
 * It changes the login, ipfs and tor providers
 */
function updateSettings() {
    if (!sessionStorage.getItem("key")) {
        toast(klang.cant_open_candidates_page3,2000);
        return
    }
    secureStorage.set("tor2web", tor2web_settings_input.value);
    secureStorage.set("observers_onions", observers_onions_settings_input.value);
    secureStorage.set("enode_port", enode_port_settings_input.value)
}

/**
 * It opens the initial page
 */
function newStartPage() {
    let mode = getParameterByName("mode", null);
    let preloader = preloader_android_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
    if (mode){
        if (mode.startsWith("createVaultAndroid")){
            content_page.innerHTML = preloader_title_android_html.innerHTML.replace("<!--[CDATA[", "")
                .replace("-->", "").replace("[text]", klang.creating_vault) + preloader;
        } else if (mode.startsWith("openVaultAndroid")){
            content_page.innerHTML = preloader_title_android_html.innerHTML.replace("<!--[CDATA[", "")
                .replace("-->", "").replace("[text]", klang.opening_vault) + preloader;
        }
    } else{
        content_page.innerHTML = start_page_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
        start_page_join.innerHTML = klang.start_page_join;
        start_page_choose.innerHTML = klang.start_page_choose;
        start_page_vote.innerHTML = klang.start_page_vote;
        tutorials.innerHTML = klang.tutorials;
        for_voters_button.innerHTML = klang.for_voters_button;
        for_creators_button.innerHTML = klang.for_creators_button
    }
    header_title.innerHTML = "";
    header_info.innerHTML = "";
}

/**
 * Export the content of data_table and save it into a XLSX file
 */
function exportStatisticsToXLSX() {
    let filename = klang.statistics.toLowerCase();
    filename = filename.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
    filename += ".xlsx";
    let wb = {SheetNames: [], Sheets: {}};

    let current_ballot = campaign_info_json.current_ballot;
    for (let t = 0; t <= current_ballot; t++) {
        let elt = document.getElementById('data_table' + t);
        let ws = XLSX.utils.table_to_sheet(elt);
        let sheet_name = t + " - " + campaign_info_json.ballots[t].id;
        wb.SheetNames.push(sheet_name);
        wb.Sheets[sheet_name] = ws
    }

    return XLSX.writeFile(wb, filename)
}

/**
 * Export the content of data_table and save it into an ODS file
 */
function exportStatisticsToODS() {
    let filename = klang.statistics.toLowerCase();
    filename = filename.normalize('NFD').replace(/[\u0300-\u036f]/g, "");
    filename += ".ods";
    let wb = {SheetNames: [], Sheets: {}};

    let current_ballot = campaign_info_json.current_ballot;
    for (let t = 0; t <= current_ballot; t++) {
        let elt = document.getElementById('data_table' + t);
        let ws = XLSX.utils.table_to_sheet(elt);
        let sheet_name = t + " - " + campaign_info_json.ballots[t].id;
        wb.SheetNames.push(sheet_name);
        wb.Sheets[sheet_name] = ws
    }

    return XLSX.writeFile(wb, filename)
}

/**
 * Displaying candidates
 */
function newCandidatesPage() {
    if (!sessionStorage.getItem("key")) {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page3);
        return
    }

    if (current_campaign.id) {
        if (!campaign_info_json.no_campaign) {
            if (campaign_info_json.how_many_ballots == 0) {
                content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                    .replace("-->", "").replace("[[text]]", klang.no_candidates_to_show);
                return
            }
            let current_ballot = campaign_info_json.current_ballot;
            let is_closed = campaign_info_json.ballots[current_ballot].closed;

            //Displaying the headers
            content_page.innerHTML = candidates_page_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
            candidate_photo_th.innerHTML = klang.candidate_photo_th;
            candidate_name_th.innerHTML = klang.candidate_name_th;
            candidate_party_th.innerHTML = klang.candidate_party_th;
            vote_donate_th.innerHTML = klang.vote_th;

            let ballot = campaign_info_json.ballots[current_ballot];
            let ballot_id = ballot.id;
            let closed = ballot.closed;

            if (ballot_id !== "" && ballot_id !== undefined) {
                header_info.innerHTML = ballot_id_header_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "")
                    .replace("[[id]]", ballot_id).replace("[[data-tooltip]]", klang.current_ballot_label +
                        " (" + (closed ? klang.round_closed : klang.round_active) + ")")
                    .replace("[[color]]", (closed ? "grey" : "green"));
                let button_element = $('#disabled_round_button');
                button_element.tooltip()
            }

            let json_vote = "";
            if (secureStorage.get("my_vote_" + current_campaign.id + "_" + campaign_info_json.current_ballot)) {
                json_vote = JSON.parse(secureStorage.get("my_vote_" + current_campaign.id + "_"
                    + campaign_info_json.current_ballot));
                if ((json_vote.ballot != current_ballot) || (json_vote.campaign != current_campaign.id)) {
                    json_vote = "";
                 }
            }
            let candidatesMap = candidates_per_ballot_map.get('' + current_ballot);
            let i = 0;
            let how_many = 0;
            let number_candidates = ballot.how_many_candidates;

            if (number_candidates == 0) {
                content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                    .replace("-->", "").replace("[[text]]", klang.no_candidates_to_show);
                header_info.innerHTML = "";
                return
            }

            let website = "";
            do {
                let candidate = ballot.candidates[i];
                website = notNullChars(candidate.website);

                if (website && candidatesMap && candidatesMap.get(website)) {
                    let party = candidatesMap.get(website).party;
                    let name = candidatesMap.get(website).name;
                    let photo = candidatesMap.get(website).photo;

                    if (campaign_info_json.disable_candidate_link) {
                        candidates_tbody.innerHTML += candidates_page_items_html.innerHTML.replace("<!--[CDATA[", "")
                            .replace("-->", "").replace("[[name]]", name).replace("[[party]]", party)
                            .replace("[[photo]]", photo).replace("[[vote_button_text]]", klang.vote_button_text)
                            .replace("[[vote_button_id]]", "vote_button_id_" + i).replace("[[vote_button_th]]", "vote_button_th_" + i)
                            .replace("<a href=\"[[candidate_page_href]]\" rel=\"noreferrer\" target=\"_blank\">", "<div>").replace("</a>", "</div>")
                    } else {
                        candidates_tbody.innerHTML += candidates_page_items_html.innerHTML.replace("<!--[CDATA[", "")
                            .replace("-->", "").replace("[[name]]", name).replace("[[party]]", party)
                            .replace("[[photo]]", photo).replace("[[vote_button_text]]", klang.vote_button_text)
                            .replace("[[vote_button_id]]", "vote_button_id_" + i).replace("[[vote_button_th]]", "vote_button_th_" + i)
                            .replace("[[candidate_page_href]]", website)
                    }
                    how_many++
                }
                i++
            }
            while (website && i < number_candidates);

            if (how_many == 0) {
                content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                    .replace("-->", "").replace("[[text]]", klang.no_candidates_to_show);
                header_info.innerHTML = "";
                return
            }

            let button_text = "vote_button_id_";

            //Adding listeners to the candidate items buttons
            for (let j = 0; j < number_candidates; j++) {

                if (!document.getElementById(button_text + j)) {
                    continue
                }

                if (json_vote && json_vote.ballot !== undefined && mygroup_info_json.ballots
                    && mygroup_info_json.ballots[json_vote.ballot]) {
                    if (json_vote.candidate == j) {
                        $("#" + button_text + j).addClass('disabled');
                        document.getElementById(button_text + j).innerHTML = sent_icon_html.innerHTML
                            .replace("<!--[CDATA[", "").replace("-->", "");
                        setTooltip("vote_button_th_" + j, klang.vote_sent, "down");

                        let first_numbers = mygroup_info_json.ballots[json_vote.ballot].numbers;
                        let candidates = mygroup_info_json.ballots[json_vote.ballot].candidates;
                        for (let k = 0; k < first_numbers.length; k++) {
                            if ("0x" + first_numbers[k] == json_vote.first_number) {
                                //Verifying if the stored candidate is the same as the chosen candidate
                                let s_candidate = (candidates[k].toNumber ? candidates[k].toNumber() : candidates[k]);
                                let same_candidate = (s_candidate == json_vote.candidate);
                                if (same_candidate) {
                                    if (mygroup_info_json.ballots[json_vote.ballot].committed[k]) {
                                        document.getElementById(button_text + j).innerHTML = confirmed_icon_html.innerHTML
                                            .replace("<!--[CDATA[", "").replace("-->", "");
                                        setTooltip("vote_button_th_" + j, klang.vote_confirmed, "down")
                                    } else {
                                        document.getElementById(button_text + j).innerHTML = voted_icon_html.innerHTML
                                            .replace("<!--[CDATA[", "").replace("-->", "");
                                        setTooltip("vote_button_th_" + j, klang.voted, "down")
                                    }
                                } else {
                                    document.getElementById(button_text + j).innerHTML = error_icon_html.innerHTML
                                        .replace("<!--[CDATA[", "").replace("-->", "");
                                    setTooltip("vote_button_th_" + j, klang.error, "down")
                                }
                                break
                            }
                        }
                    } else {
                        document.getElementById(button_text + j).style.visibility = "hidden"
                    }
                } else {
                    if (!mygroup_info_json.no_group) {
                        document.getElementById(button_text + j).addEventListener("click", vote)
                    } else {
                        setTooltip(button_text + j, (mygroup_index == MIRE ?
                            klang.must_join_group : klang.must_participate), "left")
                    }
                    if (is_closed || secureStorage.get("waitPreVote") ||
                        secureStorage.get("my_vote_" + current_campaign.id + "_" + campaign_info_json.current_ballot)) {
                        document.getElementById(button_text + j).style.visibility = "hidden"
                    }
                }
            }
        } else {
            content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page1)
        }
    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

/**
 * It defines a tooltip to a generic element
 * @param {string} id
 * @param {string} tooltip
 * @param {string} position
 */
function setTooltip(id, tooltip, position) {
    document.getElementById(id).setAttribute("data-position", position);
    document.getElementById(id).setAttribute("data-tooltip", tooltip);

    let class_without_tooltip = document.getElementById(id).getAttribute("class");
    document.getElementById(id).setAttribute("class", (class_without_tooltip ? class_without_tooltip : "") + " tooltiped");

    let element = $('#' + id);
    element.tooltip()
}

/**
 * Displaying voting results
 */
function newResultsPage() {
    if (!sessionStorage.getItem("key")) {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page3);
        return
    }

    if (current_campaign.id) {
        content_page.innerHTML = results_page_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
        candidate_photo_th.innerHTML = klang.candidate_photo_th;
        candidate_name_th.innerHTML = klang.candidate_name_th;
        candidate_party_th.innerHTML = klang.candidate_party_th;
        votes_th.innerHTML = klang.votes_th;

        if (!campaign_info_json.no_campaign) {
            if (campaign_info_json.how_many_ballots == 0) {
                content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                    .replace("-->", "").replace("[[text]]", klang.no_candidates_to_show);
                return
            }

            let current_ballot = campaign_info_json.current_ballot;

            let ballot = campaign_info_json.ballots[current_ballot];
            let ballot_id = ballot.id;
            let closed = ballot.closed;

            if (ballot_id !== "" && ballot_id !== undefined) {
                header_info.innerHTML = ballot_id_header_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "")
                    .replace("[[id]]", ballot_id).replace("[[data-tooltip]]", klang.current_ballot_label +
                        " (" + (closed ? klang.round_closed : klang.round_active) + ")")
                    .replace("[[color]]", (closed ? "grey" : "green"));
                let button_element = $('#disabled_round_button');
                button_element.tooltip()
            }

            let candidatesMap = candidates_per_ballot_map.get('' + current_ballot);
            let i = 0;
            let how_many = 0;
            let votes = 0;
            let number_candidates = ballot.how_many_candidates;

            if (number_candidates == 0) {
                content_page.innerHTML = cant_open_candidates_page_html.innerHTML
                    .replace("<!--[CDATA[", "").replace("-->", "").replace("[[text]]", klang.no_voting_to_show);
                header_info.innerHTML = "";
                return
            }

            let website = "";
            do {
                let candidate = ballot.candidates[i];
                votes = candidate.count;
                website = notNullChars(candidate.website);
                if (website && candidatesMap && candidatesMap.get(website)) {
                    let party = candidatesMap.get(website).party;
                    let name = candidatesMap.get(website).name;
                    let photo = candidatesMap.get(website).photo;

                    if (campaign_info_json.disable_candidate_link) {
                        candidates_tbody.innerHTML += results_page_items_html.innerHTML
                            .replace("<!--[CDATA[", "").replace("-->", "").replace("[[name]]", name)
                            .replace("[[party]]", party).replace("[[photo]]", photo).replace("[[votes]]", votes)
                            .replace("<a href=\"[[candidate_page_href]]\" rel=\"noreferrer\" target=\"_blank\">", "<div>")
                            .replace("</a>", "</div>")
                    } else {
                        candidates_tbody.innerHTML += results_page_items_html.innerHTML.replace("<!--[CDATA[", "")
                            .replace("-->", "").replace("[[name]]", name).replace("[[party]]", party)
                            .replace("[[photo]]", photo).replace("[[votes]]", votes)
                            .replace("[[candidate_page_href]]", website)
                    }
                    how_many++
                }
                i++
            } while (website && i < number_candidates);

            if (how_many == 0) {
                content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                    .replace("-->", "").replace("[[text]]", klang.no_voting_to_show);
                header_info.innerHTML = "";

            }

        } else {
            content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page1)
        }
    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

/**
 * Displaying the promotional page
 */
function newPromoPage() {
    let url_base = "https://kantpoll.com/promo";
    let promo_img_src = "";
    let promo_link = "";
    if (locale == 'pt') {
        promo_img_src = url_base + "/imgs/mobile-pt.jpg";
        promo_link = url_base + "/links/mobile-pt.html"
    } else if (locale == 'es') {
        promo_img_src = url_base + "/imgs/mobile-es.jpg";
        promo_link = url_base + "/links/mobile-es.html"
    } else if (locale == 'fr') {
        promo_img_src = url_base + "/imgs/mobile-fr.jpg";
        promo_link = url_base + "/links/mobile-fr.html"
    } else {
        promo_img_src = url_base + "/imgs/mobile-en.jpg";
        promo_link = url_base + "/links/mobile-en.html"
    }
    content_page.innerHTML = promo_html.innerHTML.replace("<!--[CDATA[", "")
        .replace("-->", "").replace("[[promo_link]]", promo_link)
        .replace("[[promo_img]]", promo_img_src)
}

/**
 * Displaying parties
 */
function newPartiesPage() {
    if (!sessionStorage.getItem("key")) {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page3);
        return
    }

    if (current_campaign.id) {
        if (!campaign_info_json.no_campaign) {
            content_page.innerHTML = parties_page_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
            party_photo_th.innerHTML = klang.party_photo_th;
            party_name_th.innerHTML = klang.party_name_th;
            party_url_th.innerHTML = klang.party_url_th;

            let keys = parties_map.keys();
            let values = parties_map.values();
            let number_parties = parties_map.size;

            if (number_parties == 0) {
                content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                    .replace("-->", "").replace("[[text]]", klang.no_parties_to_show);
                return
            }

            let key = {};
            let value = {};
            do {
                value = values.next();
                key = keys.next();

                if (!key.done) {
                    let name = key.value;
                    let url = value.value.url;
                    url = url.replace("javascript", "");
                    let photo = value.value.photo;
                    parties_tbody.innerHTML += parties_page_items_html.innerHTML.replace("<!--[CDATA[", "")
                        .replace("-->", "").replace("[[name]]", name).replace("[[url]]", "<a href='" + url
                            + "' target='_blank' rel='noreferrer'>" + url.substring(0, 25) + (url.length > 25 ? ".." : "") + "</a>")
                        .replace("[[photo]]", photo)
                }
            }
            while (!key.done)

        } else {
            content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page1)
        }
    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

/**
 * Displaying groups
 */
function newGroupCategoriesPage() {
    if (!sessionStorage.getItem("key")) {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page3);
        return
    }

    if (current_campaign.id) {
        if (!campaign_info_json.no_campaign) {
            let has_group = !mygroup_info_json.no_group;
            let hide_buttons = has_group || secureStorage.get("enter_group_button_disabled_" + current_campaign.id)
                || campaign_info_json.stopping_accession_to_groups == "stopped";

            if (hide_buttons && sessionStorage.getItem("key")) {
                let category = "--";
                if (secureStorage.get("enter_group_button_disabled_" + current_campaign.id)) {
                    category = klang.requested
                } else if (mygroup_info_json.category) {
                    category = mygroup_info_json.category
                }

                header_info.innerHTML = voter_group_header_html.innerHTML.replace("<!--[CDATA[", "")
                    .replace("-->", "").replace("[[category]]", category)
                    .replace("[[data-tooltip]]", klang.your_group_category);
                let button_element = $('#disabled_group_button');
                button_element.tooltip();

                if (secureStorage.get("enter_group_button_disabled_" + current_campaign.id) &&
                    (parseInt(secureStorage.get("enter_group_button_disabled_" + current_campaign.id))
                        + (MINUTES_TO_REGISTER_VOTER * 60 * 1000) < Date.now())) {
                    secureStorage.remove("enter_group_button_disabled_" + current_campaign.id)
                }
            }
            content_page.innerHTML = group_categories_page_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");

            if (campaign_info_json.stopping_accession_to_groups && !has_group) {
                if (campaign_info_json.stopping_accession_to_groups == "stopped") {
                    content_page.innerHTML = stopping_accession_html.innerHTML.replace("<!--[CDATA[", "")
                            .replace("-->", "").replace("[message]", klang.accession_stopped)
                        + content_page.innerHTML
                } else if (campaign_info_json.stopping_accession_to_groups == "stopping") {
                    content_page.innerHTML = stopping_accession_html.innerHTML.replace("<!--[CDATA[", "")
                            .replace("-->", "").replace("[message]", klang.accession_stopping)
                        + content_page.innerHTML
                }
            }

            group_category_description_th.innerHTML = klang.group_category_description_th;
            group_category_id_th.innerHTML = klang.group_category_id_th;
            enter_group_th.innerHTML = klang.enter_group_th;

            let keys = group_categories_map.keys();
            let values = group_categories_map.values();
            let number_categories = group_categories_map.size;

            if (number_categories == 0) {
                content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                    .replace("-->", "").replace("[[text]]", klang.no_group_categories_to_show);
                header_info.innerHTML = "";
                return
            }

            if (number_categories > 0) {
                let i = 0;
                let key = {};
                let value = {};
                let how_many_groups = 0;
                let how_many_group_categories = 0;
                let average = 1;

                if (using_local_server && the_contract){
                    how_many_groups = the_contract.howManyGroups().toNumber();
                    how_many_group_categories = the_contract.howManyGroupCategories().toNumber();
                    if (how_many_group_categories == 0){
                        how_many_group_categories = 1;
                    }
                    average = how_many_groups / how_many_group_categories;

                    if (average == 0){
                        average = 1
                    }
                }

                do {
                    value = values.next();
                    key = keys.next();

                    if (!key.done) {
                        let id = key.value;
                        let id_label = id;
                        let content = value.value.content;

                        if (using_local_server) {
                            //Placing an alert icon in front of the group category id if its groups are almost full
                            let groups = (vacant_groups[i] ? vacant_groups[i].split(",") : []);
                            let empty_groups_counter = groups.length == 0 ? 0 : groups.length - 1;

                            if ((empty_groups_counter / average) > 0.2) {
                                id_label = "<span id='gc_" + id + "' class='white tooltiped' data-tooltip='"
                                    + klang.occupancy_rate + empty_groups_counter + "'>"
                                    + id_label + "</span>"
                            } else if ((empty_groups_counter / average) > 0.1 && (empty_groups_counter / average) <= 0.2) {
                                id_label = "<span id='gc_" + id + "' class='yellow lighten-2 tooltiped' data-tooltip='"
                                    + klang.occupancy_rate + empty_groups_counter + "'>"
                                    + id_label + "</span>"
                            } else if ((empty_groups_counter / average) <= 0.1) {
                                id_label = "<span id='gc_" + id + "' class='red lighten-2 tooltiped' data-tooltip='"
                                    + klang.occupancy_rate + empty_groups_counter + "'>"
                                    + id_label + "</span>"
                            }
                        }

                        group_categories_tbody.innerHTML += group_categories_page_items_html.innerHTML
                            .replace("<!--[CDATA[", "").replace("-->", "").replace("[[content]]", content)
                            .replace("[[group_button_text]]", klang.group_button_text)
                            .replace("[[group_button_id]]", "group_button_id_" + i).replace("[[id]]", id_label);
                        group_categories_select.innerHTML += group_categories_select_item_html.innerHTML
                            .replace("<!--[CDATA[", "").replace("-->", "").replace("[[id]]", id);

                        if (using_local_server) {
                            sleep(200).then(function () {
                                let gc_element = $("#gc_" + id);
                                gc_element.tooltip()
                            })
                        }
                    }
                    i++
                }
                while (!key.done);

                if (hide_buttons || campaign_info_json.no_campaign
                    || !wallet || !wallet.address) {
                    document.getElementById("enter_group_th").style.display = "none"
                }

                for (let j = 0; j < i - 1; j++) {
                    if (hide_buttons || campaign_info_json.no_campaign
                        || !wallet || !wallet.address) {
                        document.getElementById("group_button_id_" + j).style.display = "none"
                    } else {
                        document.getElementById("group_button_id_" + j).addEventListener("click", enterIntoGroup)
                    }
                }
            }
        } else {
            content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "")
                .replace("-->", "").replace("[[text]]", klang.cant_open_candidates_page1)
        }
    } else {
        content_page.innerHTML = cant_open_candidates_page_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "")
            .replace("[[text]]", klang.cant_open_candidates_page2)
    }
}

/**
 * Send a vote with Tor
 */
function vote(ev) {
    if (mygroup_info_json.no_group) {
        toast(klang.must_enter_group, 2500);
        return
    }

    //Groups can be any size if the accession to groups is stopped
    if (campaign_info_json.mgz > mygroup_info_json.size &&
        campaign_info_json.stopping_accession_to_groups != "stopped") {
        toast(klang.wait_group_complete, 3000);
        updateMyGroupInfo();
        return
    }

    if (campaign_info_json.stopping_accession_to_groups != "stopped") {
        toast(klang.voters_joining_groups, 3000);
        updateCampaignInfo();
        return
    }

    if (!secureStorage.get("last_signature_" + current_campaign.id + "_" + campaign_info_json.current_ballot)) {
        toast(klang.vote_not_ready, 3000);
        if (Date.now() > myvote_last_update + 10000) {
            myvote_last_update = Date.now();
            updateMyVote()
        }
        return
    }

    //ev can be an event or a number representing a candidate
    sendPreVoteMessage((isNaN(ev) ? ev.target.id.substring(15) : ev))
}

/**
 * Voters should choose a group to enter
 */
function enterIntoGroup(ev) {
    //The index indicates which was the chosen group category
    let index = parseInt(ev.target.id.substring(16));

    //The voter is not registered or not connected
    //The voter is not registered or not connected
    if (mygroup_index == MINR || mygroup_index == MINC || isNaN(mygroup_index)) {
        toast(klang.must_participate, 2500);
        return
    }

    call_after_captcha = function () {
        //It hides the confirm/enter_into_group button after the user submits a confirmation
        secureStorage.set("enter_group_button_disabled_" + current_campaign.id, Date.now());
        groupsClick()
    };

    openCaptchaModal();

    //To prove the origin of the message
    let aux_wallet = new ethers.Wallet(wallet.privateKey);
    let signature = aux_wallet.signMessage(current_campaign.id + "_enter_group");
    let payload_json = {address: wallet.address, category: index, signature: signature};
    let payload = JSON.stringify(payload_json);

    let onion = campaign_info_json.chairperson_tor.onion;
    let public_key = campaign_info_json.chairperson_tor.public_key;

    prepareTorMessage(ENTER_GROUP, payload, onion, public_key)
}

/**
 * Do not wait until the groups are full
 */
function stopAccessionToGroups() {
    the_contract.defineStoppingAccessionToGroups(web3_aux.fromAscii("stopped"))
}

/**
 * It checks if the seed is on the localStorage and the key is on the sessionStorage
 * If the key is not there, then print a red key icon to alert the user
 */
function checkKey() {
    //If there are no words, the vault is closed
    if (!localStorage.getItem("words")) {
        vault_icon_container.innerHTML = vault_icon_container_html3.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[data-tooltip]]", klang.vault_closed);
        alertKey.innerHTML = "";
        return
    }

    if (!sessionStorage.getItem("key")) {
        alertKey.innerHTML = floating_button_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "")
            .replace("[[data-tooltip]]", klang.insert_password_again);
        vault_icon_container.innerHTML = vault_icon_container_html1.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[data-tooltip]]", klang.vault_opened_no_password)
    } else {
        alertKey.innerHTML = "";
        vault_icon_container.innerHTML = vault_icon_container_html2.innerHTML.replace("<!--[CDATA[", "")
            .replace("-->", "").replace("[[data-tooltip]]", klang.vault_opened)
    }
}

/**
 * The user name and the key are stored only in the sessionStorage, so the user should enter his or her password
 * and user name every time he or she loads a new page
 * @param {string} password
 * @param {string} user
 */
function loadPassword(password, user) {
    let words = localStorage.getItem("words");

    if (!words || !password || !user) {
        toast(klang.error, 2000);
        return
    }

    localStorage.setItem("user", user);

    //Closing the modal
    $('#modal3').modal('close');
    //Hiding the pulsing button
    alertKey.innerHTML = "";

    //Generating new key
    generateKeys(words, password, user);

    //Reshowing the pulsing button
    checkKey();
    displayUserChip();

    //Getting the key to check with the user login and the ekhash
    let key = sessionStorage.getItem("key");
    let ekhash = localStorage.getItem("ekhash");
    if (!checkUserNPassword(user, key, ekhash)) {
        toast(klang.wrong_password, 2500);

        //Cleaning up the sessionStorage
        clearSession();
        checkKey();
        displayUserChip();
        return
    }

    window.location.href = window.location.href.split("?")[0].replace("#", "")
}

/**
 * It opens the file that constais the user's mnemonics and other data
 * @param {string} password
 * @param {string} user
 */
function openVault(password, user) {
    clearStorages().then(function () {
        //Setting the user in the localStorage
        localStorage.setItem("user", user);

        let words = file_data.kantpoll_com_words;
        file_data.kantpoll_com_words = "";

        let m = new Mnemonic("english");

        let is_valid = m.check(words);

        //Checking if the mnemonic is valid
        if (is_valid) {
            localStorage.setItem("words", words)
        } else {
            toast(klang.error, 2500);
            return
        }

        //Closing the modal
        $('#modal1').modal('close');

        //Hiding the pulsing button
        alertKey.innerHTML = "";

        let hex_data = file_data.kantpoll_com_data;
        let data = web3_aux.toAscii(hex_data);

        //Generating the private and public keys and putting them in the sessionStorage
        generateKeys(words, password, user);

        loadEkhash(data);
        //Checking if the user and the password are correct (probably)
        if (!checkUserNPassword(user, sessionStorage.getItem("key"), localStorage.getItem("ekhash"))) {
            toast(klang.wrong_user_or_password, 3000);
            //Cleaning the sessionStorage
            clearSessionPlusLocal();
            //Reshowing the pulsing button
            checkKey();
            displayUserChip();
        } else {
            setSecureStorage().then(function () {
                //Filling the localStorage with ekhash and certificate_authority
                loadFileData(data);
                window.location.href = window.location.href.split("?")[0].replace("#", "")
            });
        }
    })
}

/**
 * It opens the file that constais the user's mnemonic and other data (for the Android app)
 */
function openVaultAndroid(user, password, words, hex_data) {
    let data = web3_aux.toAscii(hex_data);

    clearStorages().then(function(){
        let m = new Mnemonic("english");
        let is_valid = m.check(words);

        //Checking if the mnemonic is valid
        if (is_valid) {
            localStorage.setItem("words", words)
        } else {
            toast(klang.error, 2500);
            return
        }

        //Hiding the pulsing button
        alertKey.innerHTML = "";

        //Generating the private and public keys and putting them in the sessionStorage
        generateKeys(words, password, user);

        loadEkhash(data);
        //Checking if the user and the password are correct (probably)
        if (!checkUserNPassword(user, sessionStorage.getItem("key"), localStorage.getItem("ekhash"))) {
            toast(klang.wrong_user_or_password, 2000);
            //Cleaning the sessionStorage
            clearSessionPlusLocal();
            sleep(2000).then(function () {
                window.location.href = window.location.href.split("?")[0].replace("#", "")
            })
        } else {
            //Setting the user in the localStorage
            localStorage.setItem("user", user);
            setSecureStorage().then(function () {
                //Filling the localStorage with ekhash and certificate_authority
                loadFileData(data);
                if (getParameterByName("ipns", null)){
                    if (getParameterByName("observers", null)) {
                        secureStorage.set("observers_onions", getParameterByName("observers", null))
                    }
                    searchFor(window.location.href)
                } else{
                    window.location.href = window.location.href.split("?")[0].replace("#", "")
                }
            })
        }
    });
}

/**
 * This file contains info about a user
 * @param {string} data_text
 */
function loadFileData(data_text) {
    let jsonObj = JSON.parse(data_text);
    secureStorage.set("my_certificate", JSON.stringify(jsonObj.certificate));
    secureStorage.set("rsa_privkey", jsonObj.rsa_privkey);
    secureStorage.set("rsa_pubkey", jsonObj.rsa_pubkey)
}

/**
 * Here we will get only one the ekhash
 * @param {string} data_text
 */
function loadEkhash(data_text) {
    let jsonObj = JSON.parse(data_text);
    localStorage.setItem("ekhash", jsonObj.ekhash);
}

/**
 * It loads the file in order to open a vault
 * @param event
 */
function loadFile(event) {
    let input = event.target;
    let reader = new FileReader();

    //Cleaning these variables
    file_data.kantpoll_com_data = "";
    file_data.kantpoll_com_words = "";

    reader.addEventListener("load", function () {
        let text = reader.result;
        let split = text.split("\r\n");

        //There are only two lines in this file
        if (split.length == 2) {
            file_data.kantpoll_com_words = split[0];
            file_data.kantpoll_com_data = split[1]
        }
    });
    reader.readAsText(input.files[0])
}

/**
 * For files stored in .kantpoll/blockchains
 */
function getDir() {
    return "k" + sessionStorage.getItem("directory_seed") + "_" + current_campaign.id
}

/**
 * Cleaning user' data stored in the sessionStorage
 */
function clearSession() {
    sessionStorage.setItem("key", "");
    sessionStorage.setItem("directory_seed", "");
    sessionStorage.setItem("pwd_seed", "");
    sessionStorage.setItem("usershash_seed", "");
    sessionStorage.setItem("wallet", "");
    sessionStorage.setItem("prevoter_wallet", "")
}

/**
 * When opening a new vault and some error occurs
 */
function clearSessionPlusLocal() {
    clearSession();
    localStorage.setItem("words", "");
    localStorage.setItem("user", "");
    localStorage.setItem("ekhash", "")
}

/**
 * It is called when users close a vault or open a new one
 */
async function clearStorages() {
    let keys = secureStorage.getAllKeys();

    if (keys.length == 0){
        clearSessionPlusLocal();
        return
    }

    let old = {};
    for (let i = 0; i < keys.length; i++){
        old[keys[i]] = secureStorage.get(keys[i])
    }
    let old_str = JSON.stringify(old);
    let key = JSON.parse(sessionStorage.getItem("key"));
    let encrypted = await AESEncrypt(keccak224(key.privkey), old_str);

    localStorage.setItem(localStorage.getItem("ekhash"), encrypted);
    secureStorage.removeAll();
    clearSessionPlusLocal();
}

/**
 * When the user clicks in the close vault menu item
 */
function closeVault() {
    clearStorages().then(function () {
        clearSessionPlusLocal();
        window.location.href = window.location.href.split("?")[0].replace("#", "")
    })
}

/**
 * It creates a new vault to be used by the Android app

 * @param {string} user
 * @param {string} password
 */
function createVaultAndroid(user, password) {
    localStorage.clear();
    sessionStorage.clear();
    let m = new Mnemonic("english");

    // Generating new mnemonics
    let words = m.generate(128);

    let address = generateKeys(words, password, user);

    //Creating Ekhash in order to check user login and password (only informative, without safety concerns)
    let ekhash = keccak224(sessionStorage.getItem("key") + user);

    //Setting the ekhash in the localStorage
    localStorage.setItem("ekhash", ekhash);

    //Setting the user in the localStorage
    localStorage.setItem("user", user);

    //Setting the ekhash in the localStorage
    localStorage.setItem("words", words);

    setSecureStorage().then(function(){
        setRSAKeys(function () {
            //Obtaining the certificate with the certificate authority
            let certificate = Android.getCertificate(address);
            secureStorage.set("my_certificate", certificate);

            //The data should be formatted as a JSON string
            let data = '{'
                + '"certificate":' + certificate + ','
                + '"ekhash":"' + ekhash + '",'
                + '"rsa_privkey":"' + secureStorage.get("rsa_privkey") + '",'
                + '"rsa_pubkey":"' + secureStorage.get("rsa_pubkey") + '"'
                + '}';

            let hex_data = web3_aux.fromAscii(data);

            Android.setVault(words + ";" + hex_data);
            sleep(TIME_TO_SET_VAULT).then(function () {
                window.location.href = "file:///android_asset/website/home.html?user=" + user +
                    "&password=" + password + "&words=" + words + "&data=" + hex_data + "&mode=openVaultAndroid"
            })
        })
    })
}

/**
 * It uses hashcodes to check if the password and user login are correct
 * @param {string} user
 * @param {string} key
 * @param {string} ekhash
 * @returns {boolean}
 */
function checkUserNPassword(user, key, ekhash) {
    let hash = keccak224(key + user);
    return (hash == ekhash)
}

/**
 * Instantiate the web3 after running the Geth
 */
function instantiateWeb3() {
    if (isEmpty(web3)) {
        web3 = new Web3(new Web3.providers.HttpProvider("http://" + localhost127 + ":8545"))
    }
}

/**
 * It calls: geth --options...
 * @param {function} callback
 * @returns {Object}
 */
function runBlockChain(callback) {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        let resp = this.responseText;

        if (resp == COMPLETE_STRING) {
            let request2 = new XMLHttpRequest();
            request2.addEventListener("load", function () {
                let resp2 = this.responseText;

                if (resp2 == COMPLETE_STRING) {
                    sleep(3000).then(callback)
                }
            });

            let role = "";
            if (current_campaign.address == wallet.address) {
                role = "001"
            } else if (secureStorage.get("enode_port") != "") {
                role = secureStorage.get("enode_port")
            } else {
                role = "999"
            }

            //Secondly, run the blockchain (the address is now the wallet.address and not the current_campaign.address,
            //since the voter is not necessarily the creator)
            sendRequest(request2, "http://" + localhost127 + ":1985/queryRunBlockchain?id=1151985" + current_campaign.id +
                "&address=" + wallet.address.substring(2).toLowerCase() + "&dir=" + getDir() + "&role=" + role)
        }
    });

    //First, create the pwd file
    let pwd = getPwd();
    sendRequest(request, "http://" + localhost127 + ":1985/queryCreatePwdFile?dir=" + getDir() + "&password=" + pwd)
}

/**
 * Insert a new account with the command geth account import. In order to do that, create new privatekey and password file.
 * @param {function} callback
 */
function insertAccountIntoBlockchain(callback) {
    let request = new XMLHttpRequest();

    request.addEventListener("load", function () {
        let resp = this.responseText;

        if (resp == COMPLETE_STRING && callback) {
            runBlockChain(callback)
        }
    });
    //The password to unlock the main account
    let pwd = getPwd();
    sendRequest(request, "http://" + localhost127 + ":1985/queryInsertAccountIntoBlockchain?dir=" + getDir() + "&privkey=" +
        wallet.privateKey.substring(2).toLowerCase() + "&password=" + pwd)
}

/**
 * Generating the pwd string to unlock ethereum accounts
 * @returns {string}
 */
function getPwd() {
   return sessionStorage.getItem("pwd_seed")
}

/**
 * Create a new account, insert the account address into the genesis file and then initialize a new geth instance
 * @param {function} callback
 */
function setBlockChain(callback) {
    let request = new XMLHttpRequest();

    request.addEventListener("load", function () {
        let resp = this.responseText;
        if (resp == COMPLETE_STRING) {
            insertAccountIntoBlockchain(callback)
        }
    });

    //The nonce is generated from the country (cannot be changed) and id
    let nonce = getNonce();

    //Query is composed of: first - chainid, second - ethereum address, third - enode, fourth- the directory, fifth - nonce
    sendRequest(request, "http://" + localhost127 + ":1985/querySetBlockchain?chainid=1151985" + current_campaign.id +
        "&address=" + current_campaign.address.substring(2).toLowerCase() + "&enodes=" + "30" + "&directory=" + getDir() +
        "&nonce=" + nonce)
}

/**
 * Verify if the genesis file, with the same content, already exists. If it does not exist, then call setBlockChain.
 * However, if it does exist, run the blockchain.
 * Deletedirs indicates whether the server should delete blockchain directories in the event of a different genesis file
 * @param {function} callback
 * @param {string} deletedirs
 */
function initBlockchain(callback, deletedirs) {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        let exists = this.responseText;
        if (exists != TRUE_STRING) {
            setBlockChain(callback)
        } else {
            runBlockChain(callback)
        }
    });
    //The nonce is generated from the country (cannot be changed) and id
    let hash = getNonce();

    //Query is composed of: first - chainid, second - ethereum address, third - enode, fourth- the directory, fifth - nonce
    sendRequest(request, "http://" + localhost127 + ":1985/queryVerifyBlockchain?chainid=1151985" + current_campaign.id +
        "&address=" + current_campaign.address.substring(2).toLowerCase() + "&enode=" + "12345" + "&directory=" + getDir() +
        "&nonce=" + hash + "&delete=" + deletedirs)
}

/**
 * It returns the nonce of the genesis file
 * @returns {int}
 */
function getNonce() {
    return hashCode(current_campaign.country + current_campaign.id)
}

/**
 * Search for campaigns (maybe, in the future, search also for candidates, parties, groups...)
 */
function searchFor(s) {
    if (!sessionStorage.getItem("key")) {
        toast(klang.cant_open_candidates_page3,2000);
        return
    }
    if (!s) {
        return
    }
    if (s.toLowerCase() == "id"){
        let user = localStorage.getItem("user");
        let keyStr = sessionStorage.getItem("key");

        if (!user || !wallet.address || !keyStr) {
            toast(klang.no_vault_opened, 3000);
            return
        }

        let key = JSON.parse(keyStr);
        header_title.innerHTML = "Id";
        header_info.innerHTML = "";
        content_page.innerHTML = "<div class='input-field'><input type='text' value='"
            + user + ";" + wallet.address + ";" + key.pubkey + "'></input></div>";
        return
    }

    //The user can search by inserting the ipns or ipns, onion and address. If he or she inserts something different
    //from an ipns address, call the search service
    let ipns = getParameterByName("ipns", s);
    let onion = getParameterByName("onion", s);
    let address = getParameterByName("address", s);

    if (ipns && ipns == current_campaign.ipns) {
        toast(klang.same_campaign, 1500);
        search.value = "";
        return
    }

    if (onion && address && ipns && ipns.length == 46) {
        showPreloader(klang.searching_campaign);
        setTimeout(killPreloader, 60000); //1 minute

        sendPreRequest("http://" + onion, function () {
            updateCurrentCampaignWithOnion(ipns, onion, address, true).then(function () {
                killPreloader(true);
                if (getParameterByName("observers", s)) {
                    secureStorage.set("observers_onions", getParameterByName("observers", s))
                }
                if (current_campaign.ipns == ipns){
                    window.location.href = window.location.href.split("?")[0].replace("#", "")
                        + "?mode=campaignInfo"
                }
            })
        })
    }
    search.value = ""
}

/**
 * To maximize the chance of a successful response
 * @param (string} url
 * @param {function} callback
 */
function sendPreRequest(url, callback){
    let pre_request = new XMLHttpRequest();
    pre_request.addEventListener("load", function () {
        callback()
    });
    pre_request.addEventListener("error", function () {
        sleep(5000).then(callback)
    });

    if (!using_tor_browser && !using_android_app && !using_local_server && secureStorage.get("tor2web")){
        url = url.replace("http://", "https://").replace(".onion", secureStorage.get("tor2web"))
    }

    pre_request.open('GET', url, true);
    pre_request.send()
}

/**
 * It returns the certificate authority of the voter's certificate
 * @returns (string)
 */
function getCertificateAuthority(){
    if (!secureStorage.get("my_certificate")){
        return ""
    }
    let certificate = JSON.parse(secureStorage.get("my_certificate"));
    return certificate.issuer_address
}

/**
 * It receives the raw data from the search provider and then transforms it in a HTML string
 * @param {string} raw_results
 * @returns {string}
 */
function readSearchResults(raw_results) {
    let json_results = JSON.parse(raw_results);
    let hits = json_results.hits;

    if (hits.found >= 1) {
        let hit = hits.hit;

        let results_html = "";
        hit.forEach(function (campaign) {
            let fields = campaign.fields;

            let name = fields.name;
            let description = fields.description;
            let image = fields.image;
            let period = fields.start.replace("T00:00:00Z", "") + " - " + fields.end.replace("T00:00:00Z", "");
            let country = fields.country;
            let address = fields.address;

            let this_website = window.location.href;
            this_website = this_website.split("/")[0] + "//" + this_website.split("/")[2];
            let url = this_website + (using_local_server ? "/home.html?ipns=" : "/home?ipns=") + fields.ipns +
                "&onion=" + fields.onion + "&address=" + address;

            results_html += results_item_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "")
                .replace("[name]", name).replace("[description]", description).replace("[image]", image)
                .replace("[period]", period).replace("[country]", country).replace("[url]", url)
        });

        return results_html
    } else {
        return klang.no_campaign_found
    }
}

/**
 * Access the file containing campaign information
 * @param {string} ipns
 * @returns {Promise}
 */
function updateCurrentCampaign(ipns) {
    return new Promise(resolve => {
        let request = new XMLHttpRequest();
        request.addEventListener("load", function () {
            if (this.responseText.startsWith("{")){
                let jsonObj = JSON.parse(this.responseText);
                current_campaign = {};
                current_campaign.id = jsonObj.id;
                current_campaign.name = jsonObj.name;
                current_campaign.ipns = jsonObj.ipns;
                current_campaign.description = jsonObj.description;
                current_campaign.country = jsonObj.country;
                current_campaign.period = jsonObj.period;
                current_campaign.image = jsonObj.image;
                current_campaign.link = jsonObj.link;
                current_campaign.address = jsonObj.address;
                current_campaign.contract = jsonObj.contract;
                current_campaign.regexp = jsonObj.regexp;
                current_campaign.certificate_authority = jsonObj.certificate_authority;
                current_campaign.rounds = jsonObj.rounds;
                current_campaign.onion = jsonObj.onion;
                current_campaign.mgz = jsonObj.mgz;

                let stored_campaign = JSON.parse(JSON.stringify(current_campaign));
                stored_campaign.stored = true;
                secureStorage.set("current_campaign", JSON.stringify(stored_campaign));
            } else {
                log("Error while updating campaign");
                if (secureStorage.get("current_campaign")){
                    current_campaign = JSON.parse(secureStorage.get("current_campaign"));
                }
            }
            resolve()
        });

        request.addEventListener("error", function () {
            log("Error while updating campaign");
            if (secureStorage.get("current_campaign")){
                current_campaign = JSON.parse(secureStorage.get("current_campaign"));
            }
            resolve()
        });

        sendRequest(request, "http://" + localhost127 + ":1985/queryGetProfile?file=" + current_campaign.id + "/profile")
    })
}

/**
 * To stop to provide and get info about the campaign
 */
function clearIntervals(){
    clearInterval(provide_campaign_info_handler);
    provide_campaign_info_handler = 0;
    clearInterval(update_json_groups_handler);
    update_json_groups_handler = 0;
}

/**
 * Stop some handlers and clear the backups
 */
function clearBackups() {
    clearIntervals();

    //Cleaning the info about the campaign
    secureStorage.set("candidates_ipfs_page_0", "");
    secureStorage.set("candidates_ipfs_page_1", "");
    secureStorage.set("candidates_ipfs_page_2", "");
    secureStorage.set("candidates_ipfs_page_3", "");
    secureStorage.set("candidates_ipfs_page_4", "");
    secureStorage.set("parties_ipfs_page", "");
    secureStorage.set("group_categories_ipfs_page", "");
    secureStorage.set("campaign_info_json", "");
    secureStorage.set("mygroup_info_json", "");
    secureStorage.remove("waitPreVote");

    secureStorage.remove("last_signature_" + current_campaign.id + "_" +"0");
    secureStorage.remove("last_signature_" + current_campaign.id + "_" +"1");
    secureStorage.remove("last_signature_" + current_campaign.id + "_" +"2");
    secureStorage.remove("last_signature_" + current_campaign.id + "_" +"3");
    secureStorage.remove("last_signature_" + current_campaign.id + "_" +"4");

    //for the admin
    secureStorage.set("enode_port", "");

    candidates_per_ballot_map = new Map();
    parties_map = new Map();
    group_categories_map = new Map();
    vacant_groups = {};

    campaign_info_json = {no_campaign: true};
    mygroup_info_json = {no_group: true};
    mygroup_index = MINC
}

/**
 * It obtains IPFS information with the hidden service. It is faster than the 'updateCurrentCampaign' method
 * @param {string} ipns
 * @param {string} onionAddr
 * @param {string} address
 * @param {boolean} new_campaign
 * @returns {Promise}
 */
function updateCurrentCampaignWithOnion(ipns, onionAddr, address, new_campaign) {
    let untested_ipns = ipns;

    return new Promise(resolve => {
        let request = new XMLHttpRequest();
        request.addEventListener("load", function () {
            if (this.responseText.startsWith("{")) {
                //Verifying the signature
                let aux_ipfs_info_json = JSON.parse(this.responseText);
                if (!verifyCampaignIPFSInfoSignature(aux_ipfs_info_json, address)) {
                    log("Wrong signature for the IPFS info of the campaign");
                    resolve();
                    return
                }

                let jsonObj = JSON.parse(this.responseText);
                let profileJSON = jsonObj.profile;
                let partiesJSON = jsonObj.parties;
                let gcategoriesJSON = jsonObj.gcategories;
                let candidates0JSON = jsonObj.candidates0;
                let candidates1JSON = jsonObj.candidates1;
                let candidates2JSON = jsonObj.candidates2;
                let candidates3JSON = jsonObj.candidates3;
                let candidates4JSON = jsonObj.candidates4;

                if (profileJSON.ipns != untested_ipns) {
                    if(new_campaign){
                        toast(klang.different_ipfs, 2500);
                    }
                    resolve();
                    return
                }

                current_campaign = {};
                current_campaign.id = profileJSON.id;
                current_campaign.name = profileJSON.name;
                current_campaign.ipns = profileJSON.ipns;
                current_campaign.description = profileJSON.description;
                current_campaign.country = profileJSON.country;
                current_campaign.period = profileJSON.period;
                current_campaign.image = profileJSON.image;
                current_campaign.link = profileJSON.link;
                current_campaign.address = profileJSON.address;
                current_campaign.contract = profileJSON.contract;
                current_campaign.regexp = profileJSON.regexp;
                current_campaign.certificate_authority = profileJSON.certificate_authority;
                current_campaign.rounds = profileJSON.rounds;
                current_campaign.onion = profileJSON.onion;
                current_campaign.mgz = profileJSON.mgz;

                let stored_campaign = JSON.parse(JSON.stringify(current_campaign));
                stored_campaign.stored = true;
                secureStorage.set("current_campaign", JSON.stringify(stored_campaign));

                if (new_campaign){
                    clearBackups()
                }

                if (candidates0JSON) {
                    secureStorage.set("candidates_ipfs_page_0", JSON.stringify(candidates0JSON))
                }
                if (candidates1JSON) {
                    secureStorage.set("candidates_ipfs_page_1", JSON.stringify(candidates1JSON))
                }
                if (candidates2JSON) {
                    secureStorage.set("candidates_ipfs_page_2", JSON.stringify(candidates2JSON))
                }
                if (candidates3JSON) {
                    secureStorage.set("candidates_ipfs_page_3", JSON.stringify(candidates3JSON))
                }
                if (candidates4JSON) {
                    secureStorage.set("candidates_ipfs_page_4", JSON.stringify(candidates4JSON))
                }
                if (partiesJSON) {
                    secureStorage.set("parties_ipfs_page", JSON.stringify(partiesJSON))
                }
                if (gcategoriesJSON) {
                    secureStorage.set("group_categories_ipfs_page", JSON.stringify(gcategoriesJSON))
                }
            } else if(new_campaign){
                toast(klang.error, 1500)
            }
            resolve()
        });

        request.addEventListener("error", function () {
            log("Error while obtaining IPFS data with the informed onion address");
            if(new_campaign){
                checkTorBrowser()
            }
            resolve()
        });

        let host = adequateHost(onionAddr);
        sendRequest(request, host + "/queryGetCampaignIPFSInfo")
    })
}

/**
 * Fill in the fields with current_campaign data
 */
function openCampaignInfoPage() {
    if (current_campaign.name){
        document.title = current_campaign.name
    }
    header_info.innerHTML = "";

    if (current_campaign.id && wallet && wallet.address && !campaign_info_json.no_campaign
        && !campaign_info_json.stored) {
        //Entered, requested and register buttons
        if (secureStorage.get("participation_requested_" + current_campaign.id) && (mygroup_index == MINR ||
                mygroup_index == MINC || isNaN(mygroup_index))) { //participation requested (no response from server)
            if (parseInt(secureStorage.get("participation_requested_" + current_campaign.id)) +
                (MINUTES_TO_REGISTER_VOTER * 60 * 1000) < Date.now()) { //remove the "requested" notice after 1 hour
                secureStorage.remove("participation_requested_" + current_campaign.id);
                header_info.innerHTML = enter_campaign_button_html3.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
                participate_container.innerHTML = klang.register_voter
            } else {
                header_info.innerHTML = enter_campaign_button_html1.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
                enter_campaign_container.innerHTML = klang.requested
            }
        } else if (secureStorage.get("participation_requested_" + current_campaign.id)) { //participation request (response)
            secureStorage.remove("participation_requested_" + current_campaign.id);
            header_info.innerHTML = enter_campaign_button_html2.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
            entered_container.innerHTML = klang.entered
        } else if (mygroup_index == MINR) { //not registered
            header_info.innerHTML = enter_campaign_button_html3.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
            if (campaign_info_json.stopping_accession_to_groups != "stopped"){ // show participate button
                participate_container.innerHTML = klang.register_voter;
                sleep(500).then(function () {
                    participate_button.addEventListener("click", registerVoter)
                })
            } else{ //impossible to register
                participate_container.innerHTML = klang.not_entered
            }
        } else if (mygroup_index == MINC || isNaN(mygroup_index)) {
            header_info.innerHTML = enter_campaign_button_html1.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
            enter_campaign_container.innerHTML = klang.not_entered
        } else {
            header_info.innerHTML = enter_campaign_button_html2.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
            entered_container.innerHTML = klang.entered
        }

        //Manage and Collaborate buttons
        if (isOwner() && using_local_server) {
            header_info.innerHTML = campaign_admin_button_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "") +
                header_info.innerHTML;
            campaign_admin_container.innerHTML = klang.admin;

            campaign_admin_candidates_li.style.display = "";
            campaign_admin_parties_li.style.display = "";
            campaign_admin_ballots_li.style.display = "";
            campaign_admin_groups_li.style.display = "";

            //Adding listener to the modal7 trigger(admin campaign page)
            campaign_admin_button.addEventListener("click", onAdminButtonClick)
        } else if (using_local_server) {
            header_info.innerHTML = collaborate_button_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "") +
                header_info.innerHTML;
            collaborate_container.innerHTML = klang.collaborate;
            campaign_admin_title.innerHTML = klang.collaborate_title;

            //Adding listener to the modal7 trigger(admin campaign page)
            collaborate_button.addEventListener("click", function () {
                campaign_admin_candidates_li.style.display = "none";
                campaign_admin_parties_li.style.display = "none";
                campaign_admin_ballots_li.style.display = "none";
                campaign_admin_groups_li.style.display = "none"
            })
        }
    } else {
        header_info.innerHTML = enter_campaign_button_html1.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
        enter_campaign_container.innerHTML = klang.not_entered
    }

    content_page.innerHTML = open_campaign_page_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");

    let no_image_icon = no_image_icon_url.innerHTML.replace("<!--[CDATA[", "").replace("-->", "");
    campaign_card_image.src = (current_campaign.image ? current_campaign.image : no_image_icon);
    current_campaign_name_container.innerHTML = current_campaign.name;
    current_campaign_country_container.innerHTML = current_campaign.country;
    current_campaign_description_container.innerHTML = (current_campaign.description ? current_campaign.description : "-");
    current_campaign_period_container.innerHTML = (current_campaign.period ? current_campaign.period : "");
    current_campaign_link_container.innerHTML = (current_campaign.link ? current_campaign.link : "-");
    current_campaign_id_container.innerHTML = current_campaign.id;
    current_chainid_container.innerHTML = "1151985" + current_campaign.id;
    current_ipns_address_container.innerHTML = current_campaign.ipns;
    current_ethereum_address_container.innerHTML = current_campaign.address;
    current_contract_address_container.innerHTML = current_campaign.contract;
    current_certificate_authority_container.innerHTML = current_campaign.certificate_authority;
    current_rounds_container.innerHTML = current_campaign.rounds;
    current_onion_container.innerHTML = current_campaign.onion;
    current_regexp_container.innerHTML = current_campaign.regexp;
    current_mgz_container.innerHTML = current_campaign.mgz;

    languageRelatedSettingsForCampaignInfoPage();

    //Address to be used as group chairperson
    address_to_inform_label.innerHTML = wallet.address;
    your_tor_label.innerHTML = my_onion_address;

    //To connect to other nodes
    your_enode_label.innerHTML = enode_without_ip;

    //Link to share the campaign
    share_link_input.value = "https://kantpoll.com/home?ipns=" + current_campaign.ipns +
        "&onion=" + current_campaign.onion + "&address=" + current_campaign.address +
        (secureStorage.get("observers_onions") ? "&observers=" + secureStorage.get("observers_onions") : "");
    share_link.addEventListener("click", function () {
        if (using_android_app) {
            Android.scrollTop()
        }
    });

    //initialize this collapsible
    $('#campaign_collapsible').collapsible()
}

/**
 * Update some variables related to the campaign management
 */
function onAdminButtonClick(){
    if (campaign_info_json.how_many_ballots > 0) {
        let current_ballot = campaign_info_json.current_ballot;
        let ballot = campaign_info_json.ballots[current_ballot];
        current_ballot_mark.innerHTML = ballot.id;
        current_ballot_status.innerHTML = ballot.closed ? klang.round_closed : ballot.stopped ?
            klang.round_stopped : klang.round_active
    }

    if (!enode_without_ip){
        whatIsMyEnode()
    }
    if (!my_onion_address){
        whatIsMyOnionAddress()
    }

    if (the_contract){
        displayAdminCheckboxes()
    } else{
        log("The contract is not ready. Loading checkboxes again in 3 seconds.");
        sleep(3000).then(function () {
            if (the_contract){
                displayAdminCheckboxes()
            }
        })
    }

    updateCampaignInfo().then(function () {
        loadGroupCategories();
        loadParties();
        loadCandidates();
        displayGroupCategoriesSelect()
    })
}

/**
 * Using the klang script
 */
function languageRelatedSettingsForCampaignInfoPage() {
    campaign_basic_info_container.innerHTML = klang.campaign_basic_info;
    campaign_name_container.innerHTML = klang.name + ":&nbsp;&nbsp;";
    campaign_description_container.innerHTML = klang.description + ":&nbsp;&nbsp;";
    campaign_country_container.innerHTML = klang.country + ":&nbsp;&nbsp;";
    campaign_period_container.innerHTML = klang.period + ":&nbsp;&nbsp;";
    external_link_container.innerHTML = klang.external_link + ":&nbsp;&nbsp;";
    campaign_technical_info_container.innerHTML = klang.campaign_technical_info;
    campaign_id_container.innerHTML = klang.campaign_id + ":&nbsp;&nbsp;";
    chainid_container.innerHTML = klang.chainid + ":&nbsp;&nbsp;";
    ipns_address_container.innerHTML = klang.ipns_address + ":&nbsp;&nbsp;";
    ethereum_address_container.innerHTML = klang.ethereum_address + ":&nbsp;&nbsp;";
    contract_address_container.innerHTML = klang.contract_address + ":&nbsp;&nbsp;";
    certificate_authority_container.innerHTML = klang.certificate_authority + ":&nbsp;&nbsp;";
    rounds_container.innerHTML = klang.votation_rounds_selected_option + ":&nbsp;&nbsp;";
    onion_container.innerHTML = klang.onion_address + ":&nbsp;&nbsp;";
    regexp_container.innerHTML = klang.regexp + ":&nbsp;&nbsp;";
    mgz_container.innerHTML = klang.maximum_group_size + ":&nbsp;&nbsp;";
    share_link.innerHTML = klang.share;
}

/**
 * It displays the canCancel and DisableCandidate links
 */
function displayAdminCheckboxes(){
    if (the_contract.canCancel()) {
        $('#can_cancel_checkbox').prop('checked', 'checked')
    } else {
        $('#can_cancel_checkbox').prop('checked', '')
    }

    if (the_contract.disableCandidateLink()) {
        $('#disable_candidate_link_checkbox').prop('checked', 'checked')
    } else {
        $('#disable_candidate_link_checkbox').prop('checked', '')
    }
}

/**
 * In order to create groups
 */
function displayGroupCategoriesSelect() {
    group_categories_select.innerHTML = "";
    let keys = group_categories_map.keys();
    let values = group_categories_map.values();
    let number_categories = group_categories_map.size;

    if (number_categories > 0) {
        let i = 0;
        let key = {};
        let value = {};
        do {
            value = values.next();
            key = keys.next();

            if (!key.done) {
                let id = key.value;
                group_categories_select.innerHTML += group_categories_select_item_html.innerHTML
                    .replace("<!--[CDATA[", "").replace("-->", "").replace("[[id_value]]", i)
                    .replace("[[id_text]]", id)
            }
            i++
        }
        while (!key.done);

        $("#group_categories_select").material_select()
    }
}

/**
 * Kill it after a deadline
 * @param {boolean} cancel_toast
 */
function killPreloader(cancel_toast) {
    if (document.getElementById("preloader_title")) {
        if (!cancel_toast){
            toast(klang.time_limit_exceeded, 2500);
        }
        sleep(2500).then(function () {
            window.location.href = window.location.href.split("?")[0].replace("#", "")
        })
    }
}

/**
 * This function is called when searching or creating a campaign
 * @param {string} title
 */
function showPreloader(title) {
    header_title.innerHTML = "";
    header_info.innerHTML = "";
    if (using_android_app) {
        Android.scrollTop()
    }
    content_page.innerHTML = preloader_html.innerHTML.replace("<!--[CDATA[", "").replace("-->", "")
    preloader_title.innerHTML = title;
}

/**
 * Create the files, publish then on IPFS, and insert the campaign into the blockchain
 * @param {string} campaign_name_input_value
 * @param {string} campaign_description_input_value
 * @param {string} image_input_value
 * @param {string} campaign_external_page_input_value
 * @param {string} country_select_value
 * @param {string} initial_date_input_value
 * @param {string} final_date_input_value
 * @param {number} maximum_group_size_value
 * @param {string} prefix_voters_input_value
 * @param {string} suffix_voters_input_value
 * @param {string} rounds_select_value
 */
function createCampaign(campaign_name_input_value, campaign_description_input_value, image_input_value,
                        campaign_external_page_input_value, country_select_value, initial_date_input_value,
                        final_date_input_value, maximum_group_size_value, prefix_voters_input_value,
                        suffix_voters_input_value, rounds_select_value) {

    //Checking if some options were set
    if (!wallet.address) {
        toast(klang.no_vault_opened, 3000);
        return
    }
    if (!campaign_name_input_value) {
        toast(klang.campaign_must_have_name, 3000);
        return
    }
    if (!maximum_group_size_value) {
        toast(klang.error + " - " + klang.maximum_group_size, 3000);
        return
    }
    if (!my_onion_address) {
        toast(klang.error + " - " + klang.onion_address, 3000);
        whatIsMyOnionAddress();
        return
    }

    //Closing the modal and displaying the preloader
    $('#modal6').modal('close');
    logoContainerClick();
    showPreloader(klang.wait_few_minutes);
    setTimeout(killPreloader, 1800000); //30 minutes!

    //Preparing the server for the next campaign
    clearServerVariables();
    //To stop to provide and get info about the campaign
    clearIntervals();

    current_campaign = {};
    current_campaign.id = generateCampaignId();
    current_campaign.address = wallet.address;
    current_campaign.name = campaign_name_input_value;
    current_campaign.description = campaign_description_input_value;
    current_campaign.image = image_input_value;
    current_campaign.link = campaign_external_page_input_value;
    current_campaign.country = country_select_value;
    current_campaign.certificate_authority = getCertificateAuthority();
    current_campaign.period = initial_date_input_value + " - " + final_date_input_value;
    current_campaign.rounds = (rounds_select_value !== "" ? rounds_select_value : 1);
    current_campaign.onion = my_onion_address;
    current_campaign.mgz = maximum_group_size_value;

    if (prefix_voters_input_value !== "" && prefix_voters_input_value !== undefined) {
        current_campaign.regexp = "^" + prefix_voters_input_value
    } else {
        current_campaign.regexp = suffix_voters_input_value + "$"
    }

    createIPNSKey(continueCampaignCreation)
}

/**
 * Now we will set the current_campaign.ipns
 * @param {function) callback
 */
function createIPNSKey(callback){
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText != ERROR_STRING && this.responseText != "") {
            let request2 = new XMLHttpRequest();
            request2.addEventListener("load", function () {
                if (this.responseText != ERROR_STRING && this.responseText != "") {
                    current_campaign.ipns = this.responseText;
                    if (callback){
                        callback()
                    }
                }
            });
            sendRequest(request2, "http://" + localhost127 + ":1985/queryGetIPNS?id=" + current_campaign.id)
        }
    });
    sendRequest(request, "http://" + localhost127 + ":1985/queryAddIPNSKey?id=" + current_campaign.id)
}

/**
 * Called after obtaining the IPNS
 */
function continueCampaignCreation() {
    setCampaignContract();
    startCampaignOnServer();
    initBlockchain(function(){
        createEmptyFiles();
        insertCampaign()
    }, TRUE_STRING)
}

/**
 * It initialize the variable mgz, which is used to interact with the Ethereum contract
 */
function initMgzOnServer(){
    sendSimpleRequest("http://" + localhost127 + ":1985/queryInitMgz?dir=" + getDir())
}

/**
 * It adds some content into a file and into the IPFS network
 *
 * @param {string} content
 * @param {string} name
 * @param {function) callback
 */
function addIPFS(content, name, callback) {
    content = encodeURIComponent(content);

    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (callback) {
            callback(this)
        }
    });
    sendUnescapedRequest(request, "http://" + localhost127 + ":1985/queryAddProfile?content=" + content +
        "&filename=" + name)
}

/**
 * Parties, candidates per ballot, group categories, and groups files
 */
function createEmptyFiles() {
    addIPFS("empty", "parties", null);
    addIPFS("empty", "candidates_ballot0", null);
    addIPFS("empty", "candidates_ballot1", null);
    addIPFS("empty", "candidates_ballot2", null);
    addIPFS("empty", "candidates_ballot3", null);
    addIPFS("empty", "candidates_ballot4", null);
    addIPFS("empty", "group_categories", null)
}

/**
 * Verify if the voter meets the requirements, then send a request to register him/her
 */
function registerVoter() {
    let user = localStorage.getItem("user");
    if (!user || !wallet.address) {
        toast(klang.no_vault_opened, 3000);
        return
    }
    if (!current_campaign.id || isEmpty(campaign_info_json)) {
        toast(klang.no_campaign_opened, 3000);
        return
    }
    if (!mygroup_info_json.no_group || mygroup_index == MIRE) {
        toast(klang.voter_already_registered, 3000);
        return
    }

    if (checkVoterRequirements()) {
        call_after_captcha = function () {
            //Display "requested" message
            secureStorage.set("participation_requested_" + current_campaign.id, Date.now());
            if (current_page == klang.campaign_info){
                sleep(1500).then(campaignInfoClick)
            }
        };

        sendRegisterVoterMessage()
    } else {
        toast(klang.must_meet_requirements, 3000)
    }
}

/**
 * It displays different messages depending on whether the voter can cancel his or her vote, or not.
 */
function deleteVotePage() {
    let current_ballot = campaign_info_json.current_ballot;
    if (!secureStorage.get("my_vote_" + current_campaign.id + "_" + campaign_info_json.current_ballot)) {
        vote_deletion_message.innerHTML = klang.no_vote_to_delete;
        delete_vote_button.style.visibility = "hidden"
    } else if (campaign_info_json.can_cancel && campaign_info_json.ballots[current_ballot].closed) {
        vote_deletion_message.innerHTML = klang.delete_registered_vote;
        delete_vote_button.style.visibility = ""
    } else {
        vote_deletion_message.innerHTML = klang.cant_delete_vote;
        delete_vote_button.style.visibility = "hidden"
    }
}

/**
 * It deletes the last vote sent
 */
function deleteVote() {
    call_after_captcha = logoClick;

    let my_vote = JSON.parse(secureStorage.get("my_vote_" +
        current_campaign.id + "_" + campaign_info_json.current_ballot));
    let candidate = my_vote.candidate;
    let number = (candidate + 1) * -1;
    sendPreVoteMessage(number)
}

/**
 * The contract to interact with this campaign
 */
function openCampaignContract() {
    if (current_campaign.contract && current_campaign.mgz) {
        let campaign_contract = '';
        switch (current_campaign.mgz) {
            case "3":
                campaign_contract = CAMPAIGN_CONTRACT_MGZ3;
                break;
            case "27":
                campaign_contract = CAMPAIGN_CONTRACT_MGZ27;
                break;
            case "81":
                campaign_contract = CAMPAIGN_CONTRACT_MGZ81
        }

        let generic_contract = web3.eth.contract(campaign_contract);
        the_contract = generic_contract.at(current_campaign.contract);
        //In order to execute the contract methods, we need to set the default account
        web3.eth.defaultAccount = wallet.address.toLowerCase();

        setCampaignContract()
    }
}

/**
 * In order to choose the adequate go binding to the contract
 */
function setCampaignContract(){
    sendSimpleRequest("http://" + localhost127 + ":1985/querySetCampaignContract?address="
        + current_campaign.contract + "&mgz=" + current_campaign.mgz)
}

/**
 * For now, the campaign id is just the timestamp
 * @returns {string}
 */
function generateCampaignId() {
    return "" + Math.floor(Date.now() / 100)
}

/**
 * Create a contract representing the campaign in the blockchain
 */
function insertCampaign() {
    if (isEmpty(web3)) {
        instantiateWeb3()
    }
    //First, unlock the account (in the case it was not unlocked by runGeth)
    web3.personal.unlockAccount(wallet.address.toLowerCase(), getPwd(), 10000000); // > 3 months
    //Wait a few seconds, then create the contract
    sleep(TIME_TO_CREATE_CONTRACT).then(function () {
        let rounds = current_campaign.rounds;

        clearCreateCampaignFields();

        let contract_data = '';
        let campaign_contract = '';
        switch (current_campaign.mgz) {
            case "3":
                contract_data = CONTRACT_DATA_MGZ3;
                campaign_contract = CAMPAIGN_CONTRACT_MGZ3;
                break;
            case "27":
                contract_data = CONTRACT_DATA_MGZ27;
                campaign_contract = CAMPAIGN_CONTRACT_MGZ27;
                break;
            case "81":
                contract_data = CONTRACT_DATA_MGZ81;
                campaign_contract = CAMPAIGN_CONTRACT_MGZ81
        }

        let campaignContract = web3.eth.contract(campaign_contract);
        campaignContract.new(
            rounds,
            {
                from: wallet.address.toLowerCase(),
                data: contract_data,
                gas: '130000000' // < 0x8000000 (gas limit)
            }, function (e, contract) {
                if (e){
                    console.log(e)
                }

                showPreloader(klang.waiting_contract_mined);
                if (typeof contract.address !== 'undefined') {
                    log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);

                    the_contract = contract;
                    current_campaign.contract = contract.address;

                    //Re-inserting campaign profile page into IPFS
                    let content_url = JSON.stringify(current_campaign);

                    let callback = function (the_request) {
                        if (the_request.responseText != ERROR_STRING && the_request.responseText != "") {
                            //Since it is the last step of the campaign creation, update te current campaign
                            //to display it to the user
                            updateCurrentCampaign(current_campaign.ipns).then(function () {
                                clearBackups();
                                window.location.href = window.location.href.split("?")[0].replace("#", "")
                            })
                        }
                    };

                    addIPFS(content_url, "profile", callback)
                }
            })
    })
}

/**
 * It cleans the variables related to the campaign, groups and voters
 */
function clearServerVariables() {
    sendSimpleRequest("http://" + localhost127 + ":1985/queryCleanVariables")
}

/**
 * Check whether the voter meets the requirements or not (testing a regular expression)
 * @param {string} user
 * @returns {boolean}
 */
function checkVoterRequirements(user) {
    if (!user) {
        //This method can be called to register the current user, or to register users via Tor messages request
        user = localStorage.getItem("user");

        if (!user) {
            return false
        }
    }

    if (current_campaign.regexp) {
        let regexp = new RegExp(current_campaign.regexp.split("/")[1], current_campaign.regexp.split("/")[2]);
        if (regexp.test(user)) {
            return true
        }
    }
    return false
}

/**
 * Check if the user is the owner of the current campaign
 * @returns {boolean}
 */
function isOwner() {
    if (current_campaign.address && wallet.address) {
        return (current_campaign.address == wallet.address)
    }
    return false
}

/**
 * The variable vacant_groups contains group categories whose groups contain vacant positions
 */
function updateVacantGroups() {
    if (!the_contract){
        return
    }

    vacant_groups = {};

    let how_many_groups = the_contract.howManyGroups().toNumber();
    let mgz = the_contract.mgz().toNumber();
    for (let i = 0; i < how_many_groups; i++) {
        let group = the_contract.groups(i);
        let category_index = group[1].toNumber();
        let size = group[2].toNumber();
        if (size < mgz) {
            if (vacant_groups[category_index]) {
                vacant_groups[category_index] += i + ","
            } else {
                vacant_groups[category_index] = i + ","
            }
        }
    }
}

/**
 * It counts the votes for the candidates
 * @returns bool - false if the ballot is not closed
 */
function commitVotes() {
    let current_ballot = campaign_info_json.current_ballot;
    let ballot = campaign_info_json.ballots[current_ballot];
    if (!ballot.closed){
        toast(klang.round_not_closed, 2500);
        return false
    }

    let how_many_groups = the_contract.howManyGroups().toNumber();
    for (let group = 0; group < how_many_groups; group++) {
        let chairperson = the_contract.groups(group)[0];
        if (wallet.address.toLowerCase() == chairperson) {
            let current_ballot = the_contract.currentBallot().toNumber();
            let mgz = the_contract.mgz().toNumber();

            for (let i = 0; i < mgz; i++) {
                the_contract.commitVotationPerPosition(current_ballot, group, i);
                the_contract.commitVotationStatisticsPerPosition(current_ballot, group, i)
            }
        }
    }

    return true
}

/**
 * It inserts candidates into blockchain
 * @param {string} insert_candidates_textarea_value
 */
function insertCandidates(insert_candidates_textarea_value) {
    if (insert_candidates_textarea_value && the_contract) {
        let number_ballots = the_contract.howManyBallots().toNumber();
        if (number_ballots == 0) {
            toast(klang.must_create_ballot, 3000);
            return
        }

        let inserted = false;
        let current_ballot = the_contract.currentBallot().toNumber();
        if (inserted_ballot != 0 && inserted_ballot != current_ballot){
            toast(klang.wait_round, 3500);
            return
        }

        let candidates = insert_candidates_textarea_value.split("\n");
        let aux_stored_content_json = (secureStorage.get("candidates_ipfs_page_" + current_ballot) ?
            JSON.parse(secureStorage.get("candidates_ipfs_page_" + current_ballot)) : {});
        let stored_content_json = (aux_stored_content_json.data ? aux_stored_content_json.data : {});
        let stored_content = (!isEmpty(stored_content_json) ? JSON.stringify(stored_content_json) : "");

        let content_url = "{";
        let position = the_contract.howManyCandidatesInBallot(current_ballot).toNumber();
        for (let i = 0; i < candidates.length; i++) {
            let candidate_text = candidates[i];
            let items = candidate_text.split(";");
            //Simply ignore the wrong candidate insertions
            if (items.length != 4) {
                continue
            }
            let website = items[0];
            let name = items[1];
            let party = items[2];
            let photo = items[3];

            //Avoiding equal indexes
            if (Object.keys(stored_content_json).includes(website)) {
                continue
            }

            if (website.length > 0 && name.length > 0 && party.length > 0 && photo.startsWith("http")) {
                content_url += "\"" + website + "\":{\"name\":\"" + name + "\", \"party\":\"" + party +
                    "\",\"photo\":\"" + photo + "\"},";

                //Call the contract to insert the candidate
                the_contract.addCandidateIntoBallot(current_ballot, position, web3_aux.fromAscii(website));
                the_contract.iterateCandidatesCounter(current_ballot);
                position += 1;

                inserted = true
            }
        }

        if (inserted) {
            if (stored_content && stored_content.startsWith("{")) {
                //Replacing the last '}' with ','
                content_url = stored_content.replace(/}([^}]*)$/, ',$1') + content_url.substring(1)
            }
            content_url = content_url.substring(0, content_url.length - 1) + "}";

            let aux_content_url = "{\"ballot\":\"" + current_ballot + "\",\"data\":" + content_url + "}";
            secureStorage.set("candidates_ipfs_page_" + current_ballot, aux_content_url);

            let callback = function () {
                sleep(25000).then(updateCampaignInfo).then(loadCandidates)
            };

            addIPFS(aux_content_url, "candidates_ballot" + current_ballot, callback)
        } else {
            toast(klang.error, 1500);
            return
        }
    } else {
        toast(klang.error, 1500);
        return
    }
    clearAdminCampaign()
}

/**
 * It inserts parties into campaign's IPNS page
 * @param {string} insert_parties_textarea_value
 */
function insertParties(insert_parties_textarea_value) {
    let parties = insert_parties_textarea_value.split("\n");
    let stored_content = secureStorage.get("parties_ipfs_page");
    let stored_content_json = (stored_content ? JSON.parse(stored_content) : {});

    let content_url = "{";
    if (insert_parties_textarea_value) {
        for (let i = 0; i < parties.length; i++) {
            let party_text = parties[i];
            let items = party_text.split(";");
            //Simply ignore the wrong party insertions
            if (items.length != 3) {
                continue
            }
            let name = items[0];
            let photo = items[1];
            let url = items[2];

            //Avoiding equal indexes
            if (Object.keys(stored_content_json).includes(name)) {
                continue
            }

            if (name.length > 0 && url.length > 0 && photo.startsWith("http")) {
                content_url += "\"" + name + "\":{\"url\":\"" + url + "\",\"photo\":\"" + photo + "\"},"
            }
        }

        if (stored_content && stored_content.startsWith("{")) {
            //Replacing the last '}' with ','
            content_url = stored_content.replace(/}([^}]*)$/, ',$1') + content_url.substring(1)
        }
        content_url = content_url.substring(0, content_url.length - 1) + "}";

        secureStorage.set("parties_ipfs_page", content_url);

        let callback = function () {
            sleep(5000).then(loadParties)
        };

        addIPFS(content_url, "parties", callback)
    } else {
        toast(klang.error, 1500);
        return
    }
    clearAdminCampaign()
}

/**
 * It inserts group categories into campaign's IPNS page (and the blockchain)
 * @param {string} insert_group_categories_textarea_value
 */
function insertGroupCategories(insert_group_categories_textarea_value) {
    let gcs = insert_group_categories_textarea_value.split("\n");
    let stored_content = secureStorage.get("group_categories_ipfs_page");
    let stored_content_json = (stored_content ? JSON.parse(stored_content) : {});
    let categories = [];

    let content_url = "{";
    if (insert_group_categories_textarea_value) {
        for (let i = 0; i < gcs.length; i++) {
            let gc_text = gcs[i];
            let items = gc_text.split(";");
            //Simply ignore the wrong party insertions
            if (items.length != 2) {
                continue
            }
            let id = items[0];
            let content = items[1];
            categories.push(id);

            //Avoiding equal indexes
            if (Object.keys(stored_content_json).includes(id)) {
                continue
            }
            if (id.length > 0 && id.length <= 32 && content.length > 0) {
                content_url += "\"" + id + "\":{\"content\":\"" + content + "\"},"
            }
        }

        if (the_contract) {
            categories.forEach(function (category) {
                the_contract.addGroupCategory(web3_aux.fromAscii(category))
            })
        }

        if (stored_content && stored_content.startsWith("{")) {
            //Replacing the last '}' with ','
            content_url = stored_content.replace(/}([^}]*)$/, ',$1') + content_url.substring(1)
        }
        content_url = content_url.substring(0, content_url.length - 1) + "}";

        secureStorage.set("group_categories_ipfs_page", content_url);

        let callback = function () {
            sleep(5000).then(loadGroupCategories)
        };

        addIPFS(content_url, "group_categories", callback)
    } else {
        toast(klang.error, 1500);
        return
    }
    clearAdminCampaign()
}

/**
 * Before inserting candidates, we should create a round, giving it a name and a type
 * @param {string} create_round_id_value
 */
function createRound(create_round_id_value) {
    if (!create_round_id_value) {
        toast(klang.empty_fields, 2500);
        return
    }

    let how_many_ballots = the_contract.howManyBallots().toNumber();
    the_contract.addBallot(web3_aux.fromAscii(create_round_id_value));
    the_contract.defineCurrentMessage(web3_aux.fromAscii(create_round_id_value + " - " + current_campaign.id));
    the_contract.defineCurrentBallot(how_many_ballots);

    //Inserting an empty candidates page for this round
    if (how_many_ballots > 0) {
        addIPFS("empty", "candidates_ballot" + how_many_ballots, null)
    }

    current_ballot_mark.innerHTML = create_round_id_value;
    current_ballot_status.innerHTML = klang.round_active;

    //Cleaning up the form
    clearAdminCampaign();
    inserted_ballot = how_many_ballots
}

/**
 * Adding N groups into the blockchain
 * @param {string} how_many_groups_value
 * @param {string} groups_chairperson_value
 * @param {string} gc_index
 */
function createGroups(how_many_groups_value, groups_chairperson_value, gc_index) {
    if (Date.now() > last_created_groups_time + WAIT_TO_CREATE_GROUPS) {
        last_created_groups_time = Date.now()
    } else {
        toast(klang.wait + " (" + (WAIT_TO_CREATE_GROUPS / 1000) + "s)", 2000);
        return
    }

    let how_many = how_many_groups_value;
    let chairperson = groups_chairperson_value;

    if (chairperson == "") {
        chairperson = the_contract.chairperson()
    }

    if (!how_many || isNaN(how_many)) {
        toast(klang.insert_number_error, 2000);
        return
    }

    let i = 0;
    for (; i < how_many; i++) {
        the_contract.addGroup(chairperson, gc_index)
    }
}

/**
 * It is intended to give group administrators the resources needed to send voter's votes
 * @param {string} transfer_finney_amount_value_value
 * @param {string} transfer_finney_account_value_value
 */
function transferFinney(transfer_finney_amount_value_value, transfer_finney_account_value_value) {
    let wei_amount = web3.toWei(transfer_finney_amount_value_value, "finney");
    web3.eth.sendTransaction({
        from: wallet.address.toLowerCase(), to: transfer_finney_account_value_value,
        value: wei_amount
    })
}

/**
 * In order to be able to send a message to the server
 */
function openCaptchaModal(to_campaign_creator) {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText == "" || this.responseText == ERROR_STRING) {
            $("#modal10").modal("close");
            toast(klang.cant_get_captcha, 3000)
        } else if (this.responseText.indexOf("script") == -1) {
            //Just to avoid an old form of injection
            captcha_img.src = this.responseText;
        }
    });

    captcha_input.value = "";
    captcha_img.src = "//:0";
    $("#modal10").modal("open");

    let onionAddr = (to_campaign_creator ? current_campaign.onion : getOnionAddress());
    sendRequest(request, adequateHost(onionAddr)
        + "/queryGenerateCaptcha")
}

/**
 * Send the votes to the blockchain using the server
 */
function publishCampaign() {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText.startsWith(COMPLETE_STRING)) {
            toast(klang.success, 2500);
        }
    });
    sendRequest(request, "http://" + localhost127 + ":1985/queryPublishCampaign")
}

/**
 * Send the votes to the blockchain using the server
 */
function sendVotes() {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText.startsWith(COMPLETE_STRING)) {
            toast(klang.success, 2500);
        }
    });
    sendRequest(request, "http://" + localhost127 + ":1985/querySendVotes")
}

/**
 * Create a XMLHttpRequest and then send a GET request
 * @param url
 */
function sendSimpleRequest(url) {
    let request = new XMLHttpRequest();
    sendRequest(request, url)
}

/**
 * It adds a request header (if necessary) then sends the request
 * @param {XMLHttpRequest} request
 * @param {string} url
 */
async function sendRequest(request, url) {
    url = encodeURI(url);
    sendUnescapedRequest(request, url)
}

/**
 * It creates a passphrase and then encrypts the request
 * @param request {XMLHttpRequest}
 * @param url {string}
 */
async function sendUnescapedRequest(request, url) {
    let passphrase = randomString(16);
    sendUnescapedRequestWithPassphrase(request, url, passphrase)
}

/**
 * It sends the request to the adequate host
 * @param request {XMLHttpRequest}
 * @param url {string}
 * @param passphrase {string}
 */
async function sendUnescapedRequestWithPassphrase(request, url, passphrase) {
    if (url.startsWith("http://" + localhost127 + ":1985/query") && secureStorage.get("adminSessionCode") &&
        !url.startsWith("http://" + localhost127 + ":1985/queryNewSession") ) {

        let host = url.split(":1985/")[0];
        let query = url.split(":1985/")[1];
        let encrypted_query = await AESEncrypt(secureStorage.get("adminSessionCode"), query);
        let encrypted_query_hex = web3_aux.fromAscii(encrypted_query);

        url = host + ":1985/" + encrypted_query_hex;
        request.open('GET', url, true);
        request.setRequestHeader("Encrypted", TRUE_STRING)

    } else if ((url.indexOf(":1988/") > 0) && campaign_info_json.chairperson_tor
        && campaign_info_json.chairperson_tor.public_key){
        let parts = url.split(":1988/");
        let host = parts[0];
        if (parts.length > 1){
            let query = parts[1];
            let encrypted_query = await AESEncrypt(passphrase, query);
            let encrypted_query_hex = web3_aux.fromAscii(encrypted_query);

            url = host + ":1988/" + encrypted_query_hex;
            let pub_pem = campaign_info_json.chairperson_tor.public_key;
            if (mygroup_info_json.chairperson_tor && mygroup_info_json.chairperson_tor.onion &&
                url.indexOf(mygroup_info_json.chairperson_tor.onion) >= 0){
                pub_pem = mygroup_info_json.chairperson_tor.public_key;
            }
            let key = await importRSAPublicKey(pub_pem);
            let iv = crypto.getRandomValues(new Uint8Array(16));
            let encrypted_passphrase = await RSAEncrypt(iv, key, passphrase);
            let encrypted_passphrase_hex = web3_aux.fromAscii(arrayBufferToText(encrypted_passphrase));

            request.open('GET', url + THE_AND + encrypted_passphrase_hex, true);
        } else{
            request.open('GET', url, true);
        }
    } else if ((url.indexOf(".onion/") > 0)){
        let parts = url.split(".onion/");
        let host = parts[0];
        let pub_pem = "";

        if (campaign_info_json.chairperson_tor && campaign_info_json.chairperson_tor.public_key){
            pub_pem = campaign_info_json.chairperson_tor.public_key;
            if (mygroup_info_json.chairperson_tor && mygroup_info_json.chairperson_tor.onion &&
                url.indexOf(mygroup_info_json.chairperson_tor.onion) >= 0){
                pub_pem = mygroup_info_json.chairperson_tor.public_key;
            }
        }

        url = host + ".onion/";
        if (!using_tor_browser && !using_android_app && !using_local_server && secureStorage.get("tor2web")){
            url = url.replace("http://", "https://").replace(".onion", secureStorage.get("tor2web"))
        }

        if (parts.length > 1 && pub_pem){
            let query = parts[1];
            let encrypted_query = await AESEncrypt(passphrase, query);
            let encrypted_query_hex = web3_aux.fromAscii(encrypted_query);

            url += encrypted_query_hex;


            let key = await importRSAPublicKey(pub_pem);
            let iv = crypto.getRandomValues(new Uint8Array(16));
            let encrypted_passphrase = await RSAEncrypt(iv, key, passphrase);
            let encrypted_passphrase_hex = web3_aux.fromAscii(arrayBufferToText(encrypted_passphrase));

            request.open('GET', url + THE_AND + encrypted_passphrase_hex, true);
        } else if (parts.length > 1){
            request.open('GET', url + parts[1], true)
        } else {
            request.open('GET', url, true)
        }
    } else{
        request.open('GET', url, true)
    }
    request.send()
}


/**
 * It sends a request using the informed RSA public key
 * @param {XMLHttpRequest} request
 * @param {string} url
 * @param {string} pub_key
 * @returns {Promise<void>}
 */
async function sendRequestToObserver(request, url, pub_key){
    if (!pub_key){
        return
    }
    let parts = url.split(".onion/");
    let host = parts[0];
    let query = parts[1];
    let passphrase = randomString(16);
    let encrypted_query = await AESEncrypt(passphrase, query);
    let encrypted_query_hex = web3_aux.fromAscii(encrypted_query);

    url = host + ".onion/" + encrypted_query_hex;
    if (!using_tor_browser && !using_android_app && !using_local_server && secureStorage.get("tor2web")){
         url = url.replace("http://", "https://").replace(".onion", secureStorage.get("tor2web"))
    }

    let key;
    if (pub_key.startsWith("{")){
        key = await window.crypto.subtle.importKey(
            "jwk",
            JSON.parse(pub_key),
            {
                name: "RSA-OAEP",
                hash: {name: "SHA-256"},
            },
            false,
            ["encrypt"]
        )
    } else{ //Probably, this will never happen
        key = await importRSAPublicKey(pub_key)
    }
    let iv = crypto.getRandomValues(new Uint8Array(16));
    let encrypted_passphrase = await RSAEncrypt(iv, key, passphrase);
    let encrypted_passphrase_hex = web3_aux.fromAscii(arrayBufferToText(encrypted_passphrase));

    request.open('GET', url + THE_AND + encrypted_passphrase_hex, true);
    request.send()
}

/**
 * Only one admin session may interact with the server
 */
function setSessionCode() {
    if (!secureStorage.get("rsa_privkey")) {
        return
    }

    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText != ERROR_STRING && this.responseText != "") {
            let cipher_text = web3_aux.toAscii(this.responseText);
            let cipher_text_bytes = textToArrayBuffer(cipher_text);
            let priv_pem = secureStorage.get("rsa_privkey").replace(new RegExp(THE_AND, 'g'), "\r\n");

            importRSAPrivateKey(priv_pem).then(function (key) {
                RSADecrypt(key, cipher_text_bytes).then(function (code) {
                    secureStorage.set("adminSessionCode", arrayBufferToText(code))
                })
            })
        }
    });

    let rsa = web3_aux.fromAscii(secureStorage.get("rsa_pubkey").replace(new RegExp(THE_AND, 'g'), "\r\n"));
    rsa = rsa.replace("0x", "");
    sendRequest(request, "http://" + localhost127 + ":1985/queryNewSession?rsa=" + rsa)
}

/**
 * Send a message via Tor representing a vote
 * @param {string} candidate
 */
function sendPreVoteMessage(candidate) {
    let group = mygroup_info_json.index;
    let current_ballot = campaign_info_json.current_ballot;

    if (!mygroup_info_json.chairperson_tor.onion || !mygroup_info_json.chairperson_tor.public_key) {
        toast(klang.error, 2500);
        return
    }

    let onion = mygroup_info_json.chairperson_tor.onion;
    let public_key = mygroup_info_json.chairperson_tor.public_key;

    if (!secureStorage.get("last_signature_" + current_campaign.id + "_" + campaign_info_json.current_ballot)){
        toast(klang.vote_not_ready, 2000);
        return
    }

    let first_number = "0x" +
        keccak256(secureStorage.get("last_signature_" + current_campaign.id + "_" + campaign_info_json.current_ballot));

    //To prove the origin of the message
    let aux_wallet = new ethers.Wallet(prevoter_wallet.privateKey);
    let vote_message = current_campaign.id + "-" + current_ballot + (parseInt(candidate) < 0 ? DELETE_SUFFIX : "");

    let signature = aux_wallet.signMessage(vote_message);

    let payload_json = {
        ballot: current_ballot, group: group, candidate: parseInt(candidate), address: prevoter_wallet.address,
        signature: signature, first_number: first_number, campaign: current_campaign.id
    };
    let payload = JSON.stringify(payload_json);

    openCaptchaModal();

    call_after_captcha = function(){
        secureStorage.set("waitPreVote",
            JSON.stringify({
                current_ballot: current_ballot,
                group: group,
                first_number: first_number,
                candidate: parseInt(candidate)
            }));

        candidatesClick();
        for (let i = 0; i < 10; i++){
            sleep((1 + i) * 15000).then(function () {
                if (secureStorage.get("waitPreVote")) {
                    checkPreVote()
                }
            })
        }
    };

    prepareTorMessage(PREVOTE, payload, onion, public_key);
}

/**
 * It checks, with an observer, if the pre-vote was registered in the blockchain
 */
function checkPreVote() {
    if (!secureStorage.get("waitPreVote") || campaign_info_json.no_campaign){
        return
    }

    let preVote = JSON.parse(secureStorage.get("waitPreVote"));
    if (preVote.current_ballot != campaign_info_json.current_ballot){
        secureStorage.remove("waitPreVote");
        return
    }

    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText == TRUE_STRING) {
            sendVoteMessage(preVote)
        }
    });

    let observer = getRandomObserver();
    let onionAddr = observer.onionAddr;
    let pubkeyHash = observer.hash;

    if (!onionAddr){
        log("Error while checking the prevote");
        return
    }

    if (using_local_server){
        sendUnescapedRequest(request, "http://" + localhost127 + ":1988/queryCheckPreVote?ballot=" +
            preVote.current_ballot + "&group=" + preVote.group + "&fnumber=" + preVote.first_number +
            "&candidate=" + preVote.candidate)
    } else if (onionAddr == getOnionAddress()){
        sendUnescapedRequest(request, "http://" + onionAddr + "/queryCheckPreVote?ballot=" + preVote.current_ballot +
            "&group=" + preVote.group + "&fnumber=" + preVote.first_number + "&candidate=" + preVote.candidate)
    } else{
        getObserverPubkey(onionAddr, pubkeyHash, function () {
            sendRequestToObserver(request, "http://" + onionAddr + "/queryCheckPreVote?ballot=" +
                preVote.current_ballot + "&group=" + preVote.group + "&fnumber=" + preVote.first_number +
                "&candidate=" + preVote.candidate, observers_pubkey_map.get(onionAddr))
        });
    }
}

/**
 * It gets the RSA pubkey and checks it with a hash
 * @param {string} onionAddr
 * @param {string} pubkeyHash
 * @param callback
 */
function getObserverPubkey(onionAddr, pubkeyHash, callback){
    if (observers_pubkey_map.get(onionAddr)){
        callback()
    } else{
        let request = new XMLHttpRequest();
        request.addEventListener("load", function () {
            let pubkey = this.responseText;

            if (pubkeyHash == "0x" + keccak256(pubkey)){
                observers_pubkey_map.set(onionAddr, pubkey);
                callback()
            }
        });
        request.open('GET', "http://" + onionAddr + "/queryGetRSAPubkey", true);
        request.send()
    }
}

/**
 * It chooses the adequate host depending on whether the user is using the local server
 * @param {string} onionAddr
 * @return {string}
 */
function adequateHost(onionAddr) {
    let host = "";

    if (using_local_server) {
        host = "http://" + localhost127 + ":1988"
    } else {
        host = "http://" + onionAddr
    }
    return host
}

/**
 * It returns an observer which will be used to check the pre-vote
 * @return {Object}
 */
function getRandomObserver() {
    if (!secureStorage.get("observers_onions")) {
        let onionAdrr = getOnionAddress();
        return {onionAddr: onionAdrr, hash: ""}
    }
    let observer = shuffle(secureStorage.get("observers_onions").split(","))[0];
    let parts = observer.split("-");
    if (parts.length == 2){
        return {onionAddr: parts[0], hash: parts[1]}
    }

    return {onionAddr: "", hash: ""}
}

/**
 * Send a message via Tor representing a vote
 * @param {Object} preVote
 */
function sendVoteMessage(preVote) {
    if (!mygroup_info_json.chairperson_tor.onion || !mygroup_info_json.chairperson_tor.public_key) {
        return
    }

    let payload_json = {
        ballot: preVote.current_ballot, group: preVote.group, candidate: preVote.candidate,
        signature: secureStorage.get("last_signature_" + current_campaign.id + "_" + preVote.current_ballot),
        first_number: preVote.first_number, campaign: current_campaign.id
    };

    let payload = JSON.stringify(payload_json);
    let data = web3_aux.fromAscii(payload);

    let onionAddr = getOnionAddress();
    if (!onionAddr){
        log("Error while sending the vote");
        return
    }
    let host = adequateHost(onionAddr);

    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText.startsWith(COMPLETE_STRING)) {
            secureStorage.set("my_vote_" + current_campaign.id + "_" + campaign_info_json.current_ballot, payload);
            secureStorage.remove("waitPreVote");
            if (current_page == klang.candidates) {
                sleep(1000).then(candidatesClick)
            }
        }
    });
    sendRequest(request, host + "/querySendVoteGet?data=" + data + "&captcha=" +
        secureStorage.get("prevote_nonce_" + current_campaign.id + "_" + campaign_info_json.current_ballot));
}

/**
 * Gather the public keys in the format required to run the URS (Unique Ring Signatures) script
 * @param {string[]} pubkeys_array
 * @returns {string}
 */
function makePubkeys(pubkeys_array) {
    let result = "{";
    for (let i = 0, j = 0; i < pubkeys_array.prefixes.length; i++) {
        if (pubkeys_array.prefixes[i] && notNullChars(pubkeys_array.keys[i])) {
            result += "\"" + j + "\":\"" + "0" + pubkeys_array.prefixes[i] + pubkeys_array.keys[i] + "\",";
            j++
        }
    }
    result = result.substring(0, result.length - 1) + "}";
    return result
}


/**
 * Prepare the payload and then send a tor message
 */
function sendRegisterVoterMessage() {
    let user = localStorage.getItem("user");
    let keyStr = sessionStorage.getItem("key");

    if (!user || !wallet.address || !keyStr) {
        toast(klang.no_vault_opened, 3000);
        return
    }

    let key = JSON.parse(keyStr);

    if (!current_campaign.id) {
        toast(klang.no_campaign_opened, 3000);
        return
    }

    if (!secureStorage.get("my_certificate")) {
        toast(klang.no_certificate, 3000);
        return
    }

    openCaptchaModal(true);

    //To prove the origin of the message
    let aux_wallet = new ethers.Wallet(wallet.privateKey);
    let signature = aux_wallet.signMessage(current_campaign.id);

    let certificate = JSON.parse(secureStorage.get("my_certificate"));
    let payload_json = {
        user: user,
        address: wallet.address,
        pubkey: key.pubkey,
        signature: signature,
        not_before: "" + certificate.validity.not_before,
        certificate_signature: certificate.certificate_signature
    };

    let payload = JSON.stringify(payload_json);

    let onion = campaign_info_json.chairperson_tor.onion;
    let public_key = campaign_info_json.chairperson_tor.public_key;

    prepareTorMessage(REGISTER_VOTER, payload, onion, public_key)
}

/**
 * Send an anonymous message via Tor
 */
function prepareTorMessage(topic, payload, onion, pubkey) {
    let query = "";
    let data = web3_aux.fromAscii(payload);

    switch (topic) {
        case REGISTER_VOTER:
            query = "/queryRegisterVoterGet?";
            break;
        case PREVOTE:
            query = "/querySendPreVoteGet?";
            let nonce = sha256(data);
            nonce = nonce.substring(0, 16);
            secureStorage.set("prevote_nonce_" + current_campaign.id + "_" + campaign_info_json.current_ballot, nonce);
            break;
        case ENTER_GROUP:
            query = "/queryEnterGroupGet?"
    }

    if (using_local_server) {
        tor_request = "http://" + localhost127 + ":1988" + query + "data=" + data +
            "&captcha=[[captcha]]"
    } else {
        tor_request = "http://" + onion + query + "data=" + data + "&captcha=[[captcha]]"
    }
}

/**
 * It sends the message only after the voter fills the captcha
 * @param {string} captcha_input_value
 */
function sendTorMessage(captcha_input_value) {
    if (!captcha_input_value || captcha_input_value.length != 6) {
        toast(klang.error, 2500);
        return
    }

    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText.startsWith(COMPLETE_STRING)) {
            toast(klang.success, 2500);
            call_after_captcha();
            call_after_captcha = null
        } else {
            toast(klang.error, 2500)
        }
        captcha_img.src = "//:0";
        captcha_input.value = ""
    });
    request.addEventListener("error", function () {
        if (secureStorage.get("campaign_info_json")){
            campaign_info_json = JSON.parse(secureStorage.get("campaign_info_json"))
        }
    });

    tor_request = tor_request.replace("[[captcha]]", captcha_input_value);
    $("#modal10").modal("close");

    sendRequest(request, tor_request)
}

/**
 * Group chairpersons can insert their tor addresses and receive messages
 * Each time it is called a new public key is inserted into the blockchain
 */
function addTorAddressIntoBlockchain() {
    let public_key = secureStorage.get("rsa_pubkey");

    if (the_contract.getTor(wallet.address.toLowerCase(), 0) == web3_aux.fromAscii(my_onion_address)) {
        return
    }

    the_contract.defineTor(wallet.address.toLowerCase(), 0, web3_aux.fromAscii(my_onion_address));
    for (let i = 0; i * 32 < public_key.length; i++) {
        let end = (i + 1) * 32 < public_key.length ? (i + 1) * 32 : public_key.length;
        the_contract.defineTor(wallet.address.toLowerCase(), i + 1, web3_aux.fromAscii(public_key.substring(i * 32, end)))
    }
}

/**
 * It gets the user's Hidden Service address
 */
function whatIsMyOnionAddress() {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText != ERROR_STRING && this.responseText != "") {
            my_onion_address = this.responseText.substring(0, 22)
        }
    });

    sendRequest(request, "http://" + localhost127 + ":1985/queryGetHiddenServiceHostname")
}

/**
 * Getting the full enode
 * In order to send it to the campaign creator
 * @returns {Promise}
 */
function whatIsMyEnode() {
    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText.startsWith("enode://")) {
            enode_without_ip = this.responseText;
        }
    });

    request.addEventListener("error", function () {
        log("Error while getting the enode");
        resolve()
    });

    sendRequest(request, "http://" + localhost127 + ":1985/queryEnode?port=8545")
}

/**
 * Click the menu item to go to the start page
 */
function logoContainerClick() {
    //logoClick();
    $("#logo_container").click()
}

/**
 * Clean the input fields
 */
function clearCreateCampaignFields() {
    campaign_name_input.value = "";
    campaign_description_input.value = "";
    image_input.value = "";
    image_input.className = image_input.className.replace("invalid", "").replace("valid", "");
    campaign_external_page_input.value = "";
    campaign_external_page_input.className = campaign_external_page_input.className.replace("invalid", "").replace("valid", "");
    final_date_input.value = "";
    initial_date_input.value = "";
    prefix_voters_input.value = "";
    suffix_voters_input.value = "";
    $("#country_select").val('AF');
    $("#country_select").material_select();
    $("#rounds_select").val('');
    $("#rounds_select").material_select()
}

/**
 * Clean the input fields
 */
function clearAdminCampaign() {
    insert_candidates_textarea.value = "";
    insert_parties_textarea.value = "";
    insert_group_categories_textarea.value = "";
    insert_voters_textarea.value = "";
    add_voters_to_groups_textarea.value = "";
    create_round_id.value = "";
    how_many_groups.value = "";
    groups_chairperson.value = "";
    transfer_finney_amount_value.value = "";
    transfer_finney_account_value.value = ""
}

/**
 * Some functions are only called when using local server
 * @returns {boolean}
 */
function isUsingLocalServer() {
    return (window.location.href.startsWith("http://localhost:1985") ||
        window.location.href.startsWith("http://127.0.0.1:1985"))
}

/**
 * It stores IPFS data into the blockchain (it will be accessed by the Node.js server and then sent to the go server)
 * @returns {Promise}
 */
function storeCampaignIPFSInfoIntoBlockchain() {
    if (!the_contract){
        return
    }

    let info = {};
    if (!current_campaign.no_campaign) {
        info.profile = JSON.parse(JSON.stringify(current_campaign));
        if (info.profile.stored){
            delete info.profile["stored"]
        }
    }
    if (secureStorage.get("parties_ipfs_page")) {
        info.parties = JSON.parse(secureStorage.get("parties_ipfs_page"))
    }
    if (secureStorage.get("group_categories_ipfs_page")) {
        info.gcategories = JSON.parse(secureStorage.get("group_categories_ipfs_page"))
    }
    if (secureStorage.get("candidates_ipfs_page_0")) {
        info.candidates0 = JSON.parse(secureStorage.get("candidates_ipfs_page_0"))
    }
    if (secureStorage.get("candidates_ipfs_page_1")) {
        info.candidates1 = JSON.parse(secureStorage.get("candidates_ipfs_page_1"))
    }
    if (secureStorage.get("candidates_ipfs_page_2")) {
        info.candidates2 = JSON.parse(secureStorage.get("candidates_ipfs_page_2"))
    }
    if (secureStorage.get("candidates_ipfs_page_3")) {
        info.candidates3 = JSON.parse(secureStorage.get("candidates_ipfs_page_3"))
    }
    if (secureStorage.get("candidates_ipfs_page_4")) {
        info.candidates4 = JSON.parse(secureStorage.get("candidates_ipfs_page_4"))
    }

    //Voters may verify the source of this info
    let aux_wallet = new ethers.Wallet(wallet.privateKey);
    info.signature = aux_wallet.signMessage(JSON.stringify(info));

    let str_info = JSON.stringify(info);

    if (str_info != last_campaign_ipfs_info) {
        last_campaign_ipfs_info = str_info;

        for (let i = 0; i * 32 < str_info.length; i++) {
            let end = (i + 1) * 32 < str_info.length ? (i + 1) * 32 : str_info.length;
            the_contract.defineCampaignIpfsInfo(i, web3_aux.fromAscii(str_info.substring(i * 32, end)))
        }
    }
}

/**
 * The Node.js script processes voters requests
 */
function startCampaignOnServer() {
    let rsa = web3_aux.fromAscii(secureStorage.get("rsa_privkey").replace(new RegExp(THE_AND, 'g'), "\r\n"));
    rsa = rsa.replace("0x", "");
    let regexp = web3_aux.fromAscii(current_campaign.regexp);
    regexp = regexp.replace("0x", "");

    let request = new XMLHttpRequest();
    sendUnescapedRequest(request, "http://" + localhost127 + ":1985/queryStartCampaign?prefix=" + getUsersHashcodePrefix()
        + "&ecdsa=" + wallet.privateKey.replace("0x", "") + "&rsa=" + rsa + "&ca=" + getCertificateAuthority()
        + "&campaign=" + current_campaign.id + "&regexp=" + regexp + "&pwd=" + getPwd())
}

/**
 * This function gets info from blockchain regarding the voter's group
 * @returns {Promise}
 */
function updateMyGroupInfo() {
    //MINC == disconnected, MIRE == registered but without group, MINR == not registered
    if (mygroup_index == MINR || mygroup_index == MIRE || mygroup_index == MINC || isNaN(mygroup_index)) {
        return
    }

    let onionAddr = getOnionAddress();
    if (!onionAddr) {
        log("Error while updating mygroup info - no onion address");
        return
    }

    let request = new XMLHttpRequest();
    request.addEventListener("load", function () {
        if (this.responseText.startsWith("{")) {
            let aux_group_info_json = JSON.parse(this.responseText);
            let signature = aux_group_info_json.signature;
            if (!verifyMyGroupSignature(this.responseText, signature)) {
                log("Wrong signature for your group");
                return
            }

            if (mygroup_info_json.no_group) {
                if (current_page == klang.candidates) {
                    sleep(1000).then(candidatesClick)
                }

                if (secureStorage.get("enter_group_button_disabled_" + current_campaign.id)) {
                    secureStorage.remove("enter_group_button_disabled_" + current_campaign.id);
                    if (current_page == klang.groups){
                        sleep(1000).then(groupsClick)
                    }
                }
            }

            mygroup_info_json = JSON.parse(this.responseText);
            let pubkey = notNullChars(mygroup_info_json.chairperson_tor.public_key);
            pubkey = pubkey.replace(new RegExp(THE_AND, 'g'), "\r\n");
            mygroup_info_json.chairperson_tor.public_key = pubkey;

            let stored_mygroup_info_json = JSON.parse(JSON.stringify(mygroup_info_json));
            stored_mygroup_info_json.stored = true;
            secureStorage.set("mygroup_info_json_" + current_campaign.id, JSON.stringify(stored_mygroup_info_json));

            if (!secureStorage.get("last_signature_" + current_campaign.id + "_" + campaign_info_json.current_ballot)){
                if (Date.now() > myvote_last_update + 10000) {
                    myvote_last_update = Date.now();
                    updateMyVote()
                }
            }
        } else {
            log("Error while updating mygroup info");
            if (secureStorage.get("mygroup_info_json_" + current_campaign.id)){
                mygroup_info_json = JSON.parse(secureStorage.get("mygroup_info_json_" + current_campaign.id))
            }
        }
    });

    request.addEventListener("error", function () {
        log("Error while updating mygroup info");
        if (secureStorage.get("mygroup_info_json_" + current_campaign.id)){
            mygroup_info_json = JSON.parse(secureStorage.get("mygroup_info_json_" + current_campaign.id))
        }
    });

    let host = adequateHost(onionAddr);
    sendRequest(request, host + "/queryGetGroupInfo?index=" + mygroup_index)
}

/**
 * It checks if the mygroup_info_json was signed by the chairperson
 * @param {string} group_json
 * @param {string} signature
 * @returns {boolean}
 */
function verifyMyGroupSignature(group_json, signature) {
    let mygroup_without_sig = group_json.replace(signature, "");
    let signer_address = ethers.Wallet.verifyMessage(mygroup_without_sig, signature);

    return (signer_address == mygroup_info_json.chairperson || signer_address == current_campaign.address)
}

/**
 * It checks if the IPFS info of the campaign was signed by the chairperson
 * @param {string} ipfs_json
 * @param {string} address
 * @returns {boolean}
 */
function verifyCampaignIPFSInfoSignature(ipfs_json, address) {
    let signature = ipfs_json.signature;
    delete ipfs_json["signature"];

    if (address) {
        return (ethers.Wallet.verifyMessage(JSON.stringify(ipfs_json), signature) == address)
    }

    return (ethers.Wallet.verifyMessage(JSON.stringify(ipfs_json), signature) == current_campaign.address ||
        ethers.Wallet.verifyMessage(JSON.stringify(ipfs_json), signature) == mygroup_info_json.chairperson)
}

/**
 * It checks if the number of voters in the voter's group changed.
 * If so, it sends a message to the worker to generate a new vote
 */
function updateMyVote() {
    if (!mygroup_info_json.voters || !current_campaign.id || !mygroup_info_json.pubkeys
        || campaign_info_json.mgz != mygroup_info_json.voters.length) {
        return
    }

    let how_many = 0;
    for (let i = 0; i < campaign_info_json.mgz; i++) {
        if (notNullChars(mygroup_info_json.voters[i])) {
            how_many++
        }
    }

    if (how_many == campaign_info_json.mgz) {
        let current_ballot = campaign_info_json.current_ballot;
        let vote_message = current_campaign.id + "-" + current_ballot;
        let pubkeys = makePubkeys(mygroup_info_json.pubkeys);
        let keypair = sessionStorage.getItem("key");

        let arguments_json = {vote_message: vote_message, pubkeys: pubkeys, keypair: keypair};

        if (keypair && current_ballot !== undefined) {
            signer.postMessage(JSON.stringify(arguments_json))
        }
    }
}

/**
 * The campaign owner stores a map with all voters linked with their groups.
 * It is important to know this index in order to interact with the blockchain
 * @returns {Promise}
 */
function whatIsMyGroupIndex() {
    if (!wallet.address) {
        mygroup_index = MINC;
        log("Error while getting mygroup index - no wallet");
        return new Promise(resolve => {
            resolve()
        })
    }

    let onionAddr = getOnionAddress();
    if (!onionAddr) {
        mygroup_index = MINC;
        log("Error while getting mygroup index - no onion address");
        return new Promise(resolve => {
            resolve()
        })
    }

    return new Promise(resolve => {
        let passphrase = randomString(16);
        let request = new XMLHttpRequest();
        request.addEventListener("load", async function () {
            if (this.responseText != ERROR_STRING && this.responseText != "") {
                let response = await AESDecrypt(passphrase, this.responseText);
                if (current_page == klang.campaign_info && mygroup_index != response) {
                    sleep(3000).then(campaignInfoClick)
                } else if (current_page == klang.candidates && mygroup_index != response) {
                    sleep(3000).then(candidatesClick)
                }
                mygroup_index = response;
                secureStorage.set("mygroup_index_" + current_campaign.id, mygroup_index)
            }
            resolve()
        });

        request.addEventListener("error", function () {
            mygroup_index = MINC;
            log("Error while getting mygroup index");
            resolve()
        });

        let host = adequateHost(onionAddr);
        sendUnescapedRequestWithPassphrase(request,
            host + "/queryMyGroupIndex?address=" + wallet.address.toLowerCase(), passphrase)
    })
}

/**
 * Call it after the campaign creator changes something in the blockchain
 */
function updateInfoAfterAWhile(){
    sleep(SECONDS_TO_UPDATE_INFO * 1000).then(updateCampaignInfo);
    sleep(SECONDS_TO_UPDATE_INFO * 1000).then(updateMyGroupInfo);
    sleep(2 * SECONDS_TO_UPDATE_INFO * 1000).then(updateCampaignInfo);
    sleep(2 * SECONDS_TO_UPDATE_INFO * 1000).then(updateMyGroupInfo)
    sleep(3 * SECONDS_TO_UPDATE_INFO * 1000).then(updateCampaignInfo);
    sleep(3 * SECONDS_TO_UPDATE_INFO * 1000).then(updateMyGroupInfo)
}

/**
 * This function gets info from blockchain which should be displayed on candidates, voting, and statistics pages
 * @returns {Promise}
 */
function updateCampaignInfo() {
    //What is the onion address to request info about the campaign
    let onionAddr = getOnionAddress();
    if (!onionAddr) {
        log("Error while updating campaign - no onion address");
        return new Promise(resolve => {
            resolve()
        })
    }

    return new Promise(resolve => {
        let request = new XMLHttpRequest();
        request.addEventListener("load", function () {
            if (this.responseText.startsWith("{")) {
                let aux_campaign_info_json = JSON.parse(this.responseText);

                if (!verifyCampaignSignature(this.responseText, aux_campaign_info_json.signature)) {
                    log("Wrong signature for the campaign");
                    return
                }

                if (aux_campaign_info_json.current_ballot != campaign_info_json.current_ballot) {
                    if (!secureStorage.get("last_signature_" + current_campaign.id +
                            aux_campaign_info_json.current_ballot)){
                        if (Date.now() > myvote_last_update + 10000) {
                            myvote_last_update = Date.now();
                            sleep(500).then(updateMyVote)
                        }
                    }
                }

                //Refreshing the "connecting" message
                if (current_page == klang.campaign_info && (campaign_info_json.no_campaign ||
                        campaign_info_json.stored)) {
                    sleep(500).then(campaignInfoClick)
                }

                campaign_info_json = JSON.parse(this.responseText);
                let pubkey = notNullChars(campaign_info_json.chairperson_tor.public_key);
                pubkey = pubkey.replace(new RegExp(THE_AND, 'g'), "\r\n");
                campaign_info_json.chairperson_tor.public_key = pubkey;

                let stored_campaign_info_json = JSON.parse(JSON.stringify(campaign_info_json));
                stored_campaign_info_json.stored = true;
                secureStorage.set("campaign_info_json", JSON.stringify(stored_campaign_info_json));
            } else {
                log("Error while updating campaign");
                if (secureStorage.get("campaign_info_json")){
                    campaign_info_json = JSON.parse(secureStorage.get("campaign_info_json"));
                }
            }
            resolve()
        });

        request.addEventListener("error", function () {
            log("Error while updating campaign");
            if (secureStorage.get("campaign_info_json")){
                campaign_info_json = JSON.parse(secureStorage.get("campaign_info_json"));
            }
            resolve()
        });

        let host = adequateHost(onionAddr);
        sendRequest(request, host + "/queryGetCampaignInfo")
    })
}

/**
 * It checks if the campaign_info_json was signed by the current_campaign.address owner
 * @param {string} campaign_json
 * @param {string} signature
 * @returns {boolean}
 */
function verifyCampaignSignature(campaign_json, signature) {
    let campaign_without_sig = campaign_json.replace(signature, "");
    let signer_address = ethers.Wallet.verifyMessage(campaign_without_sig, signature);
    return (signer_address == current_campaign.address || signer_address == mygroup_info_json.chairperson)
}

/**
 * It returns the voter's group onion address when it is defined, and the campaign onion address when it is not
 * @returns {string}
 */
function getOnionAddress() {
    if (!isEmpty(mygroup_info_json) && mygroup_info_json.chairperson_tor && mygroup_info_json.chairperson_tor.onion) {
        return mygroup_info_json.chairperson_tor.onion
    }
    return current_campaign.onion
}

/**
 * The hashcode prefix is used to insert masked usernames into the blockchain
 * @param {number} n
 * @returns {string}
 */
function getUsersHashcodePrefix() {
    return sessionStorage.getItem("usershash_seed")
}

/**
 * It allows users to encrypt/decrypt data stored in the LocalStorage
 */
async function setSecureStorage() {
    if (sessionStorage.getItem("key")) {
        let key = JSON.parse(sessionStorage.getItem("key"));
        secureStorage = new SecureLS({
            encodingType: 'aes', isCompression: false,
            encryptionSecret: keccak224(key.privkey)
        });

        if (localStorage.getItem("ekhash") &&
            localStorage.getItem(localStorage.getItem("ekhash"))){
            let decrypted = await AESDecrypt(keccak224(key.privkey),
                localStorage.getItem(localStorage.getItem("ekhash")));
            let old = JSON.parse(decrypted);
            for(let k in old) {
                secureStorage.set(k, old[k])
            }

            localStorage.removeItem(localStorage.getItem("ekhash"));
        }
    }
}

/**
 * Pre-register the voters
 * @param {string} insert_voters_textarea_value
 */
function populateCampaign(insert_voters_textarea_value){
    let voters = insert_voters_textarea_value.split("\n");
    let reg_voters = 0;

    for (let v = 0; v < voters.length; v++){
        let parts = voters[v].split(";");
        if (parts.length != 3){
            continue
        }
        let name = parts[0];
        let address = parts[1];
        let pubkey_complete = parts[2];
        let prefix = pubkey_complete.substring(1,2);
        let pubkey = "0x" + pubkey_complete.substring(2);
        let sum = "0x" + sha256(getUsersHashcodePrefix() + name);

        the_contract.giveRightToVote(address, prefix, pubkey, sum);
        reg_voters++
    }

    log(reg_voters + " voters registered");
    clearAdminCampaign()
}

/**
 * Choose groups on behalf of voters
 * @param {string} add_voters_to_groups_textarea_value
 */
function addVotersToGroups(add_voters_to_groups_textarea_value){
    let voters_unchecked = add_voters_to_groups_textarea_value.split("\n");
    let voters = [];
    let added_voters = 0;

    //removing invalid lines
    for (let r = 0, v = 0; r < voters_unchecked.length; r++){
        let parts = voters_unchecked[r].split(";");
        if (parts.length != 3){
            continue
        }
        let address = parts[0];
        let group = parts[1];
        let position = parts[2];
        if (isNaN(group) || isNaN(position) || !web3_aux.isAddress(address)){
            continue
        }

        voters[v] = voters_unchecked[r];
        v++
    }

    for (let v = 0; v < voters.length; v++){
        let parts = voters[v].split(";");
        let address = parts[0];
        let group = parts[1];
        let position = parts[2];
        let last = (v == (voters.length - 1));

        sendSimpleRequest("http://" + localhost127 + ":1985/queryAddVoterToGroup?address="
            + address + "&group=" + group + "&position=" + position + "&last=" + (last? TRUE_STRING : FALSE_STRING));
        added_voters++
    }

    log(added_voters + " voters added to groups");
    log("Voters cannot join groups while there are pending transactions!");
    clearAdminCampaign()
}

/******************** Tools ********************/

/**
 * Sleep/Delay
 * @returns {Promise}
 */
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * This function indicates whether the user is probably using the Tor browser
 * @returns {boolean}
 */
function probablyTor(){
    if (new Date().getTimezoneOffset() != 0){
        return false
    }
    if (navigator.plugins.length > 0){
        return false
    }
    if (navigator.userAgent.indexOf("Firefox") == -1){
        return false
    }
    if (window.innerWidth != window.screen.width || window.innerHeight != window.screen.height){
        return false
    }
    return true
}

/**
 * Java-style hashcode (to generate numeric hashs - eg. nonces)
 * @param {string} str
 * @returns {number}
 */
function hashCode(str) {
    let hash = 0, chr;
    if (!str || str.length === 0) return hash;
    for (let i = 0; i < str.length; i++) {
        chr = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0 // Convert to 32bit integer
    }
    //return only positive numbers
    return hash + 2147483648
}

/**
 * It returns the value of a parameter in a URL
 * @param {string} name
 * @param {string} url
 * @returns {string}
 */
function getParameterByName(name, url) {
    if (!url) {
        url = window.location.href
    }
    name = name.replace(/[\[\]]/g, "\\$&");
    let regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) {
        return ""
    }
    if (!results[2]) {
        return ""
    }
    return decodeURIComponent(results[2].replace(/\+/g, " "))
}

/**
 * bs58 decodeUnsafe
 * @param string
 * @returns {Buffer}
 */
function decodeUnsafe(string) {
    if (typeof string !== 'string') throw new TypeError('Expected String');
    if (string.length === 0) return Buffer.allocUnsafe(0);

    let bytes = [0];
    for (let i = 0; i < string.length; i++) {
        let value = BS58_ALPHABET_MAP[string[i]];
        if (value === undefined) return Buffer.allocUnsafe(0);

        let carry = value;
        for (let j = 0; j < bytes.length; ++j) {
            carry += bytes[j] * BS58_BASE;
            bytes[j] = carry & 0xff;
            carry >>= 8
        }

        while (carry > 0) {
            bytes.push(carry & 0xff);
            carry >>= 8
        }
    }

    // deal with leading zeros
    for (let k = 0; string[k] === BS58_LEADER && k < string.length - 1; ++k) {
        bytes.push(0)
    }

    return Buffer.from(bytes.reverse())
}

/**
 * It randomizes an array
 * @param {Object[]} array
 * @returns {Object[]}
 */
function shuffle(array) {
    let currentIndex = array.length, temporaryValue, randomIndex;

    // While there remain elements to shuffle...
    while (0 !== currentIndex) {

        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;

        // And swap it with the current element.
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue
    }

    return array
}

/**
 * It removes the zeros from the hex string
 * @param {string} hex_str
 * @returns {string}
 */
function notNullChars(hex_str) {
    return web3_aux.toAscii(removeDoubleZeros(hex_str))
}

/**
 * It removes the hexadecimal zeros
 * @param {string} hex_str
 * @returns {string}
 */
function removeDoubleZeros(hex_str) {
    if (hex_str.length % 2 != 0) {
        return ""
    }

    let hex_str_without_zeros = "";
    for (let i = 0; i < (hex_str.length / 2); i++) {
        let two_digits = "" + hex_str[2 * i] + hex_str[(2 * i) + 1];

        if (two_digits != "00") {
            hex_str_without_zeros += two_digits
        }
    }

    return hex_str_without_zeros
}

/**
 * It verifies if a javascript object is empty
 * @param {Object} obj
 * @returns {boolean}
 */
function isEmpty(obj) {

    // null and undefined are "empty"
    if (obj == null) return true;

    // Assume if it has a length property with a non-zero value
    // that that property is correct.
    if (obj.length > 0) return false;
    if (obj.length === 0) return true;

    // If it isn't an object at this point
    // it is empty, but it can't be anything *but* empty
    // Is it empty?  Depends on your application.
    if (typeof obj !== "object") return true;

    // Otherwise, does it have any properties of its own?
    // Note that this doesn't handle
    // toString and valueOf enumeration bugs in IE < 9
    for (let key in obj) {
        if (hasOwnProperty.call(obj, key)) return false
    }

    return true
}

/**
 * It shows a 'toast' when using a GUI or print the message in the console
 * @param {string} msg
 * @param {number} duration
 */
function toast(msg, duration) {
    Materialize.toast(msg, duration, 'rounded')
}

/**
 * It displays a message in the console
 * @param {string} msg
 */
function log(msg) {
    console.log(msg)
}

/**
 * In order to call decodeUnsafe
 */
function prepareAlphabetMap() {
    // pre-compute lookup table
    for (let z = 0; z < BS58_ALPHABET.length; z++) {
        let x = BS58_ALPHABET.charAt(z);

        if (BS58_ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous');
        BS58_ALPHABET_MAP[x] = z
    }

    BS58_BASE = BS58_ALPHABET.length;
    BS58_LEADER = BS58_ALPHABET.charAt(0)
}

/**
 * It generates a random string with N chars
 * @param {number} n
 * @returns {string}
 */
function randomString(n) {
    let text = "";
    let possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (let i = 0; i < n; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length))

    return text
}

/************************** RSA tools *******************************/

function generateRSAKeys() {
    return new Promise(function (resolve) {
        let genkey = window.crypto.subtle.generateKey(ENCRYPT_ALGORITHM_RSA, true,
            ["encrypt", "decrypt"]);
        genkey.then(function (pair) {
            resolve(pair)
        })
    })
}

function arrayBufferToBase64String(arrayBuffer) {
    let byteArray = new Uint8Array(arrayBuffer);
    let byteString = '';
    for (let i = 0; i < byteArray.byteLength; i++) {
        byteString += String.fromCharCode(byteArray[i])
    }
    return btoa(byteString)
}

function base64StringToArrayBuffer(b64str) {
    let byteStr = atob(b64str);
    let bytes = new Uint8Array(byteStr.length);
    for (let i = 0; i < byteStr.length; i++) {
        bytes[i] = byteStr.charCodeAt(i)
    }
    return bytes.buffer
}

function textToArrayBuffer(str) {
    let bufView = new Uint8Array(str.length);
    for (let i = 0; i < str.length; i++) {
        bufView[i] = str.charCodeAt(i)
    }
    return bufView
}

function arrayBufferToText(arrayBuffer) {
    let byteArray = new Uint8Array(arrayBuffer);
    let str = '';
    for (let i = 0; i < byteArray.byteLength; i++) {
        str += String.fromCharCode(byteArray[i])
    }
    return str
}

function convertBinaryToPem(binaryData, label) {
    let base64Cert = arrayBufferToBase64String(binaryData);
    let pemCert = "-----BEGIN " + label + "-----\r\n";
    let nextIndex = 0;
    let lineLength;
    while (nextIndex < base64Cert.length) {
        if (nextIndex + 64 <= base64Cert.length) {
            pemCert += base64Cert.substr(nextIndex, 64) + "\r\n"
        } else {
            pemCert += base64Cert.substr(nextIndex) + "\r\n"
        }
        nextIndex += 64
    }
    pemCert += "-----END " + label + "-----\r\n";
    return pemCert
}

function convertPemToBinary(pem) {
    let lines = pem.split('\n');
    let encoded = '';
    for(let i = 0;i < lines.length;i++){
        if (lines[i].trim().length > 0 &&
            lines[i].indexOf('-BEGIN RSA PRIVATE KEY-') < 0 &&
            lines[i].indexOf('-BEGIN RSA PUBLIC KEY-') < 0 &&
            lines[i].indexOf('-END RSA PRIVATE KEY-') < 0 &&
            lines[i].indexOf('-END RSA PUBLIC KEY-') < 0) {
            encoded += lines[i].trim()
        }
    }
    return base64StringToArrayBuffer(encoded)
}

function importRSAPublicKey(pemKey) {
    return new Promise(function(resolve) {
        let importer = window.crypto.subtle.importKey("spki", convertPemToBinary(pemKey), ENCRYPT_ALGORITHM_RSA,
            true, ["encrypt"]);
        importer.then(function(key) {
            resolve(key)
        })
    })
}

function importRSAPrivateKey(pemKey) {
    return new Promise(function(resolve) {
        let importer = window.crypto.subtle.importKey("pkcs8", convertPemToBinary(pemKey), ENCRYPT_ALGORITHM_RSA,
            true, ["decrypt"]);
        importer.then(function(key) {
            resolve(key)
        })
    })
}

function exportRSAPublicKey(keys) {
    return new Promise(function (resolve) {
        window.crypto.subtle.exportKey('spki', keys.publicKey).then(function (spki) {
            resolve(convertBinaryToPem(spki, "RSA PUBLIC KEY"))
        })
    })
}

function exportRSAPrivateKey(keys) {
    return new Promise(function (resolve) {
        let expK = window.crypto.subtle.exportKey('pkcs8', keys.privateKey);
        expK.then(function (pkcs8) {
            resolve(convertBinaryToPem(pkcs8, "RSA PRIVATE KEY"))
        })
    })
}

function exportRSAPemKeys(keys) {
    return new Promise(function (resolve) {
        exportRSAPublicKey(keys).then(function (pubKey) {
            exportRSAPrivateKey(keys).then(function (privKey) {
                resolve({publicKey: pubKey, privateKey: privKey})
            })
        })
    })
}

function RSAEncrypt(vector, key, data) {
    return window.crypto.subtle.encrypt(
        {
            name: "RSA-OAEP",
            iv: vector
        },
        key,
        textToArrayBuffer(data)
    )
}

function RSADecrypt(key, data) {
    return window.crypto.subtle.decrypt(
        {
            name: "RSA-OAEP"
        },
        key,
        data
    )
}

/************************ AES tools *****************************/

/**
 * Encodes a utf8 string as a byte array.
 * @param {string} str
 * @returns {Uint8Array}
 */
function str2buf(str) {
    if (window.TextEncoder) {
        return new TextEncoder('utf-8').encode(str)
    }
    let utf8 = encodeURIComponent(str);
    let result = new Uint8Array(utf8.length);
    for (let i = 0; i < utf8.length; i++) {
        result[i] = utf8.charCodeAt(i)
    }
    return result
}

/**
 * Decodes a byte array as a utf8 string.
 * @param {Uint8Array} buffer
 * @returns {string}
 */
function buf2str(buffer) {
    if (window.TextDecoder) {
        return new TextDecoder("utf-8").decode(buffer)
    }
    let result = "";
    for (let i = 0; i < buffer.length; i++) {
        result += String.fromCharCode(buffer[i])
    }
    return result
}

/**
 * Decodes a string of hex to a byte array.
 * @param {string} hexStr
 * @returns {Uint8Array}
 */
function hex2buf(hexStr) {
    return new Uint8Array(hexStr.match(/.{2}/g).map(h => parseInt(h, 16)))
}

/**
 * Encodes a byte array as a string of hex.
 * @param {Uint8Array} buffer
 * @returns {string}
 */
function buf2hex(buffer) {
    return Array.prototype.slice
        .call(new Uint8Array(buffer))
        .map(x => [x >> 4, x & 15])
        .map(ab => ab.map(x => x.toString(16)).join(""))
        .join("")
}

/**
 * Given a passphrase, this generates a crypto key
 * using `PBKDF2` with SHA256 and 1000 iterations.
 * If no salt is given, a new one is generated.
 * The return value is an array of `[key, salt]`.
 * @param {string} passphrase
 * @param {UInt8Array} salt [salt=random bytes]
 * @returns {Promise<[CryptoKey,UInt8Array]>}
 */
function AESDeriveKey(passphrase, salt) {
    salt = salt || crypto.getRandomValues(new Uint8Array(8));
    return window.crypto.subtle
        .importKey("raw", str2buf(passphrase), "PBKDF2", false, ["deriveKey"])
        .then(key =>
            window.crypto.subtle.deriveKey(
                {name: "PBKDF2", salt, iterations: 1000, hash: "SHA-256"},
                key,
                {name: "AES-GCM", length: 256},
                false,
                ["encrypt", "decrypt"],
            ),
        )
        .then(key => [key, salt])
}

/**
 * Given a passphrase and some plaintext, this derives a key
 * (generating a new salt), and then encrypts the plaintext with the derived
 * key using AES-GCM. The ciphertext, salt, and iv are hex encoded and joined
 * by a "-". So the result is `"salt-iv-ciphertext"`.
 * @param {string} passphrase
 * @param {string} plaintext
 * @returns {Promise<String>}
 */
function AESEncrypt(passphrase, plaintext) {
    const iv = crypto.getRandomValues(new Uint8Array(12));
    const data = str2buf(plaintext);
    return AESDeriveKey(passphrase).then(([key, salt]) =>
        window.crypto.subtle
            .encrypt({name: "AES-GCM", iv}, key, data)
            .then(ciphertext => `${buf2hex(salt)}-${buf2hex(iv)}-${buf2hex(ciphertext)}`),
    )
}

/**
 * Given a key and ciphertext (in the form of a string) as given by `encrypt`,
 * this decrypts the ciphertext and returns the original plaintext
 * @param {string} passphrase
 * @param {string} saltIvCipherHex
 * @returns {Promise<String>}
 */
function AESDecrypt(passphrase, saltIvCipherHex) {
    const [salt, iv, data] = saltIvCipherHex.split("-").map(hex2buf);
    return AESDeriveKey(passphrase, salt)
        .then(([key]) => window.crypto.subtle.decrypt({name: "AES-GCM", iv}, key, data))
        .then(v => buf2str(new Uint8Array(v)))
}